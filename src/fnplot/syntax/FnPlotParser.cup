package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;
import fnplot.values.FnPlotReal;
import fnplot.syntax.inbuiltfunctions.*;


/* Preliminaries to set up and use the scanner.  */
parser code {:
		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LPAREN, RPAREN;

//special symbols i added
terminal RSQBRACKET,LSQBRACKET,COLON;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, ASSIGN;
terminal LET, IN, LBRACE, RBRACE, COMMA;
terminal SEMI;

// arithmetic operators i created
terminal EXPO,BIN_INTEGER,HEX_INTEGER;
terminal PAIR;
terminal CAR;
terminal IS_PAIR;

// terminals with values
terminal Integer INTEGER;
terminal Double DOUBLE;
terminal String VARIABLE;
terminal String STR; // for strings encased in "" e.g "smpl"
terminal Boolean BOOL_TRUE;
terminal Boolean BOOL_FALSE;

/* Non terminals */
non terminal ArithProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtDefinition definition;

non terminal StmtLet letExp;
non terminal ArrayList<Binding> bindings;
non terminal ArrayList<Binding> bindingsAux;
non terminal Binding binding;

non terminal Exp expression;
non terminal Exp arithExp;
non terminal Exp term;
non terminal Exp factor;
non terminal FnPlotValue<?> number;
non terminal empty;

/* non terminals I made */

non terminal Exp power;
non terminal PairFunction pair;
non terminal CarFunction car;
non terminal IsPairFunction isPair;

// non terminal StmtFun funExp;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new ArithProgram(s); :};

stmtList ::= stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

stmt ::= definition:d {: RESULT = d; :} |
	 expression:e SEMI {: RESULT = e; :} ;

isPair ::= IS_PAIR LPAREN expression:p RPAREN {:
		RESULT = new IsPairFunction(p);
:};

car ::= CAR LPAREN pair:p RPAREN {:
		// System.out.println("inside car");
		RESULT = new CarFunction(p);
:} |  CAR LPAREN VARIABLE:p RPAREN {:
		// System.out.println("inside car");
		ExpVar var = new ExpVar(p);
		RESULT = new CarFunction(var);
:}; 

pair ::= PAIR LPAREN expression:e1 COMMA expression:e2 RPAREN {:
		ArrayList<Exp> store = new ArrayList<>();
		store.add(e1);
		store.add(e2);
		RESULT = new PairFunction("pair",store);
:};

expression ::=  letExp:l {: RESULT = l; :} |
		LBRACE stmtList:body RBRACE {: RESULT = body; :} |
		arithExp:a {: RESULT = a; :}| pair:p {: RESULT = p; :} | car:c {: RESULT = c; :} | isPair:ip {: RESULT = ip; :};

letExp ::= LET bindings:bs IN expression:body {:
			RESULT = new StmtLet(bs, body);
           :} ;

binding ::= VARIABLE:v ASSIGN expression:e {:
		RESULT = new Binding(v, e);
	    :};

bindings ::= binding:b bindingsAux:bl {:
		bl.add(0,b);
		RESULT = bl;
	     :} |
		empty {: RESULT = new ArrayList(); :};

bindingsAux ::= COMMA binding:b bindingsAux:bl {:
		  bl.add(0,b);
		  RESULT = bl;
		:} |
		empty {: RESULT = new ArrayList(); :};

definition ::= VARIABLE:v ASSIGN expression:e SEMI {:
		   RESULT = new StmtDefinition(v, e);
		:};

arithExp ::= arithExp:e PLUS term:t {:
			RESULT = new ExpAdd(e, t); :} |
		arithExp:e MINUS term:t {:
			RESULT = new ExpSub(e, t); :} |
		term:t {: RESULT = t; :} ;

power ::= factor:f EXPO power: p {: RESULT= new ExpExpo(f,p); :} |
						factor:f {: RESULT=f; :};

term ::= power:f MUL term:t {:
		RESULT = new ExpMul(f, t); :} |
	 power:f DIV term:t {:
		RESULT = new ExpDiv(f, t); :} |
	 power:f MOD term:t {:
		RESULT = new ExpMod(f, t); :} |
		power:p {: RESULT= p; :};


number ::= INTEGER:ilit {: RESULT = FnPlotValue.make( ilit ); :} | DOUBLE:ilit {: RESULT = FnPlotValue.make(ilit); :};

factor ::= number:n {: RESULT = new ExpLit( n ); :} |
	   VARIABLE:var {: RESULT = new ExpVar(var); :} |
	   LPAREN expression:e RPAREN {: RESULT = e; :};

empty ::= ;
