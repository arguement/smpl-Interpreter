package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;
import fnplot.values.FnPlotReal;
import fnplot.syntax.inbuiltfunctions.*;


/* Preliminaries to set up and use the scanner.  */
parser code {:
		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    :};

init with {:
	  :};

scan with {:
		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  :};

/* Terminals (tokens returned by the scanner). */

// special symbols
terminal LPAREN, RPAREN;

//britt
terminal CONCAT;
// terminal string STRING;
non terminal Exp concat; 

/*terminal IF, THEN, ELSE;
non terminal StmtDefinition funDef; 
non terminal Exp condition;
*/
//special symbols i added
terminal RSQBRACKET,LSQBRACKET, COLON;

// arithmetic operators
terminal PLUS, MINUS, MUL, DIV, MOD, ASSIGN;
terminal LET, IN, LBRACE, RBRACE, COMMA;
terminal SEMI; 

//Relational Operators 
terminal GREATER;
terminal LESSER;
terminal GREATEREQUAL;
terminal LESSEREQUAL;
terminal NOTEQUAL; 
terminal EEQUAL;

// arithmetic operators i created
terminal EXPO;
// terminal BIN_INTEGER;
// terminal HEX_INTEGER;
terminal PAIR;
terminal CAR;
terminal CDR;
terminal IS_PAIR;
terminal LIST;
terminal NIL;
terminal IS_EQV;
terminal IS_EQUAL;
terminal SUBSTR;
//terminal DOTOPERATOR;// heap operator
terminal HEAP; //heap operator
terminal HEAPINSERT; //heap operator 
terminal HEAPDELETE;//heap operator
terminal GETMIN;//HEAP OPERATOR
terminal PROC;
terminal DOT;
terminal CALL;
terminal SIZE;
terminal IF;
terminal THEN;
terminal ELSE;
terminal CASE;
terminal PRINTLN;
terminal PRINT;
terminal AND;
terminal OR;
terminal NOT;
terminal DEF;
terminal BAND;
terminal BOR;
terminal BNOT;
terminal READ;
terminal READINT;
// terminal COMMENT;

// terminals with values
terminal Integer INTEGER;
terminal Double DOUBLE;
terminal String VARIABLE;
terminal String STR; // for strings encased in "" e.g "smpl"
terminal Boolean BOOL_TRUE;
terminal Boolean BOOL_FALSE;
terminal String BIN_INTEGER;
terminal String HEX_INTEGER;
terminal String MODIFIER;

/* Non terminals */
non terminal ArithProgram program;
non terminal StmtSequence stmtList;
non terminal Statement stmt;
non terminal StmtDefinition definition;

non terminal StmtLet letExp;
non terminal ArrayList<Binding> bindings;
non terminal ArrayList<Binding> bindingsAux;
non terminal Binding binding;

non terminal Exp expression;
non terminal Exp arithExp; 
non terminal Exp term;
non terminal Exp factor;
non terminal FnPlotValue<?> number;
non terminal empty;
non terminal ArrayList<Exp> expListE;
non terminal ArrayList<Exp> expList;
/* non terminals I made */

non terminal Exp power;
non terminal PairFunction pair;
non terminal CarFunction car;
non terminal CdrFunction cdr;
non terminal IsPairFunction isPair;
non terminal ListFunction list;
non terminal ListFunction list2;
non terminal ListFunction allLists;
non terminal Exp string;
non terminal IsEqv isEqv;
non terminal IsEqual isEqual;
non terminal SubstrFunction substr;
non terminal Boolean complits;
non terminal Exp comp; //dean  
non terminal Exp heap; 
non terminal Exp heapinsert ; 
non terminal Exp heapdelete ; 
non terminal Exp getmin;
non terminal ExpPara paramter; //dean 
non terminal ArrayList<ExpPara> paramListE;
non terminal ArrayList<ExpPara> paramList;
non terminal ExpFunction procDef;
non terminal ExpFunction procDefWithOverflow;
// non terminal ExpFunction procedures;
non terminal Exp procedures;
non terminal ExpFunction noLimitProc;
non terminal ExpFunCall funCall;
non terminal ArrayList<Exp> funCallExpListE;
non terminal ArrayList<Exp> funCallExpList;
non terminal CallFunction call;
non terminal Exp vecSpec;
non terminal VectorFunction vector;
non terminal ArrayList<Exp> vParamListE;
non terminal ArrayList<Exp> vParamList;
non terminal VectorIndex vecIndex;
non terminal SizeVectorFunction vecSize;
// non terminal IfStatement stmtIf;
non terminal Exp stmtIf;
non terminal Clause clause;
// non terminal CaseStatement case;
non terminal Exp case;
non terminal ArrayList<Clause> cParamListE;
non terminal ArrayList<Clause> cParamList;
non terminal StatementPrint print;
non terminal StatementPrintLn println;

non terminal Exp and; 
non terminal Exp or;
non terminal Exp not;

non terminal ArrayList<Exp> multParamListE;
non terminal ArrayList<Exp> multParamList;

non terminal ArrayList<Exp> nParamListE;
non terminal ArrayList<Exp> nParamList;

non terminal ArrayList<String> varParamListE;
non terminal ArrayList<String> varParamList;

non terminal ExpTuple tuple;
non terminal Exp bitWiseExp;
non terminal Exp bitOr;
non terminal Exp bitAnd;
non terminal Exp bitNot;

non terminal ExpRead read;
non terminal ExpReadInt readint;




// non terminal Exp toN;
// non terminal Exp exp_tup;



// non terminal StmtFun funExp;

/* Grammar rules */

program ::= stmtList:s {: RESULT = new ArithProgram(s); :};

stmtList ::= stmtList:lst stmt:s {:
		lst.add(s); 
		RESULT = lst;
		:} |
	     stmt:s {:
		RESULT = new StmtSequence(s);
		:};

stmt ::= definition:d {: RESULT = d; :} |
	 expression:e SEMI {: RESULT = e; :}  | print:p SEMI {: RESULT = p;:} | println:pn SEMI {: RESULT = pn;:}  |  vecIndex:vi  {: RESULT=vi; :} SEMI   ;

read ::= READ LPAREN RPAREN {: RESULT= new ExpRead(); :};

readint ::= READINT LPAREN RPAREN {: RESULT= new ExpReadInt(); :};

varParamListE ::=  varParamList: pl {: RESULT = pl;  :}  ;

varParamList ::=   varParamList:pl COMMA VARIABLE:v   {: pl.add(v); 
												RESULT = pl; :} | VARIABLE:v {: 
												ArrayList<String> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 :}  ;

nParamListE ::=  nParamList: pl {: RESULT = pl;  :}  ;

nParamList ::=   nParamList:pl COMMA expression:v   {: pl.add(v); 
												RESULT = pl; :} | expression:v {: 
												ArrayList<Exp> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 :}  ;
// toN ::= nParamListE:pl {: RESULT = new ExpToN(pl); :} ;

multParamListE ::=  multParamList: pl {: RESULT = pl;  :} | empty {: RESULT = new ArrayList(); :} ;

multParamList ::=    expression:v COMMA multParamList:pl {: pl.add(0,v); 
												RESULT = pl; :} | RSQBRACKET expression:v LSQBRACKET {: 
												ArrayList<Exp> ls = new ArrayList();
												ls.add(0,v);
												RESULT = ls;
												 :}  ;
tuple ::= LPAREN multParamListE:lst RPAREN {: RESULT= new ExpTuple( lst); :};

// exp_tup ::= multParamListE:t {: RESULT= new ExpTuple(t);; :} | expression:e {: RESULT=e; :};


print ::= PRINT LPAREN expression:e RPAREN {: RESULT = new StatementPrint(e); :};
println ::= PRINTLN LPAREN expression:e RPAREN {: RESULT = new StatementPrintLn(e); :};


cParamListE ::=  cParamList:pl {: RESULT = pl;  :} | empty {: RESULT = new ArrayList(); :} ;

cParamList ::=  cParamList:pl COMMA clause:v  {: pl.add(v); 
												RESULT = pl; :} | clause:v {: 
												ArrayList<Clause> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 :}  ;

case ::= CASE LBRACE RSQBRACKET cParamListE:cp LSQBRACKET RBRACE {: RESULT = new CaseStatement( cp );  :};


clause ::= expression:pred COLON expression:consq {: RESULT = new Clause(pred,consq); :} | ELSE COLON expression:consq {: RESULT = new Clause(new ExpLit(FnPlotValue.make( new Boolean("true") )),consq); :};

stmtIf ::= IF expression:pred THEN expression:consq RSQBRACKET ELSE expression:consq2 LSQBRACKET {:
	
	RESULT = new IfStatement(pred,consq,consq2);
:};


vecSize ::= SIZE LPAREN expression:v RPAREN {: RESULT = new SizeVectorFunction(v); :};
 
vecIndex ::= factor:v RSQBRACKET expression:e LSQBRACKET {: System.out.println("vector index"); RESULT = new VectorIndex(v,e); :};

vParamListE ::=  vParamList: pl {: RESULT = pl;  :} | empty {: RESULT = new ArrayList(); :} ;

vParamList ::=  vParamList:pl COMMA vecSpec:v  {: pl.add(v); 
												RESULT = pl; :} | vecSpec:v {: 
												ArrayList<Exp> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 :}  ;

vector ::= RSQBRACKET COLON RSQBRACKET vParamListE:v LSQBRACKET COLON LSQBRACKET {: RESULT = new VectorFunction(v);  :};

vecSpec ::= expression:e COLON expression:f {: RESULT = new ExpVecSpec(e,f); :} | expression:en {: RESULT = en; :}; 

call ::= CALL LPAREN expression:func COMMA expression:lst RPAREN {:
	RESULT = new CallFunction(func,lst);
:};

funCall ::= factor:v LPAREN funCallExpListE:el RPAREN {: RESULT= new ExpFunCall(v,el); :} ;

funCallExpListE ::= funCallExpList: pl {: RESULT = pl; :} | empty {: RESULT = new ArrayList(); :};

funCallExpList ::= funCallExpList:pl COMMA expression:v {: pl.add(v); 
											RESULT = pl; :} | expression:v {: ArrayList<Exp> ls = new ArrayList<>(); 
									ls.add(v) ;
									RESULT = ls;
									:};

procedures ::= procDef:pd {: RESULT = pd; :} | procDefWithOverflow:pdOverFlow {: RESULT = pdOverFlow; :} | noLimitProc:nlp {: RESULT=nlp; :};

noLimitProc ::= PROC VARIABLE:v expression:body {: RESULT= new ExpFunction(v,body); :};

procDefWithOverflow ::= PROC LPAREN paramListE:p DOT paramter:overflow RPAREN expression:body {:
	RESULT=new ExpFunction(p,body,overflow); 				
:};

procDef ::= PROC LPAREN RSQBRACKET paramListE:pl LSQBRACKET RPAREN expression:body {: 

// System.out.println("procDeof");
RESULT=new ExpFunction(pl,body); 
:};

paramListE ::=  paramList: pl {: RESULT = pl;  :} | empty {: RESULT = new ArrayList(); :} ;

paramList ::=  paramList:pl COMMA paramter:v  {: pl.add(v); 
												RESULT = pl; :} | paramter:v {: 
												ArrayList<ExpPara> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 :}  ;

paramter ::= MODIFIER:m VARIABLE:v {: 

			RESULT = new ExpPara(m,v); 

			:} | VARIABLE:v {: RESULT = new ExpPara("default",v); :};

substr ::= SUBSTR LPAREN expression:str COMMA expression:start COMMA expression:end RPAREN {:
	RESULT = new SubstrFunction(str,start,end);
:};

//britt
concat ::= allLists:l1 CONCAT allLists:l2 {: RESULT = new ExpConcat(l1, l2); :};

isEqual ::= IS_EQUAL LPAREN expression:e1 COMMA expression:e2 RPAREN {: 
							RESULT = new IsEqual(e1,e2);
 :};

isEqv ::= IS_EQV LPAREN expression:e1 COMMA expression:e2 RPAREN {: 
							RESULT = new IsEqv(e1,e2);
 :};

allLists ::= list:lst {: RESULT = lst; :} | list2:lst2 {: RESULT=lst2; :};

list2 ::= RSQBRACKET expListE:lst LSQBRACKET{:
                //System.out.println("inhere");
				RESULT = new ListFunction(lst);
:};

list ::= LIST LPAREN list2:lst RPAREN {:
			RESULT = lst;
:};

expListE ::= expList: pl {: RESULT = pl; :} | empty {: RESULT = new ArrayList(); :};

expList ::=  expression:v COMMA expList:pl {: 
											
											pl.add(0,v); 
											RESULT = pl; :} | NIL:n {: 
									RESULT = new ArrayList<>();
									:};

isPair ::= IS_PAIR LPAREN expression:p RPAREN {:
		RESULT = new IsPairFunction(p);
:};

car ::= CAR LPAREN pair:p RPAREN {:
		// System.out.println("inside car");
		RESULT = new CarFunction(p);
:} |  CAR LPAREN VARIABLE:p RPAREN {:
		// System.out.println("inside car");
		ExpVar var = new ExpVar(p);
		RESULT = new CarFunction(var);
:}; 

cdr ::= CDR LPAREN pair:p RPAREN {:
		RESULT = new CdrFunction(p);
:} |  CDR LPAREN VARIABLE:p RPAREN {:
		ExpVar var = new ExpVar(p);
		RESULT = new CdrFunction(var);
:}; 



pair ::= PAIR LPAREN expression:e1 COMMA expression:e2 RPAREN {:
		ArrayList<Exp> store = new ArrayList<>();
		store.add(e1);
		store.add(e2);
		RESULT = new PairFunction("pair",store);
:};

expression ::=  letExp:l {: RESULT = l; :} |
		LBRACE stmtList:body RBRACE {: RESULT = body; :}  | procedures:prd {: RESULT=prd; :}  | pair:p {: RESULT = p; :} | car:c {: RESULT = c; :} | cdr:c {: RESULT = c; :} | isPair:ip {: RESULT = ip; :} 
		|allLists:lst {: RESULT = lst; :} | vecSize:vs {:  RESULT = vs;:}  | isEqv:eqv {: RESULT = eqv; :} | isEqual:isEq {: RESULT = isEq; :} | substr:subs {: RESULT=subs; :} | heap:h {: RESULT=h; :} | heapinsert:hi {: RESULT=hi; :}|heapdelete:hd {: RESULT=hd ; :} | getmin:gm {: RESULT=gm ;:} | call:c {: RESULT = c; :}
		  | concat:c {: RESULT= c; :} | or:o {: RESULT = o; :} | read:r {: RESULT=r; :} | readint:ri {: RESULT=ri; :} | stmtIf:si {: RESULT = si; :} |case:c {: RESULT=c; :} ;

letExp ::= LET LPAREN bindings:bs RPAREN expression:body {:
			RESULT = new StmtLet(bs, body);
           :} ;

binding ::= VARIABLE:v ASSIGN expression:e {:
		RESULT = new Binding(v, e);
	    :};

bindings ::= binding:b bindingsAux:bl {:
		bl.add(0,b);
		RESULT = bl;
	     :} |
		empty {: RESULT = new ArrayList(); :};

bindingsAux ::= COMMA binding:b bindingsAux:bl {:
		  bl.add(0,b);
		  RESULT = bl;
		:} |
		empty {: RESULT = new ArrayList(); :};

// definition ::= VARIABLE:v ASSIGN expression:e SEMI {:
// 		   RESULT = new StmtDefinition(v, e);
// 		:} ;

// definition ::= DEF VARIABLE:v expression:e SEMI {:
// 		   RESULT = new StmtDefinition(v, e);
// 		:}  | VARIABLE:v  COLON ASSIGN expression:e SEMI {: RESULT = new StatementAssign(v,e); :};

definition ::= DEF VARIABLE:v expression:e SEMI {:
		   RESULT = new StmtDefinition(v, e);
		:}  | varParamListE:v  COLON ASSIGN nParamListE:e SEMI {: RESULT = new ExpToN(v,e); :};



arithExp ::= arithExp:e PLUS term:t {:
			RESULT = new ExpAdd(e, t); :} |
		arithExp:e MINUS term:t {:
			RESULT = new ExpSub(e, t); :} |
		term:t {: RESULT = t; :} ;


or ::= or:loe OR and:lae {: RESULT = new ExpOr(loe,lae); :}|
                and:lae {: RESULT = lae ; :};

and ::= and:lae AND not:lne {: RESULT = new ExpAnd(lae,lne); :}|
                not:lne {: RESULT = lne; :};

not ::= NOT not:lne {: RESULT = new ExpNot(lne); :}|
                comp:re {: RESULT = re; :};

comp ::= comp:re EEQUAL bitWiseExp:be {: RESULT = new ExpComp(re, be); :}|
              comp:re GREATER bitWiseExp:be {: RESULT = new ExpGreater(re, be); :}|
               comp:re LESSER bitWiseExp:be {: RESULT = new ExpLesser(re, be); :}|
             comp:re GREATEREQUAL bitWiseExp:be {: RESULT = new ExpGreaterEqual(re, be); :}|
             comp:re  LESSEREQUAL bitWiseExp:be {: RESULT = new ExpLesserEqual(re, be); :}|
             comp:re NOTEQUAL bitWiseExp:be {: RESULT = new  ExpNotEqual(re, be); :}|
             bitWiseExp:re {: RESULT = re; :};

// bitWiseExp ::= bitWiseExp:be BAND arithExp:ae {: RESULT = new ExpBitwiseAnd(be, ae); :}|
//                 bitWiseExp:be BOR arithExp:ae {: RESULT = new ExpBitwiseOr(be, ae); :}|
//                 arithExp:ae {: RESULT = ae; :};
bitWiseExp ::= bitOr:b {: RESULT=b; :};

bitOr ::= bitOr:loe BOR bitAnd:lae {: RESULT = new ExpBitwiseOr(loe,lae); :}|
                bitAnd:lae {: RESULT = lae ; :};

bitAnd ::= bitAnd:lae BAND bitNot:lne {: RESULT = new ExpBitwiseAnd(lae,lne); :}|
                bitNot:lne {: RESULT = lne; :};

bitNot ::= BNOT bitNot:lne {: RESULT = new ExpBitwiseNot(lne); :}|
                arithExp:ae {: RESULT = ae; :};


power ::= factor:f EXPO power:p {: RESULT= new ExpExpo(f,p); :} | 
						factor:f {: RESULT=f; :} ;

heap ::= HEAP expression:e {: 
 RESULT= new ExpHeap(e);
:};  

heapinsert ::=  HEAPINSERT LPAREN expression:e1 COMMA term:p RPAREN{: 
//System.out.println("in here");
RESULT = new ExpHeapInsert(e1,p);
:}; 

heapdelete ::=  HEAPDELETE LPAREN expression:e1 RPAREN {: 
RESULT= new ExpHeapDelete(e1);
:}; 
getmin ::=  GETMIN LPAREN expression:e1 RPAREN  {:
  RESULT= new ExpGetMin(e1);
:};


term ::= power:f MUL term:t {:
		RESULT = new ExpMul(f, t); :} |
	 power:f DIV term:t {:
		RESULT = new ExpDiv(f, t); :} |
	 power:f MOD term:t {:
		RESULT = new ExpMod(f, t); :} |
		power:p {: RESULT= p; :}  ;

// string ::= STR:s {: RESULT= new ExpLit( FnPlotValue.make(s) ); :};

complits ::= BOOL_FALSE:f {: RESULT= new Boolean("false"); :} | BOOL_TRUE:t {: RESULT= new Boolean("true"); :} ;

number ::= INTEGER:ilit {: RESULT = FnPlotValue.make( ilit ); :} | DOUBLE:ilit {: RESULT = FnPlotValue.make(ilit); :} | BIN_INTEGER:ilit {: 
Integer val = Integer.parseInt(ilit, 2);

RESULT = FnPlotValue.make(val);
 :} | HEX_INTEGER:ilit {: 
Integer val = Integer.parseInt(ilit, 16);
RESULT = FnPlotValue.make(val);
 :} |complits: ilit {: RESULT = FnPlotValue.make(ilit); :} | STR:s {: RESULT= FnPlotValue.make(s); :};

factor ::= number:n {: RESULT = new ExpLit( n ); :} |
	   VARIABLE:var {: RESULT = new ExpVar(var); :} |
	   LPAREN expression:e RPAREN {: RESULT = e; :} | funCall: fc{: RESULT = fc; :} | LBRACE expression:e RBRACE {: RESULT = e; :} | tuple:t {: RESULT=t; :}  | vector:vc {: RESULT = vc; :};



empty ::= ;
