
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;
import fnplot.values.FnPlotReal;
import fnplot.syntax.inbuiltfunctions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FnPlotParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public FnPlotParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public FnPlotParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\003\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\067\006\000\002\065\003\000\002\065\003\000\002" +
    "\066\005\000\002\066\003\000\002\064\010\000\002\063" +
    "\005\000\002\062\012\000\002\061\006\000\002\056\003" +
    "\000\002\056\003\000\002\057\005\000\002\057\003\000" +
    "\002\055\011\000\002\054\005\000\002\054\003\000\002" +
    "\053\010\000\002\050\006\000\002\051\003\000\002\051" +
    "\003\000\002\052\005\000\002\052\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\047\005\000" +
    "\002\045\011\000\002\044\011\000\002\042\003\000\002" +
    "\042\003\000\002\043\005\000\002\043\003\000\002\041" +
    "\004\000\002\041\003\000\002\036\012\000\002\002\005" +
    "\000\002\035\010\000\002\034\010\000\002\032\003\000" +
    "\002\032\003\000\002\031\005\000\002\030\006\000\002" +
    "\021\003\000\002\021\003\000\002\022\005\000\002\022" +
    "\003\000\002\027\006\000\002\025\006\000\002\025\006" +
    "\000\002\026\006\000\002\026\006\000\002\024\010\000" +
    "\002\013\003\000\002\013\005\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\007\006\000\002\012" +
    "\005\000\002\010\004\000\002\010\003\000\002\011\005" +
    "\000\002\011\003\000\002\006\006\000\002\014\005\000" +
    "\002\014\005\000\002\014\003\000\002\023\005\000\002" +
    "\023\003\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\033\003\000\002\037\003\000\002" +
    "\037\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\005\000\002\016\005\000" +
    "\002\016\003\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\066\004\020\007\067\020\064\022\055\035" +
    "\046\036\015\037\021\040\050\041\062\043\047\044\037" +
    "\045\063\046\072\050\031\051\043\052\036\055\014\057" +
    "\076\060\016\061\017\062\056\063\012\064\024\065\051" +
    "\066\065\067\073\001\002\000\004\002\363\001\002\000" +
    "\072\002\ufffb\004\ufffb\007\ufffb\020\ufffb\022\ufffb\023\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\050\ufffb\051\ufffb\052\ufffb\055\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\067\ufffb\001\002\000\024\005\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\021\uffb6\023\uffb6\024\uffb6\025\uffb6\053" +
    "\uffb6\001\002\000\024\005\uffb5\007\uffb5\010\uffb5\011\uffb5" +
    "\021\uffb5\023\uffb5\024\uffb5\025\uffb5\053\uffb5\001\002\000" +
    "\056\004\uff90\005\uff90\007\uff90\010\uff90\011\uff90\012\uff90" +
    "\013\uff90\014\uff90\015\uff90\016\uff90\021\uff90\023\uff90\024" +
    "\uff90\025\uff90\026\uff90\027\uff90\030\uff90\031\uff90\032\uff90" +
    "\033\uff90\034\uff90\053\uff90\001\002\000\070\002\001\004" +
    "\020\007\067\020\064\022\055\035\046\036\015\037\021" +
    "\040\050\041\062\043\047\044\037\045\063\046\072\050" +
    "\031\051\043\052\036\055\014\057\076\060\016\061\017" +
    "\062\056\063\012\064\024\065\051\066\065\067\073\001" +
    "\002\000\024\005\uff9c\007\uff9c\010\uff9c\011\uff9c\021\uff9c" +
    "\023\uff9c\024\uff9c\025\uff9c\053\uff9c\001\002\000\072\002" +
    "\ufffd\004\ufffd\007\ufffd\020\ufffd\022\ufffd\023\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\041\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\050\ufffd\051\ufffd\052\ufffd\055\ufffd\057\ufffd" +
    "\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066" +
    "\ufffd\067\ufffd\001\002\000\004\022\346\001\002\000\004" +
    "\004\341\001\002\000\056\004\uff99\005\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99" +
    "\021\uff99\023\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030" +
    "\uff99\031\uff99\032\uff99\033\uff99\034\uff99\053\uff99\001\002" +
    "\000\056\004\uff98\005\uff98\007\uff98\010\uff98\011\uff98\012" +
    "\uff98\013\uff98\014\uff98\015\uff98\016\uff98\021\uff98\023\uff98" +
    "\024\uff98\025\uff98\026\uff98\027\uff98\030\uff98\031\uff98\032" +
    "\uff98\033\uff98\034\uff98\053\uff98\001\002\000\060\004\020" +
    "\007\067\020\064\022\055\035\046\036\015\037\021\040" +
    "\050\041\062\043\047\044\037\045\063\046\072\050\031" +
    "\051\043\060\016\061\017\062\117\063\012\064\024\065" +
    "\051\066\065\067\073\001\002\000\004\004\332\001\002" +
    "\000\024\005\uffb7\007\uffb7\010\uffb7\011\uffb7\021\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\053\uffb7\001\002\000\024\005\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\021\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\053\uffc0\001\002\000\056\004\uff9a\005\uff9a\007\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\021\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027\uff9a" +
    "\030\uff9a\031\uff9a\032\uff9a\033\uff9a\034\uff9a\053\uff9a\001" +
    "\002\000\024\005\uffc1\007\uffc1\010\uffc1\011\uffc1\021\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\053\uffc1\001\002\000\024\005" +
    "\uffbf\007\uffbf\010\uffbf\011\uffbf\021\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\053\uffbf\001\002\000\024\005\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\021\uffe1\023\uffe1\024\uffe1\025\uffe1\053\uffe1" +
    "\001\002\000\024\005\uffb9\007\uffb9\010\uffb9\011\uffb9\021" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\053\uffb9\001\002\000\004" +
    "\004\325\001\002\000\024\005\uffba\007\uffba\010\uffba\011" +
    "\uffba\021\uffba\023\uffba\024\uffba\025\uffba\053\uffba\001\002" +
    "\000\024\005\uffc4\007\uffc4\010\uffc4\011\uffc4\021\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\053\uffc4\001\002\000\024\005\uffb4" +
    "\007\uffb4\010\uffb4\011\uffb4\021\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\053\uffb4\001\002\000\026\005\uffd2\006\uffd2\007\uffd2" +
    "\010\uffd2\011\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\053" +
    "\uffd2\001\002\000\060\004\020\007\067\020\064\022\055" +
    "\035\046\036\015\037\021\040\050\041\062\043\047\044" +
    "\037\045\063\046\072\050\031\051\043\060\016\061\017" +
    "\062\117\063\012\064\024\065\051\066\065\067\073\001" +
    "\002\000\004\004\311\001\002\000\024\005\uffe2\007\uffe2" +
    "\010\uffe2\011\uffe2\021\uffe2\023\uffe2\024\uffe2\025\uffe2\053" +
    "\uffe2\001\002\000\004\025\260\001\002\000\026\005\uffbb" +
    "\006\307\007\uffbb\010\uffbb\011\uffbb\021\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\053\uffbb\001\002\000\004\004\304\001\002" +
    "\000\024\005\uffb3\007\uffb3\010\uffb3\011\uffb3\021\uffb3\023" +
    "\uffb3\024\uffb3\025\uffb3\053\uffb3\001\002\000\030\005\uffa9" +
    "\007\uffa9\010\uffa9\011\uffa9\012\uffa9\013\uffa9\021\uffa9\023" +
    "\uffa9\024\uffa9\025\uffa9\053\uffa9\001\002\000\004\004\277" +
    "\001\002\000\004\004\272\001\002\000\004\004\267\001" +
    "\002\000\056\004\uff9b\005\uff9b\007\uff9b\010\uff9b\011\uff9b" +
    "\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\021\uff9b\023" +
    "\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\053\uff9b\001\002\000\024\005" +
    "\uffbe\007\uffbe\010\uffbe\011\uffbe\021\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\053\uffbe\001\002\000\030\005\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\012\263\013\264\021\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\053\uffc2\001\002\000\024\005\uffbd\007\uffbd\010" +
    "\uffbd\011\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd\053\uffbd" +
    "\001\002\000\066\004\020\007\067\020\064\022\055\035" +
    "\046\036\015\037\021\040\050\041\062\043\047\044\037" +
    "\045\063\046\072\050\031\051\043\052\036\055\014\057" +
    "\076\060\016\061\017\062\056\063\012\064\024\065\051" +
    "\066\065\067\073\001\002\000\042\004\uff93\012\uff93\013" +
    "\uff93\014\uff93\015\uff93\016\uff93\017\253\023\uff93\025\uff93" +
    "\026\uff93\027\uff93\030\uff93\031\uff93\032\uff93\033\uff93\034" +
    "\uff93\001\002\000\056\004\uff95\005\uff95\007\uff95\010\uff95" +
    "\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\021" +
    "\uff95\023\uff95\024\uff95\025\uff95\026\uff95\027\uff95\030\uff95" +
    "\031\uff95\032\uff95\033\uff95\034\uff95\053\uff95\001\002\000" +
    "\024\005\uffb8\007\uffb8\010\uffb8\011\uffb8\021\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\053\uffb8\001\002\000\024\005\uffe0\007" +
    "\uffe0\010\uffe0\011\uffe0\021\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\053\uffe0\001\002\000\004\004\247\001\002\000\004\004" +
    "\240\001\002\000\006\021\uff8f\062\225\001\002\000\056" +
    "\004\uff97\005\uff97\007\uff97\010\uff97\011\uff97\012\uff97\013" +
    "\uff97\014\uff97\015\uff97\016\uff97\021\uff97\023\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033" +
    "\uff97\034\uff97\053\uff97\001\002\000\072\002\ufffa\004\ufffa" +
    "\007\ufffa\020\ufffa\022\ufffa\023\ufffa\035\ufffa\036\ufffa\037" +
    "\ufffa\040\ufffa\041\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\055\ufffa\057\ufffa\060\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067\ufffa" +
    "\001\002\000\066\004\020\007\067\010\uff8f\011\123\020" +
    "\064\022\055\035\046\036\015\037\021\040\050\041\062" +
    "\042\214\043\047\044\037\045\063\046\072\050\031\051" +
    "\043\060\016\061\017\062\117\063\012\064\024\065\051" +
    "\066\065\067\073\001\002\000\026\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\053\uffd1\001\002\000\024\005\uffbc\007\uffbc\010\uffbc\011" +
    "\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\053\uffbc\001\002" +
    "\000\006\004\166\062\167\001\002\000\056\004\uff96\005" +
    "\uff96\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96" +
    "\015\uff96\016\uff96\021\uff96\023\uff96\024\uff96\025\uff96\026" +
    "\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96\034\uff96" +
    "\053\uff96\001\002\000\072\002\ufff9\004\ufff9\007\ufff9\020" +
    "\ufff9\022\ufff9\023\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9" +
    "\041\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\055\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9" +
    "\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\001\002\000" +
    "\056\004\156\005\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\021\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7" +
    "\033\uffa7\034\121\053\uffa7\001\002\000\004\022\153\001" +
    "\002\000\052\005\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d" +
    "\013\uff9d\014\112\015\110\016\104\021\uff9d\023\uff9d\024" +
    "\uff9d\025\uff9d\026\105\027\103\030\111\031\107\032\102" +
    "\033\106\053\uff9d\001\002\000\072\002\ufffe\004\ufffe\007" +
    "\ufffe\020\ufffe\022\ufffe\023\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\040\ufffe\041\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\055\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\001" +
    "\002\000\056\004\uff94\005\uff94\007\uff94\010\uff94\011\uff94" +
    "\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\021\uff94\023" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94" +
    "\032\uff94\033\uff94\034\uff94\053\uff94\001\002\000\060\004" +
    "\020\007\067\020\064\022\055\035\046\036\015\037\021" +
    "\040\050\041\062\043\047\044\037\045\063\046\072\050" +
    "\031\051\043\060\016\061\017\062\117\063\012\064\024" +
    "\065\051\066\065\067\073\001\002\000\060\004\020\007" +
    "\067\020\064\022\055\035\046\036\015\037\021\040\050" +
    "\041\062\043\047\044\037\045\063\046\072\050\031\051" +
    "\043\060\016\061\017\062\117\063\012\064\024\065\051" +
    "\066\065\067\073\001\002\000\026\004\020\007\116\022" +
    "\114\060\016\061\017\062\117\064\024\065\051\066\065" +
    "\067\073\001\002\000\060\004\020\007\067\020\064\022" +
    "\055\035\046\036\015\037\021\040\050\041\062\043\047" +
    "\044\037\045\063\046\072\050\031\051\043\060\016\061" +
    "\017\062\117\063\012\064\024\065\051\066\065\067\073" +
    "\001\002\000\060\004\020\007\067\020\064\022\055\035" +
    "\046\036\015\037\021\040\050\041\062\043\047\044\037" +
    "\045\063\046\072\050\031\051\043\060\016\061\017\062" +
    "\117\063\012\064\024\065\051\066\065\067\073\001\002" +
    "\000\060\004\020\007\067\020\064\022\055\035\046\036" +
    "\015\037\021\040\050\041\062\043\047\044\037\045\063" +
    "\046\072\050\031\051\043\060\016\061\017\062\117\063" +
    "\012\064\024\065\051\066\065\067\073\001\002\000\026" +
    "\004\020\007\116\022\114\060\016\061\017\062\117\064" +
    "\024\065\051\066\065\067\073\001\002\000\060\004\020" +
    "\007\067\020\064\022\055\035\046\036\015\037\021\040" +
    "\050\041\062\043\047\044\037\045\063\046\072\050\031" +
    "\051\043\060\016\061\017\062\117\063\012\064\024\065" +
    "\051\066\065\067\073\001\002\000\026\004\020\007\116" +
    "\022\114\060\016\061\017\062\117\064\024\065\051\066" +
    "\065\067\073\001\002\000\036\005\uff9d\007\uff9d\010\uff9d" +
    "\011\uff9d\012\uff9d\013\uff9d\014\112\015\110\016\104\021" +
    "\uff9d\023\uff9d\024\uff9d\025\uff9d\053\uff9d\001\002\000\060" +
    "\004\020\007\067\020\064\022\055\035\046\036\015\037" +
    "\021\040\050\041\062\043\047\044\037\045\063\046\072" +
    "\050\031\051\043\060\016\061\017\062\117\063\012\064" +
    "\024\065\051\066\065\067\073\001\002\000\030\005\uffa0" +
    "\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0\021\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\053\uffa0\001\002\000\004\011\123" +
    "\001\002\000\056\004\uff93\005\uff93\007\uff93\010\uff93\011" +
    "\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\021\uff93" +
    "\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93\031" +
    "\uff93\032\uff93\033\uff93\034\uff93\053\uff93\001\002\000\054" +
    "\005\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\021\uffa7\023\uffa7\024\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\121\053\uffa7\001\002\000\026\004\020\007\116\022\114" +
    "\060\016\061\017\062\117\064\024\065\051\066\065\067" +
    "\073\001\002\000\052\005\uffa8\007\uffa8\010\uffa8\011\uffa8" +
    "\012\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\021\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\032\uffa8\033\uffa8\053\uffa8\001\002\000\004\007\124\001" +
    "\002\000\062\004\020\007\067\010\uff8f\020\064\022\055" +
    "\035\046\036\015\037\021\040\050\041\062\043\047\044" +
    "\037\045\063\046\072\050\031\051\043\060\016\061\017" +
    "\062\117\063\012\064\024\065\051\066\065\067\073\001" +
    "\002\000\004\010\uffee\001\002\000\004\010\136\001\002" +
    "\000\006\010\uffec\024\uffec\001\002\000\010\010\uffe9\011" +
    "\134\024\uffe9\001\002\000\006\010\uffef\024\132\001\002" +
    "\000\060\004\020\007\067\020\064\022\055\035\046\036" +
    "\015\037\021\040\050\041\062\043\047\044\037\045\063" +
    "\046\072\050\031\051\043\060\016\061\017\062\117\063" +
    "\012\064\024\065\051\066\065\067\073\001\002\000\006" +
    "\010\uffed\024\uffed\001\002\000\060\004\020\007\067\020" +
    "\064\022\055\035\046\036\015\037\021\040\050\041\062" +
    "\043\047\044\037\045\063\046\072\050\031\051\043\060" +
    "\016\061\017\062\117\063\012\064\024\065\051\066\065" +
    "\067\073\001\002\000\006\010\uffea\024\uffea\001\002\000" +
    "\004\011\137\001\002\000\004\010\140\001\002\000\056" +
    "\004\uffeb\005\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\013" +
    "\uffeb\014\uffeb\015\uffeb\016\uffeb\021\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032\uffeb\033" +
    "\uffeb\034\uffeb\053\uffeb\001\002\000\004\023\142\001\002" +
    "\000\056\004\uff91\005\uff91\007\uff91\010\uff91\011\uff91\012" +
    "\uff91\013\uff91\014\uff91\015\uff91\016\uff91\021\uff91\023\uff91" +
    "\024\uff91\025\uff91\026\uff91\027\uff91\030\uff91\031\uff91\032" +
    "\uff91\033\uff91\034\uff91\053\uff91\001\002\000\024\005\uffa3" +
    "\007\uffa3\010\uffa3\011\uffa3\021\uffa3\023\uffa3\024\uffa3\025" +
    "\uffa3\053\uffa3\001\002\000\030\005\uff9f\007\uff9f\010\uff9f" +
    "\011\uff9f\012\uff9f\013\uff9f\021\uff9f\023\uff9f\024\uff9f\025" +
    "\uff9f\053\uff9f\001\002\000\024\005\uffa2\007\uffa2\010\uffa2" +
    "\011\uffa2\021\uffa2\023\uffa2\024\uffa2\025\uffa2\053\uffa2\001" +
    "\002\000\024\005\uffa6\007\uffa6\010\uffa6\011\uffa6\021\uffa6" +
    "\023\uffa6\024\uffa6\025\uffa6\053\uffa6\001\002\000\024\005" +
    "\uffa5\007\uffa5\010\uffa5\011\uffa5\021\uffa5\023\uffa5\024\uffa5" +
    "\025\uffa5\053\uffa5\001\002\000\030\005\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\012\uff9e\013\uff9e\021\uff9e\023\uff9e\024\uff9e" +
    "\025\uff9e\053\uff9e\001\002\000\024\005\uffa4\007\uffa4\010" +
    "\uffa4\011\uffa4\021\uffa4\023\uffa4\024\uffa4\025\uffa4\053\uffa4" +
    "\001\002\000\024\005\uffa1\007\uffa1\010\uffa1\011\uffa1\021" +
    "\uffa1\023\uffa1\024\uffa1\025\uffa1\053\uffa1\001\002\000\060" +
    "\004\020\007\067\020\064\022\055\035\046\036\015\037" +
    "\021\040\050\041\062\043\047\044\037\045\063\046\072" +
    "\050\031\051\043\060\016\061\017\062\117\063\012\064" +
    "\024\065\051\066\065\067\073\001\002\000\004\023\155" +
    "\001\002\000\072\002\ufff8\004\ufff8\007\ufff8\020\ufff8\022" +
    "\ufff8\023\ufff8\035\ufff8\036\ufff8\037\ufff8\040\ufff8\041\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\055\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\066\ufff8\067\ufff8\001\002\000\062\004" +
    "\020\005\uff8f\007\067\020\064\022\055\035\046\036\015" +
    "\037\021\040\050\041\062\043\047\044\037\045\063\046" +
    "\072\050\031\051\043\060\016\061\017\062\117\063\012" +
    "\064\024\065\051\066\065\067\073\001\002\000\004\005" +
    "\uffe5\001\002\000\006\005\uffe6\024\164\001\002\000\006" +
    "\005\uffe3\024\uffe3\001\002\000\004\005\163\001\002\000" +
    "\024\005\uffe7\007\uffe7\010\uffe7\011\uffe7\021\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\053\uffe7\001\002\000\060\004\020\007" +
    "\067\020\064\022\055\035\046\036\015\037\021\040\050" +
    "\041\062\043\047\044\037\045\063\046\072\050\031\051" +
    "\043\060\016\061\017\062\117\063\012\064\024\065\051" +
    "\066\065\067\073\001\002\000\006\005\uffe4\024\uffe4\001" +
    "\002\000\012\007\173\047\uff8f\062\177\070\175\001\002" +
    "\000\060\004\020\007\067\020\064\022\055\035\046\036" +
    "\015\037\021\040\050\041\062\043\047\044\037\045\063" +
    "\046\072\050\031\051\043\060\016\061\017\062\117\063" +
    "\012\064\024\065\051\066\065\067\073\001\002\000\024" +
    "\005\uffdf\007\uffdf\010\uffdf\011\uffdf\021\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\053\uffdf\001\002\000\010\010\uffdc\024\211" +
    "\047\uffdc\001\002\000\004\047\205\001\002\000\010\010" +
    "\uff8f\062\177\070\175\001\002\000\006\010\uffdb\047\uffdb" +
    "\001\002\000\004\062\200\001\002\000\010\010\uffd9\024" +
    "\uffd9\047\uffd9\001\002\000\012\005\uffd7\010\uffd7\024\uffd7" +
    "\047\uffd7\001\002\000\012\005\uffd8\010\uffd8\024\uffd8\047" +
    "\uffd8\001\002\000\004\010\202\001\002\000\004\005\203" +
    "\001\002\000\060\004\020\007\067\020\064\022\055\035" +
    "\046\036\015\037\021\040\050\041\062\043\047\044\037" +
    "\045\063\046\072\050\031\051\043\060\016\061\017\062" +
    "\117\063\012\064\024\065\051\066\065\067\073\001\002" +
    "\000\024\005\uffdd\007\uffdd\010\uffdd\011\uffdd\021\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\053\uffdd\001\002\000\006\062\177" +
    "\070\175\001\002\000\004\005\207\001\002\000\060\004" +
    "\020\007\067\020\064\022\055\035\046\036\015\037\021" +
    "\040\050\041\062\043\047\044\037\045\063\046\072\050" +
    "\031\051\043\060\016\061\017\062\117\063\012\064\024" +
    "\065\051\066\065\067\073\001\002\000\024\005\uffde\007" +
    "\uffde\010\uffde\011\uffde\021\uffde\023\uffde\024\uffde\025\uffde" +
    "\053\uffde\001\002\000\006\062\177\070\175\001\002\000" +
    "\010\010\uffda\024\uffda\047\uffda\001\002\000\004\010\uffcd" +
    "\001\002\000\004\010\uffcb\001\002\000\004\010\222\001" +
    "\002\000\004\024\220\001\002\000\004\010\uffce\001\002" +
    "\000\062\004\020\007\067\020\064\022\055\035\046\036" +
    "\015\037\021\040\050\041\062\042\214\043\047\044\037" +
    "\045\063\046\072\050\031\051\043\060\016\061\017\062" +
    "\117\063\012\064\024\065\051\066\065\067\073\001\002" +
    "\000\004\010\uffcc\001\002\000\026\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0" +
    "\053\uffd0\001\002\000\004\021\uffaf\001\002\000\006\021" +
    "\uff8f\024\233\001\002\000\004\017\231\001\002\000\004" +
    "\021\227\001\002\000\060\004\020\007\067\020\064\022" +
    "\055\035\046\036\015\037\021\040\050\041\062\043\047" +
    "\044\037\045\063\046\072\050\031\051\043\060\016\061" +
    "\017\062\117\063\012\064\024\065\051\066\065\067\073" +
    "\001\002\000\024\005\uffb2\007\uffb2\010\uffb2\011\uffb2\021" +
    "\uffb2\023\uffb2\024\uffb2\025\uffb2\053\uffb2\001\002\000\060" +
    "\004\020\007\067\020\064\022\055\035\046\036\015\037" +
    "\021\040\050\041\062\043\047\044\037\045\063\046\072" +
    "\050\031\051\043\060\016\061\017\062\117\063\012\064" +
    "\024\065\051\066\065\067\073\001\002\000\006\021\uffb1" +
    "\024\uffb1\001\002\000\004\062\225\001\002\000\004\021" +
    "\uffad\001\002\000\004\021\uffb0\001\002\000\006\021\uff8f" +
    "\024\233\001\002\000\004\021\uffae\001\002\000\060\004" +
    "\020\007\067\020\064\022\055\035\046\036\015\037\021" +
    "\040\050\041\062\043\047\044\037\045\063\046\072\050" +
    "\031\051\043\060\016\061\017\062\117\063\012\064\024" +
    "\065\051\066\065\067\073\001\002\000\004\024\242\001" +
    "\002\000\060\004\020\007\067\020\064\022\055\035\046" +
    "\036\015\037\021\040\050\041\062\043\047\044\037\045" +
    "\063\046\072\050\031\051\043\060\016\061\017\062\117" +
    "\063\012\064\024\065\051\066\065\067\073\001\002\000" +
    "\004\024\244\001\002\000\060\004\020\007\067\020\064" +
    "\022\055\035\046\036\015\037\021\040\050\041\062\043" +
    "\047\044\037\045\063\046\072\050\031\051\043\060\016" +
    "\061\017\062\117\063\012\064\024\065\051\066\065\067" +
    "\073\001\002\000\004\005\246\001\002\000\024\005\uffd6" +
    "\007\uffd6\010\uffd6\011\uffd6\021\uffd6\023\uffd6\024\uffd6\025" +
    "\uffd6\053\uffd6\001\002\000\004\007\250\001\002\000\064" +
    "\004\020\007\067\010\uff8f\020\064\022\055\035\046\036" +
    "\015\037\021\040\050\041\062\042\214\043\047\044\037" +
    "\045\063\046\072\050\031\051\043\060\016\061\017\062" +
    "\117\063\012\064\024\065\051\066\065\067\073\001\002" +
    "\000\004\005\252\001\002\000\026\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\053\uffcf\001\002\000\060\004\020\007\067\020\064\022" +
    "\055\035\046\036\015\037\021\040\050\041\062\043\047" +
    "\044\037\045\063\046\072\050\031\051\043\060\016\061" +
    "\017\062\117\063\012\064\024\065\051\066\065\067\073" +
    "\001\002\000\004\025\255\001\002\000\072\002\uffac\004" +
    "\uffac\007\uffac\020\uffac\022\uffac\023\uffac\035\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\043\uffac\044\uffac\045\uffac\046" +
    "\uffac\050\uffac\051\uffac\052\uffac\055\uffac\057\uffac\060\uffac" +
    "\061\uffac\062\uffac\063\uffac\064\uffac\065\uffac\066\uffac\067" +
    "\uffac\001\002\000\070\004\020\007\067\020\064\022\055" +
    "\023\261\035\046\036\015\037\021\040\050\041\062\043" +
    "\047\044\037\045\063\046\072\050\031\051\043\052\036" +
    "\055\014\057\076\060\016\061\017\062\056\063\012\064" +
    "\024\065\051\066\065\067\073\001\002\000\006\023\142" +
    "\025\260\001\002\000\072\002\ufffc\004\ufffc\007\ufffc\020" +
    "\ufffc\022\ufffc\023\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\041\ufffc\043\ufffc\044\ufffc\045\ufffc\046\ufffc\050\ufffc\051" +
    "\ufffc\052\ufffc\055\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc" +
    "\063\ufffc\064\ufffc\065\ufffc\066\ufffc\067\ufffc\001\002\000" +
    "\024\005\uffc3\007\uffc3\010\uffc3\011\uffc3\021\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\053\uffc3\001\002\000\072\002\uffff\004" +
    "\uffff\007\uffff\020\uffff\022\uffff\023\uffff\035\uffff\036\uffff" +
    "\037\uffff\040\uffff\041\uffff\043\uffff\044\uffff\045\uffff\046" +
    "\uffff\050\uffff\051\uffff\052\uffff\055\uffff\057\uffff\060\uffff" +
    "\061\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067" +
    "\uffff\001\002\000\026\004\020\007\116\022\114\060\016" +
    "\061\017\062\117\064\024\065\051\066\065\067\073\001" +
    "\002\000\026\004\020\007\116\022\114\060\016\061\017" +
    "\062\117\064\024\065\051\066\065\067\073\001\002\000" +
    "\030\005\uffaa\007\uffaa\010\uffaa\011\uffaa\012\uffaa\013\uffaa" +
    "\021\uffaa\023\uffaa\024\uffaa\025\uffaa\053\uffaa\001\002\000" +
    "\030\005\uffab\007\uffab\010\uffab\011\uffab\012\uffab\013\uffab" +
    "\021\uffab\023\uffab\024\uffab\025\uffab\053\uffab\001\002\000" +
    "\060\004\020\007\067\020\064\022\055\035\046\036\015" +
    "\037\021\040\050\041\062\043\047\044\037\045\063\046" +
    "\072\050\031\051\043\060\016\061\017\062\117\063\012" +
    "\064\024\065\051\066\065\067\073\001\002\000\004\005" +
    "\271\001\002\000\024\005\uffca\007\uffca\010\uffca\011\uffca" +
    "\021\uffca\023\uffca\024\uffca\025\uffca\053\uffca\001\002\000" +
    "\060\004\020\007\067\020\064\022\055\035\046\036\015" +
    "\037\021\040\050\041\062\043\047\044\037\045\063\046" +
    "\072\050\031\051\043\060\016\061\017\062\117\063\012" +
    "\064\024\065\051\066\065\067\073\001\002\000\004\024" +
    "\274\001\002\000\060\004\020\007\067\020\064\022\055" +
    "\035\046\036\015\037\021\040\050\041\062\043\047\044" +
    "\037\045\063\046\072\050\031\051\043\060\016\061\017" +
    "\062\117\063\012\064\024\065\051\066\065\067\073\001" +
    "\002\000\004\005\276\001\002\000\024\005\uffd3\007\uffd3" +
    "\010\uffd3\011\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\053" +
    "\uffd3\001\002\000\060\004\020\007\067\020\064\022\055" +
    "\035\046\036\015\037\021\040\050\041\062\043\047\044" +
    "\037\045\063\046\072\050\031\051\043\060\016\061\017" +
    "\062\117\063\012\064\024\065\051\066\065\067\073\001" +
    "\002\000\004\024\301\001\002\000\060\004\020\007\067" +
    "\020\064\022\055\035\046\036\015\037\021\040\050\041" +
    "\062\043\047\044\037\045\063\046\072\050\031\051\043" +
    "\060\016\061\017\062\117\063\012\064\024\065\051\066" +
    "\065\067\073\001\002\000\004\005\303\001\002\000\024" +
    "\005\uffc5\007\uffc5\010\uffc5\011\uffc5\021\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\053\uffc5\001\002\000\060\004\020\007\067" +
    "\020\064\022\055\035\046\036\015\037\021\040\050\041" +
    "\062\043\047\044\037\045\063\046\072\050\031\051\043" +
    "\060\016\061\017\062\117\063\012\064\024\065\051\066" +
    "\065\067\073\001\002\000\004\005\306\001\002\000\024" +
    "\005\ufff0\007\ufff0\010\ufff0\011\ufff0\021\ufff0\023\ufff0\024" +
    "\ufff0\025\ufff0\053\ufff0\001\002\000\006\007\250\041\062" +
    "\001\002\000\024\005\uffd5\007\uffd5\010\uffd5\011\uffd5\021" +
    "\uffd5\023\uffd5\024\uffd5\025\uffd5\053\uffd5\001\002\000\060" +
    "\004\020\007\067\020\064\022\055\035\046\036\015\037" +
    "\021\040\050\041\062\043\047\044\037\045\063\046\072" +
    "\050\031\051\043\060\016\061\017\062\117\063\012\064" +
    "\024\065\051\066\065\067\073\001\002\000\004\024\313" +
    "\001\002\000\060\004\020\007\067\020\064\022\055\035" +
    "\046\036\015\037\021\040\050\041\062\043\047\044\037" +
    "\045\063\046\072\050\031\051\043\060\016\061\017\062" +
    "\117\063\012\064\024\065\051\066\065\067\073\001\002" +
    "\000\004\005\315\001\002\000\024\005\uffd4\007\uffd4\010" +
    "\uffd4\011\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\053\uffd4" +
    "\001\002\000\004\053\317\001\002\000\060\004\020\007" +
    "\067\020\064\022\055\035\046\036\015\037\021\040\050" +
    "\041\062\043\047\044\037\045\063\046\072\050\031\051" +
    "\043\060\016\061\017\062\117\063\012\064\024\065\051" +
    "\066\065\067\073\001\002\000\004\007\321\001\002\000" +
    "\004\054\322\001\002\000\060\004\020\007\067\020\064" +
    "\022\055\035\046\036\015\037\021\040\050\041\062\043" +
    "\047\044\037\045\063\046\072\050\031\051\043\060\016" +
    "\061\017\062\117\063\012\064\024\065\051\066\065\067" +
    "\073\001\002\000\004\010\324\001\002\000\072\002\ufff1" +
    "\004\ufff1\007\ufff1\020\ufff1\022\ufff1\023\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\050\ufff1\051\ufff1\052\ufff1\055\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\062\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1" +
    "\067\ufff1\001\002\000\060\004\020\007\067\020\064\022" +
    "\055\035\046\036\015\037\021\040\050\041\062\043\047" +
    "\044\037\045\063\046\072\050\031\051\043\060\016\061" +
    "\017\062\117\063\012\064\024\065\051\066\065\067\073" +
    "\001\002\000\004\024\327\001\002\000\060\004\020\007" +
    "\067\020\064\022\055\035\046\036\015\037\021\040\050" +
    "\041\062\043\047\044\037\045\063\046\072\050\031\051" +
    "\043\060\016\061\017\062\117\063\012\064\024\065\051" +
    "\066\065\067\073\001\002\000\004\005\331\001\002\000" +
    "\024\005\uffe8\007\uffe8\010\uffe8\011\uffe8\021\uffe8\023\uffe8" +
    "\024\uffe8\025\uffe8\053\uffe8\001\002\000\006\035\046\062" +
    "\334\001\002\000\004\005\336\001\002\000\004\005\335" +
    "\001\002\000\024\005\uffc6\007\uffc6\010\uffc6\011\uffc6\021" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\053\uffc6\001\002\000\024" +
    "\005\uffc7\007\uffc7\010\uffc7\011\uffc7\021\uffc7\023\uffc7\024" +
    "\uffc7\025\uffc7\053\uffc7\001\002\000\004\005\340\001\002" +
    "\000\056\004\uff92\005\uff92\007\uff92\010\uff92\011\uff92\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\021\uff92\023\uff92" +
    "\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031\uff92\032" +
    "\uff92\033\uff92\034\uff92\053\uff92\001\002\000\006\035\046" +
    "\062\343\001\002\000\004\005\345\001\002\000\004\005" +
    "\344\001\002\000\024\005\uffc8\007\uffc8\010\uffc8\011\uffc8" +
    "\021\uffc8\023\uffc8\024\uffc8\025\uffc8\053\uffc8\001\002\000" +
    "\024\005\uffc9\007\uffc9\010\uffc9\011\uffc9\021\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\053\uffc9\001\002\000\004\007\347\001" +
    "\002\000\062\004\020\007\067\010\uff8f\020\064\022\055" +
    "\035\046\036\015\037\021\040\050\041\062\043\047\044" +
    "\037\045\063\046\072\050\031\051\043\060\016\061\017" +
    "\062\117\063\012\064\024\065\051\066\065\067\073\001" +
    "\002\000\004\010\ufff6\001\002\000\004\010\361\001\002" +
    "\000\006\010\ufff7\024\357\001\002\000\006\010\ufff4\024" +
    "\ufff4\001\002\000\004\011\355\001\002\000\060\004\020" +
    "\007\067\020\064\022\055\035\046\036\015\037\021\040" +
    "\050\041\062\043\047\044\037\045\063\046\072\050\031" +
    "\051\043\060\016\061\017\062\117\063\012\064\024\065" +
    "\051\066\065\067\073\001\002\000\006\010\ufff2\024\ufff2" +
    "\001\002\000\060\004\020\007\067\020\064\022\055\035" +
    "\046\036\015\037\021\040\050\041\062\043\047\044\037" +
    "\045\063\046\072\050\031\051\043\060\016\061\017\062" +
    "\117\063\012\064\024\065\051\066\065\067\073\001\002" +
    "\000\006\010\ufff5\024\ufff5\001\002\000\004\023\362\001" +
    "\002\000\072\002\ufff3\004\ufff3\007\ufff3\020\ufff3\022\ufff3" +
    "\023\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3\052\ufff3" +
    "\055\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3\064" +
    "\ufff3\065\ufff3\066\ufff3\067\ufff3\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\361\000\112\002\043\003\003\004\010\005\077\006" +
    "\012\007\032\013\040\014\052\015\044\016\074\017\100" +
    "\023\076\024\025\025\051\026\053\027\070\030\034\031" +
    "\067\032\041\033\024\034\027\035\057\036\021\037\056" +
    "\040\006\044\037\045\026\046\022\047\060\050\033\053" +
    "\005\055\007\061\031\062\004\064\065\067\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\106\002\043\005\261" +
    "\006\012\007\032\013\040\014\052\015\044\016\074\017" +
    "\100\023\076\024\025\025\051\026\053\027\070\030\034" +
    "\031\067\032\041\033\024\034\027\035\057\036\021\037" +
    "\056\040\006\044\037\045\026\046\022\047\060\050\033" +
    "\053\005\055\007\061\031\062\004\064\065\067\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\002\043\007\032\013\336\014\052\015\044\016\074" +
    "\017\100\023\076\024\025\025\051\026\053\027\070\030" +
    "\034\031\067\032\041\033\024\034\027\035\057\036\021" +
    "\037\056\040\006\044\037\045\026\046\022\047\060\050" +
    "\033\053\005\055\007\061\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\002\043" +
    "\007\032\013\315\014\052\015\044\016\074\017\100\023" +
    "\076\024\025\025\051\026\053\027\070\030\034\031\067" +
    "\032\041\033\024\034\027\035\057\036\021\037\056\040" +
    "\006\044\037\045\026\046\022\047\060\050\033\053\005" +
    "\055\007\061\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\110\002" +
    "\043\004\255\005\077\006\012\007\032\013\256\014\052" +
    "\015\044\016\074\017\100\023\076\024\025\025\051\026" +
    "\053\027\070\030\034\031\067\032\041\033\024\034\027" +
    "\035\057\036\021\037\056\040\006\044\037\045\026\046" +
    "\022\047\060\050\033\053\005\055\007\061\031\062\004" +
    "\064\065\067\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\225\012\223\020\222\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\002\043" +
    "\007\032\013\215\014\052\015\044\016\074\017\100\020" +
    "\212\021\214\022\216\023\076\024\025\025\051\026\053" +
    "\027\070\030\034\031\067\032\041\033\024\034\027\035" +
    "\057\036\021\037\056\040\006\044\037\045\026\046\022" +
    "\047\060\050\033\053\005\055\007\061\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\002\043\007\032\013\151\014\052\015\044\016" +
    "\074\017\100\023\076\024\025\025\051\026\053\027\070" +
    "\030\034\031\067\032\041\033\024\034\027\035\057\036" +
    "\021\037\056\040\006\044\037\045\026\046\022\047\060" +
    "\050\033\053\005\055\007\061\031\001\001\000\074\002" +
    "\043\007\032\013\150\014\052\015\044\016\074\017\100" +
    "\023\076\024\025\025\051\026\053\027\070\030\034\031" +
    "\067\032\041\033\024\034\027\035\057\036\021\037\056" +
    "\040\006\044\037\045\026\046\022\047\060\050\033\053" +
    "\005\055\007\061\031\001\001\000\016\015\147\016\117" +
    "\017\100\023\112\037\056\055\007\001\001\000\074\002" +
    "\043\007\032\013\146\014\052\015\044\016\074\017\100" +
    "\023\076\024\025\025\051\026\053\027\070\030\034\031" +
    "\067\032\041\033\024\034\027\035\057\036\021\037\056" +
    "\040\006\044\037\045\026\046\022\047\060\050\033\053" +
    "\005\055\007\061\031\001\001\000\074\002\043\007\032" +
    "\013\145\014\052\015\044\016\074\017\100\023\076\024" +
    "\025\025\051\026\053\027\070\030\034\031\067\032\041" +
    "\033\024\034\027\035\057\036\021\037\056\040\006\044" +
    "\037\045\026\046\022\047\060\050\033\053\005\055\007" +
    "\061\031\001\001\000\074\002\043\007\032\013\144\014" +
    "\052\015\044\016\074\017\100\023\076\024\025\025\051" +
    "\026\053\027\070\030\034\031\067\032\041\033\024\034" +
    "\027\035\057\036\021\037\056\040\006\044\037\045\026" +
    "\046\022\047\060\050\033\053\005\055\007\061\031\001" +
    "\001\000\016\015\143\016\117\017\100\023\112\037\056" +
    "\055\007\001\001\000\074\002\043\007\032\013\142\014" +
    "\052\015\044\016\074\017\100\023\076\024\025\025\051" +
    "\026\053\027\070\030\034\031\067\032\041\033\024\034" +
    "\027\035\057\036\021\037\056\040\006\044\037\045\026" +
    "\046\022\047\060\050\033\053\005\055\007\061\031\001" +
    "\001\000\016\015\114\016\117\017\100\023\112\037\056" +
    "\055\007\001\001\000\002\001\001\000\074\002\043\007" +
    "\032\013\140\014\052\015\044\016\074\017\100\023\076" +
    "\024\025\025\051\026\053\027\070\030\034\031\067\032" +
    "\041\033\024\034\027\035\057\036\021\037\056\040\006" +
    "\044\037\045\026\046\022\047\060\050\033\053\005\055" +
    "\007\061\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\016\117\017" +
    "\100\023\121\037\056\055\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\002\043\007\032\013\127\014" +
    "\052\015\044\016\074\017\100\020\124\023\076\024\025" +
    "\025\051\026\053\027\070\030\034\031\067\032\041\033" +
    "\024\034\027\035\057\036\021\037\056\040\006\044\037" +
    "\045\026\046\022\047\060\050\033\053\005\054\126\055" +
    "\007\056\125\057\130\061\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\076\002\043\007\032\013\127\014\052" +
    "\015\044\016\074\017\100\023\076\024\025\025\051\026" +
    "\053\027\070\030\034\031\067\032\041\033\024\034\027" +
    "\035\057\036\021\037\056\040\006\044\037\045\026\046" +
    "\022\047\060\050\033\053\005\054\132\055\007\061\031" +
    "\001\001\000\002\001\001\000\074\002\043\007\032\013" +
    "\134\014\052\015\044\016\074\017\100\023\076\024\025" +
    "\025\051\026\053\027\070\030\034\031\067\032\041\033" +
    "\024\034\027\035\057\036\021\037\056\040\006\044\037" +
    "\045\026\046\022\047\060\050\033\053\005\055\007\061" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\002\043\007\032" +
    "\013\153\014\052\015\044\016\074\017\100\023\076\024" +
    "\025\025\051\026\053\027\070\030\034\031\067\032\041" +
    "\033\024\034\027\035\057\036\021\037\056\040\006\044" +
    "\037\045\026\046\022\047\060\050\033\053\005\055\007" +
    "\061\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\102\002\043\007\032\013\160\014\052\015\044\016\074" +
    "\017\100\020\156\023\076\024\025\025\051\026\053\027" +
    "\070\030\034\031\067\032\041\033\024\034\027\035\057" +
    "\036\021\037\056\040\006\044\037\045\026\046\022\047" +
    "\060\050\033\051\161\052\157\053\005\055\007\061\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\002\043" +
    "\007\032\013\164\014\052\015\044\016\074\017\100\023" +
    "\076\024\025\025\051\026\053\027\070\030\034\031\067" +
    "\032\041\033\024\034\027\035\057\036\021\037\056\040" +
    "\006\044\037\045\026\046\022\047\060\050\033\053\005" +
    "\055\007\061\031\001\001\000\002\001\001\000\012\020" +
    "\173\041\175\042\171\043\170\001\001\000\074\002\043" +
    "\007\032\013\167\014\052\015\044\016\074\017\100\023" +
    "\076\024\025\025\051\026\053\027\070\030\034\031\067" +
    "\032\041\033\024\034\027\035\057\036\021\037\056\040" +
    "\006\044\037\045\026\046\022\047\060\050\033\053\005" +
    "\055\007\061\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\173\041\175\042\200" +
    "\043\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\002\043\007\032\013" +
    "\203\014\052\015\044\016\074\017\100\023\076\024\025" +
    "\025\051\026\053\027\070\030\034\031\067\032\041\033" +
    "\024\034\027\035\057\036\021\037\056\040\006\044\037" +
    "\045\026\046\022\047\060\050\033\053\005\055\007\061" +
    "\031\001\001\000\002\001\001\000\004\041\205\001\001" +
    "\000\002\001\001\000\074\002\043\007\032\013\207\014" +
    "\052\015\044\016\074\017\100\023\076\024\025\025\051" +
    "\026\053\027\070\030\034\031\067\032\041\033\024\034" +
    "\027\035\057\036\021\037\056\040\006\044\037\045\026" +
    "\046\022\047\060\050\033\053\005\055\007\061\031\001" +
    "\001\000\002\001\001\000\004\041\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\076\002\043" +
    "\007\032\013\215\014\052\015\044\016\074\017\100\022" +
    "\220\023\076\024\025\025\051\026\053\027\070\030\034" +
    "\031\067\032\041\033\024\034\027\035\057\036\021\037" +
    "\056\040\006\044\037\045\026\046\022\047\060\050\033" +
    "\053\005\055\007\061\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\234\020\233" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\002" +
    "\043\007\032\013\227\014\052\015\044\016\074\017\100" +
    "\023\076\024\025\025\051\026\053\027\070\030\034\031" +
    "\067\032\041\033\024\034\027\035\057\036\021\037\056" +
    "\040\006\044\037\045\026\046\022\047\060\050\033\053" +
    "\005\055\007\061\031\001\001\000\002\001\001\000\074" +
    "\002\043\007\032\013\231\014\052\015\044\016\074\017" +
    "\100\023\076\024\025\025\051\026\053\027\070\030\034" +
    "\031\067\032\041\033\024\034\027\035\057\036\021\037" +
    "\056\040\006\044\037\045\026\046\022\047\060\050\033" +
    "\053\005\055\007\061\031\001\001\000\002\001\001\000" +
    "\004\012\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\236\020\233\001\001\000\002\001\001\000" +
    "\074\002\043\007\032\013\240\014\052\015\044\016\074" +
    "\017\100\023\076\024\025\025\051\026\053\027\070\030" +
    "\034\031\067\032\041\033\024\034\027\035\057\036\021" +
    "\037\056\040\006\044\037\045\026\046\022\047\060\050" +
    "\033\053\005\055\007\061\031\001\001\000\002\001\001" +
    "\000\074\002\043\007\032\013\242\014\052\015\044\016" +
    "\074\017\100\023\076\024\025\025\051\026\053\027\070" +
    "\030\034\031\067\032\041\033\024\034\027\035\057\036" +
    "\021\037\056\040\006\044\037\045\026\046\022\047\060" +
    "\050\033\053\005\055\007\061\031\001\001\000\002\001" +
    "\001\000\074\002\043\007\032\013\244\014\052\015\044" +
    "\016\074\017\100\023\076\024\025\025\051\026\053\027" +
    "\070\030\034\031\067\032\041\033\024\034\027\035\057" +
    "\036\021\037\056\040\006\044\037\045\026\046\022\047" +
    "\060\050\033\053\005\055\007\061\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\031\250\001\001\000" +
    "\102\002\043\007\032\013\215\014\052\015\044\016\074" +
    "\017\100\020\212\021\214\022\216\023\076\024\025\025" +
    "\051\026\053\027\070\030\034\031\067\032\041\033\024" +
    "\034\027\035\057\036\021\037\056\040\006\044\037\045" +
    "\026\046\022\047\060\050\033\053\005\055\007\061\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\002" +
    "\043\007\032\013\253\014\052\015\044\016\074\017\100" +
    "\023\076\024\025\025\051\026\053\027\070\030\034\031" +
    "\067\032\041\033\024\034\027\035\057\036\021\037\056" +
    "\040\006\044\037\045\026\046\022\047\060\050\033\053" +
    "\005\055\007\061\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\106\002\043\005\261\006\012\007\032\013" +
    "\040\014\052\015\044\016\074\017\100\023\076\024\025" +
    "\025\051\026\053\027\070\030\034\031\067\032\041\033" +
    "\024\034\027\035\057\036\021\037\056\040\006\044\037" +
    "\045\026\046\022\047\060\050\033\053\005\055\007\061" +
    "\031\062\004\064\065\067\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\015\265\016\117\017\100\023\112\037\056\055\007" +
    "\001\001\000\016\015\264\016\117\017\100\023\112\037" +
    "\056\055\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\002\043\007\032\013\267\014\052\015\044\016" +
    "\074\017\100\023\076\024\025\025\051\026\053\027\070" +
    "\030\034\031\067\032\041\033\024\034\027\035\057\036" +
    "\021\037\056\040\006\044\037\045\026\046\022\047\060" +
    "\050\033\053\005\055\007\061\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\074\002\043\007\032\013\272" +
    "\014\052\015\044\016\074\017\100\023\076\024\025\025" +
    "\051\026\053\027\070\030\034\031\067\032\041\033\024" +
    "\034\027\035\057\036\021\037\056\040\006\044\037\045" +
    "\026\046\022\047\060\050\033\053\005\055\007\061\031" +
    "\001\001\000\002\001\001\000\074\002\043\007\032\013" +
    "\274\014\052\015\044\016\074\017\100\023\076\024\025" +
    "\025\051\026\053\027\070\030\034\031\067\032\041\033" +
    "\024\034\027\035\057\036\021\037\056\040\006\044\037" +
    "\045\026\046\022\047\060\050\033\053\005\055\007\061" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\002\043\007\032\013\277\014\052\015\044\016\074\017" +
    "\100\023\076\024\025\025\051\026\053\027\070\030\034" +
    "\031\067\032\041\033\024\034\027\035\057\036\021\037" +
    "\056\040\006\044\037\045\026\046\022\047\060\050\033" +
    "\053\005\055\007\061\031\001\001\000\002\001\001\000" +
    "\074\002\043\007\032\013\301\014\052\015\044\016\074" +
    "\017\100\023\076\024\025\025\051\026\053\027\070\030" +
    "\034\031\067\032\041\033\024\034\027\035\057\036\021" +
    "\037\056\040\006\044\037\045\026\046\022\047\060\050" +
    "\033\053\005\055\007\061\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\002\043\007\032\013\304\014" +
    "\052\015\044\016\074\017\100\023\076\024\025\025\051" +
    "\026\053\027\070\030\034\031\067\032\041\033\024\034" +
    "\027\035\057\036\021\037\056\040\006\044\037\045\026" +
    "\046\022\047\060\050\033\053\005\055\007\061\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\030\034" +
    "\031\067\032\307\001\001\000\002\001\001\000\074\002" +
    "\043\007\032\013\311\014\052\015\044\016\074\017\100" +
    "\023\076\024\025\025\051\026\053\027\070\030\034\031" +
    "\067\032\041\033\024\034\027\035\057\036\021\037\056" +
    "\040\006\044\037\045\026\046\022\047\060\050\033\053" +
    "\005\055\007\061\031\001\001\000\002\001\001\000\074" +
    "\002\043\007\032\013\313\014\052\015\044\016\074\017" +
    "\100\023\076\024\025\025\051\026\053\027\070\030\034" +
    "\031\067\032\041\033\024\034\027\035\057\036\021\037" +
    "\056\040\006\044\037\045\026\046\022\047\060\050\033" +
    "\053\005\055\007\061\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\074\002\043\007\032" +
    "\013\317\014\052\015\044\016\074\017\100\023\076\024" +
    "\025\025\051\026\053\027\070\030\034\031\067\032\041" +
    "\033\024\034\027\035\057\036\021\037\056\040\006\044" +
    "\037\045\026\046\022\047\060\050\033\053\005\055\007" +
    "\061\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\002\043\007\032\013\322\014\052\015\044\016\074" +
    "\017\100\023\076\024\025\025\051\026\053\027\070\030" +
    "\034\031\067\032\041\033\024\034\027\035\057\036\021" +
    "\037\056\040\006\044\037\045\026\046\022\047\060\050" +
    "\033\053\005\055\007\061\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\002\043\007\032\013\325\014" +
    "\052\015\044\016\074\017\100\023\076\024\025\025\051" +
    "\026\053\027\070\030\034\031\067\032\041\033\024\034" +
    "\027\035\057\036\021\037\056\040\006\044\037\045\026" +
    "\046\022\047\060\050\033\053\005\055\007\061\031\001" +
    "\001\000\002\001\001\000\074\002\043\007\032\013\327" +
    "\014\052\015\044\016\074\017\100\023\076\024\025\025" +
    "\051\026\053\027\070\030\034\031\067\032\041\033\024" +
    "\034\027\035\057\036\021\037\056\040\006\044\037\045" +
    "\026\046\022\047\060\050\033\053\005\055\007\061\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\024" +
    "\332\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\341\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\002\043\007\032\013\353\014\052\015\044" +
    "\016\074\017\100\020\347\023\076\024\025\025\051\026" +
    "\053\027\070\030\034\031\067\032\041\033\024\034\027" +
    "\035\057\036\021\037\056\040\006\044\037\045\026\046" +
    "\022\047\060\050\033\053\005\055\007\061\031\063\352" +
    "\065\350\066\351\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\002\043\007\032\013\355\014\052\015\044\016" +
    "\074\017\100\023\076\024\025\025\051\026\053\027\070" +
    "\030\034\031\067\032\041\033\024\034\027\035\057\036" +
    "\021\037\056\040\006\044\037\045\026\046\022\047\060" +
    "\050\033\053\005\055\007\061\031\001\001\000\002\001" +
    "\001\000\076\002\043\007\032\013\353\014\052\015\044" +
    "\016\074\017\100\023\076\024\025\025\051\026\053\027" +
    "\070\030\034\031\067\032\041\033\024\034\027\035\057" +
    "\036\021\037\056\040\006\044\037\045\026\046\022\047" +
    "\060\050\033\053\005\055\007\061\031\063\357\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FnPlotParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FnPlotParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FnPlotParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  
    }


		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FnPlotParser$actions {
  private final FnPlotParser parser;

  /** Constructor */
  CUP$FnPlotParser$actions(FnPlotParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action_part00000000(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FnPlotParser$result;

      /* select the action based on the action number */
      switch (CUP$FnPlotParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		RESULT = start_val;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FnPlotParser$parser.done_parsing();
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= stmtIf 
            {
              Statement RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IfStatement si = (IfStatement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = si; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= case 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CaseStatement c = (CaseStatement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= print 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StatementPrint p = (StatementPrint)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // print ::= PRINT LBRACE expression RBRACE 
            {
              StatementPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new StatementPrint(e); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("print",53, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cParamListE ::= cParamList 
            {
              ArrayList<Clause> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Clause> pl = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamListE",51, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cParamListE ::= empty 
            {
              ArrayList<Clause> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamListE",51, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cParamList ::= cParamList COMMA clause 
            {
              ArrayList<Clause> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Clause> pl = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Clause v = (Clause)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamList",52, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cParamList ::= clause 
            {
              ArrayList<Clause> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Clause v = (Clause)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<Clause> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamList",52, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // case ::= CASE LBRACE RSQBRACKET cParamListE LSQBRACKET RBRACE 
            {
              CaseStatement RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Clause> cp = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		 RESULT = new CaseStatement( cp );  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("case",50, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // clause ::= expression COLON expression 
            {
              Clause RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp consq = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new Clause(pred,consq); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("clause",49, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmtIf ::= IF expression THEN expression RSQBRACKET ELSE expression LSQBRACKET 
            {
              IfStatement RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp consq = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int consq2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int consq2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp consq2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	
	RESULT = new IfStatement(pred,consq,consq2);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtIf",48, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vecSize ::= SIZE LPAREN expression RPAREN 
            {
              SizeVectorFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new SizeVectorFunction(v); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSize",47, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vParamListE ::= vParamList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamListE",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vParamListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamListE",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vParamList ::= vParamList COMMA vecSpec 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamList",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vParamList ::= vecSpec 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<Exp> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamList",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vector ::= RSQBRACKET COLON RSQBRACKET vParamListE LSQBRACKET COLON LSQBRACKET 
            {
              VectorFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<Exp> v = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		 RESULT = new VectorFunction(v);  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vector",43, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vecSpec ::= expression COLON expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVecSpec(e,f); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSpec",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vecSpec ::= expression 
            {
              Exp RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp en = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = en; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSpec",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              CallFunction RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp func = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp lst = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	RESULT = new CallFunction(func,lst);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("call",41, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funCall ::= factor LPAREN funCallExpListE RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT= new ExpFunCall(v,el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funCallExpListE ::= funCallExpList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpListE",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funCallExpListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpListE",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funCallExpList ::= funCallExpList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
											RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpList",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funCallExpList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList<Exp> ls = new ArrayList<>(); 
									ls.add(v) ;
									RESULT = ls;
									
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpList",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedures ::= procDef 
            {
              Exp RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction pd = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pd; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedures ::= procDefWithOverflow 
            {
              Exp RESULT =null;
		int pdOverFlowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pdOverFlowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction pdOverFlow = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pdOverFlow; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedures ::= noLimitProc 
            {
              Exp RESULT =null;
		int nlpleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nlpright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction nlp = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=nlp; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // noLimitProc ::= PROC VARIABLE expression 
            {
              ExpFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpFunction(v,body); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("noLimitProc",37, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procDefWithOverflow ::= PROC LPAREN paramListE DOT paramter RPAREN expression 
            {
              ExpFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		ArrayList<ExpPara> p = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int overflowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int overflowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ExpPara overflow = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
	RESULT=new ExpFunction(p,body,overflow); 				

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procDefWithOverflow",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procDef ::= PROC LPAREN RSQBRACKET paramListE LSQBRACKET RPAREN expression 
            {
              ExpFunction RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 

System.out.println("procDeof");
RESULT=new ExpFunction(pl,body); 

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procDef",34, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // paramListE ::= paramList 
            {
              ArrayList<ExpPara> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramListE ::= empty 
            {
              ArrayList<ExpPara> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramList ::= paramList COMMA paramter 
            {
              ArrayList<ExpPara> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpPara v = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramList",33, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramList ::= paramter 
            {
              ArrayList<ExpPara> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpPara v = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<ExpPara> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramList",33, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramter ::= MODIFIER VARIABLE 
            {
              ExpPara RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 

			RESULT = new ExpPara(m,v); 

			
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramter",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramter ::= VARIABLE 
            {
              ExpPara RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpPara("default",v); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramter",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // substr ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              SubstrFunction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp str = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp end = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	RESULT = new SubstrFunction(str,start,end);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("substr",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // concat ::= allLists CONCAT allLists 
            {
              Exp RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ListFunction l1 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction l2 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpConcat(l1, l2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // isEqual ::= IS_EQUAL LPAREN expression COMMA expression RPAREN 
            {
              IsEqual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
							RESULT = new IsEqual(e1,e2);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isEqual",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // isEqv ::= IS_EQV LPAREN expression COMMA expression RPAREN 
            {
              IsEqv RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
							RESULT = new IsEqv(e1,e2);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isEqv",26, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // allLists ::= list 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("allLists",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // allLists ::= list2 
            {
              ListFunction RESULT =null;
		int lst2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lst2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst2 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=lst2; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("allLists",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list2 ::= RSQBRACKET expListE LSQBRACKET 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
				RESULT = new ListFunction(lst);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list2",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list ::= LIST LPAREN list2 RPAREN 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
			RESULT = lst;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",22, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expListE ::= expList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expList ::= expression COMMA expList 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
											
											pl.add(0,v); 
											RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expList",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expList ::= NIL 
            {
              ArrayList<Exp> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
									RESULT = new ArrayList<>();
									
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expList",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // isPair ::= IS_PAIR LPAREN expression RPAREN 
            {
              IsPairFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		RESULT = new IsPairFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isPair",21, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // car ::= CAR LPAREN pair RPAREN 
            {
              CarFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		// System.out.println("inside car");
		RESULT = new CarFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("car",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // car ::= CAR LPAREN VARIABLE RPAREN 
            {
              CarFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		// System.out.println("inside car");
		ExpVar var = new ExpVar(p);
		RESULT = new CarFunction(var);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("car",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cdr ::= CDR LPAREN pair RPAREN 
            {
              CdrFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		RESULT = new CdrFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cdr",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cdr ::= CDR LPAREN VARIABLE RPAREN 
            {
              CdrFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		ExpVar var = new ExpVar(p);
		RESULT = new CdrFunction(var);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cdr",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              PairFunction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		ArrayList<Exp> store = new ArrayList<>();
		store.add(e1);
		store.add(e2);
		RESULT = new PairFunction("pair",store);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = a; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= string 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= procedures 
            {
              Exp RESULT =null;
		int prdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int prdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp prd = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=prd; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CarFunction c = (CarFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CdrFunction c = (CdrFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= isPair 
            {
              Exp RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsPairFunction ip = (IsPairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = ip; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= allLists 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= vecSize 
            {
              Exp RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		SizeVectorFunction vs = (SizeVectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		  RESULT = vs;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= isEqv 
            {
              Exp RESULT =null;
		int eqvleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eqvright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsEqv eqv = (IsEqv)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = eqv; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= isEqual 
            {
              Exp RESULT =null;
		int isEqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int isEqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsEqual isEq = (IsEqual)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = isEq; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= substr 
            {
              Exp RESULT =null;
		int subsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int subsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		SubstrFunction subs = (SubstrFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=subs; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CallFunction c = (CallFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= comp 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= n; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= concat 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // letExp ::= LET bindings IN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
           
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("letExp",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binding",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // power ::= factor EXPO power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpExpo(f,p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=f; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comp ::= power EEQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
              System.out.println("in here");
              RESULT=new ExpComp(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comp ::= power GREATER expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		      RESULT= new ExpGreater(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comp ::= power LESSER expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
		      RESULT= new ExpLesser(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comp ::= power GREATEREQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  RESULT= new ExpGreaterEqual(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comp ::= power LESSEREQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
		  RESULT= new ExpLesserEqual(e1,e2);
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comp ::= power NOTEQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  RESULT= new ExpNotEqual(e1,e2);
		  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // term ::= power MUL term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMul(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // term ::= power DIV term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpDiv(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // term ::= power MOD term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMod(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // string ::= STR 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpLit( FnPlotValue.make(s) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // complits ::= BOOL_FALSE 
            {
              Boolean RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new Boolean("false"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("complits",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // complits ::= BOOL_TRUE 
            {
              Boolean RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new Boolean("true"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("complits",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // number ::= INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make( ilit ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // number ::= DOUBLE 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // number ::= BIN_INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
Integer val = Integer.parseInt(ilit, 2);
RESULT = FnPlotValue.make(val);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // number ::= HEX_INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
Integer val = Integer.parseInt(ilit, 16);
RESULT = FnPlotValue.make(val);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // number ::= complits 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean ilit = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		FnPlotValue< ? > n = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLit( n ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= LBRACE expression RBRACE 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // factor ::= vector 
            {
              Exp RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		VectorFunction vc = (VectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = vc; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // empty ::= 
            {
              Object RESULT =null;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("empty",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FnPlotParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
              return CUP$FnPlotParser$do_action_part00000000(
                               CUP$FnPlotParser$act_num,
                               CUP$FnPlotParser$parser,
                               CUP$FnPlotParser$stack,
                               CUP$FnPlotParser$top);
    }
}

}
