
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;
import fnplot.values.FnPlotReal;
import fnplot.syntax.inbuiltfunctions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FnPlotParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public FnPlotParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public FnPlotParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\003\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\073\006\000\002\074\006\000\002" +
    "\071\003\000\002\071\003\000\002\072\005\000\002\072" +
    "\003\000\002\070\010\000\002\067\005\000\002\066\012" +
    "\000\002\065\006\000\002\062\003\000\002\062\003\000" +
    "\002\063\005\000\002\063\003\000\002\061\011\000\002" +
    "\060\005\000\002\060\003\000\002\057\010\000\002\054" +
    "\006\000\002\055\003\000\002\055\003\000\002\056\005" +
    "\000\002\056\003\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\053\005\000\002\051\011\000\002" +
    "\050\011\000\002\046\003\000\002\046\003\000\002\047" +
    "\005\000\002\047\003\000\002\045\004\000\002\045\003" +
    "\000\002\036\012\000\002\002\005\000\002\035\010\000" +
    "\002\034\010\000\002\032\003\000\002\032\003\000\002" +
    "\031\005\000\002\030\006\000\002\021\003\000\002\021" +
    "\003\000\002\022\005\000\002\022\003\000\002\027\006" +
    "\000\002\025\006\000\002\025\006\000\002\026\006\000" +
    "\002\026\006\000\002\024\010\000\002\013\003\000\002" +
    "\013\005\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\007\007\000\002\012\005\000" +
    "\002\010\004\000\002\010\003\000\002\011\005\000\002" +
    "\011\003\000\002\006\006\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\023\005\000\002\023\003" +
    "\000\002\040\005\000\002\040\005\000\002\040\005\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\041\004\000\002\042\010\000\002\043\007\000\002\044" +
    "\007\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\003\000\002\033\003\000\002\037\003\000" +
    "\002\037\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\005\000\002\016\005" +
    "\000\002\016\003\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\072\004\023\007\076\020\073\022\064\035" +
    "\053\036\016\037\026\040\055\041\070\043\054\044\043" +
    "\045\072\046\046\052\101\054\035\055\050\056\042\061" +
    "\015\062\027\063\105\064\021\065\020\066\066\067\013" +
    "\070\030\071\057\072\074\073\102\001\002\000\004\002" +
    "\u010b\001\002\000\076\002\ufffb\004\ufffb\007\ufffb\020\ufffb" +
    "\022\ufffb\023\ufffb\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\052\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065" +
    "\ufffb\066\ufffb\067\ufffb\070\ufffb\071\ufffb\072\ufffb\073\ufffb" +
    "\001\002\000\022\005\uffb6\007\uffb6\010\uffb6\011\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\057\uffb6\001\002\000\022\005\uffb3" +
    "\007\uffb3\010\uffb3\011\uffb3\023\uffb3\024\uffb3\025\uffb3\057" +
    "\uffb3\001\002\000\056\004\uff86\005\uff86\007\uff86\010\uff86" +
    "\011\uff86\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\023" +
    "\uff86\024\uff86\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86" +
    "\032\uff86\033\uff86\034\uff86\053\u0100\057\uff86\001\002\000" +
    "\074\002\001\004\023\007\076\020\073\022\064\035\053" +
    "\036\016\037\026\040\055\041\070\043\054\044\043\045" +
    "\072\046\046\052\101\054\035\055\050\056\042\061\015" +
    "\062\027\063\105\064\021\065\020\066\066\067\013\070" +
    "\030\071\057\072\074\073\102\001\002\000\022\005\uffaf" +
    "\007\uffaf\010\uffaf\011\uffaf\023\uffaf\024\uffaf\025\uffaf\057" +
    "\uffaf\001\002\000\022\005\uff92\007\uff92\010\uff92\011\uff92" +
    "\023\uff92\024\uff92\025\uff92\057\uff92\001\002\000\076\002" +
    "\ufffd\004\ufffd\007\ufffd\020\ufffd\022\ufffd\023\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\040\ufffd\041\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\046\ufffd\052\ufffd\054\ufffd\055\ufffd\056\ufffd\061\ufffd" +
    "\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\001\002\000\004\022\363" +
    "\001\002\000\004\004\356\001\002\000\022\005\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\023\uffb2\024\uffb2\025\uffb2\057\uffb2" +
    "\001\002\000\054\004\uff8e\005\uff8e\007\uff8e\010\uff8e\011" +
    "\uff8e\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\023\uff8e" +
    "\024\uff8e\025\uff8e\026\uff8e\027\uff8e\030\uff8e\031\uff8e\032" +
    "\uff8e\033\uff8e\034\uff8e\057\uff8e\001\002\000\054\004\uff8f" +
    "\005\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014" +
    "\uff8f\015\uff8f\016\uff8f\023\uff8f\024\uff8f\025\uff8f\026\uff8f" +
    "\027\uff8f\030\uff8f\031\uff8f\032\uff8f\033\uff8f\034\uff8f\057" +
    "\uff8f\001\002\000\022\005\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\057\uffb0\001\002\000\062\004" +
    "\023\007\076\020\073\022\064\035\053\036\016\037\026" +
    "\040\055\041\070\043\054\044\043\045\072\046\046\052" +
    "\101\054\035\055\050\064\021\065\020\066\127\067\013" +
    "\070\030\071\057\072\074\073\102\001\002\000\022\005" +
    "\uffae\007\uffae\010\uffae\011\uffae\023\uffae\024\uffae\025\uffae" +
    "\057\uffae\001\002\000\022\005\uffb7\007\uffb7\010\uffb7\011" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\057\uffb7\001\002\000\004" +
    "\004\347\001\002\000\004\004\344\001\002\000\054\004" +
    "\uff90\005\uff90\007\uff90\010\uff90\011\uff90\012\uff90\013\uff90" +
    "\014\uff90\015\uff90\016\uff90\023\uff90\024\uff90\025\uff90\026" +
    "\uff90\027\uff90\030\uff90\031\uff90\032\uff90\033\uff90\034\uff90" +
    "\057\uff90\001\002\000\022\005\uffbf\007\uffbf\010\uffbf\011" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\057\uffbf\001\002\000\022" +
    "\005\uffbe\007\uffbe\010\uffbe\011\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\057\uffbe\001\002\000\022\005\uffdf\007\uffdf\010\uffdf" +
    "\011\uffdf\023\uffdf\024\uffdf\025\uffdf\057\uffdf\001\002\000" +
    "\022\005\uffb9\007\uffb9\010\uffb9\011\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\057\uffb9\001\002\000\004\004\337\001\002\000" +
    "\022\005\uffba\007\uffba\010\uffba\011\uffba\023\uffba\024\uffba" +
    "\025\uffba\057\uffba\001\002\000\022\005\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\023\uffc2\024\uffc2\025\uffc2\057\uffc2\001\002" +
    "\000\022\005\uffb5\007\uffb5\010\uffb5\011\uffb5\023\uffb5\024" +
    "\uffb5\025\uffb5\057\uffb5\001\002\000\024\005\uffd0\006\uffd0" +
    "\007\uffd0\010\uffd0\011\uffd0\023\uffd0\024\uffd0\025\uffd0\057" +
    "\uffd0\001\002\000\062\004\023\007\076\020\073\022\064" +
    "\035\053\036\016\037\026\040\055\041\070\043\054\044" +
    "\043\045\072\046\046\052\101\054\035\055\050\064\021" +
    "\065\020\066\127\067\013\070\030\071\057\072\074\073" +
    "\102\001\002\000\004\004\323\001\002\000\022\005\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\023\uffe0\024\uffe0\025\uffe0\057" +
    "\uffe0\001\002\000\004\025\271\001\002\000\004\007\126" +
    "\001\002\000\024\005\uffbb\006\320\007\uffbb\010\uffbb\011" +
    "\uffbb\023\uffbb\024\uffbb\025\uffbb\057\uffbb\001\002\000\004" +
    "\004\315\001\002\000\022\005\uffb4\007\uffb4\010\uffb4\011" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\057\uffb4\001\002\000\026" +
    "\005\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\023" +
    "\uffa3\024\uffa3\025\uffa3\057\uffa3\001\002\000\004\004\310" +
    "\001\002\000\004\004\303\001\002\000\004\004\300\001" +
    "\002\000\022\005\uffb1\007\uffb1\010\uffb1\011\uffb1\023\uffb1" +
    "\024\uffb1\025\uffb1\057\uffb1\001\002\000\054\004\uff91\005" +
    "\uff91\007\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\057\uff91" +
    "\001\002\000\022\005\uffbd\007\uffbd\010\uffbd\011\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\057\uffbd\001\002\000\026\005\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\274\013\275\023\uffc0\024" +
    "\uffc0\025\uffc0\057\uffc0\001\002\000\076\002\ufff8\004\ufff8" +
    "\007\ufff8\020\ufff8\022\ufff8\023\ufff8\035\ufff8\036\ufff8\037" +
    "\ufff8\040\ufff8\041\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\052\ufff8\054\ufff8\055\ufff8\056\ufff8\061\ufff8\062\ufff8\063" +
    "\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8\070\ufff8\071\ufff8" +
    "\072\ufff8\073\ufff8\001\002\000\022\005\uffad\007\uffad\010" +
    "\uffad\011\uffad\023\uffad\024\uffad\025\uffad\057\uffad\001\002" +
    "\000\072\004\023\007\076\020\073\022\064\035\053\036" +
    "\016\037\026\040\055\041\070\043\054\044\043\045\072" +
    "\046\046\052\101\054\035\055\050\056\042\061\015\062" +
    "\027\063\105\064\021\065\020\066\066\067\013\070\030" +
    "\071\057\072\074\073\102\001\002\000\054\004\uff8b\005" +
    "\uff8b\007\uff8b\010\uff8b\011\uff8b\012\uff8b\013\uff8b\014\uff8b" +
    "\015\uff8b\016\uff8b\023\uff8b\024\uff8b\025\uff8b\026\uff8b\027" +
    "\uff8b\030\uff8b\031\uff8b\032\uff8b\033\uff8b\034\uff8b\057\uff8b" +
    "\001\002\000\042\004\uff89\012\uff89\013\uff89\014\uff89\015" +
    "\uff89\016\uff89\017\264\023\uff89\025\uff89\026\uff89\027\uff89" +
    "\030\uff89\031\uff89\032\uff89\033\uff89\034\uff89\001\002\000" +
    "\022\005\uffb8\007\uffb8\010\uffb8\011\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\057\uffb8\001\002\000\004\004\260\001\002\000" +
    "\022\005\uffde\007\uffde\010\uffde\011\uffde\023\uffde\024\uffde" +
    "\025\uffde\057\uffde\001\002\000\004\004\251\001\002\000" +
    "\004\004\233\001\002\000\054\004\uff8d\005\uff8d\007\uff8d" +
    "\010\uff8d\011\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016" +
    "\uff8d\023\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\030\uff8d" +
    "\031\uff8d\032\uff8d\033\uff8d\034\uff8d\057\uff8d\001\002\000" +
    "\076\002\ufffa\004\ufffa\007\ufffa\020\ufffa\022\ufffa\023\ufffa" +
    "\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\046\ufffa\052\ufffa\054\ufffa\055\ufffa\056\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\067" +
    "\ufffa\070\ufffa\071\ufffa\072\ufffa\073\ufffa\001\002\000\070" +
    "\004\023\007\076\010\uff85\011\133\020\073\022\064\035" +
    "\053\036\016\037\026\040\055\041\070\042\224\043\054" +
    "\044\043\045\072\046\046\052\101\054\035\055\050\064" +
    "\021\065\020\066\127\067\013\070\030\071\057\072\074" +
    "\073\102\001\002\000\024\005\uffcf\006\uffcf\007\uffcf\010" +
    "\uffcf\011\uffcf\023\uffcf\024\uffcf\025\uffcf\057\uffcf\001\002" +
    "\000\022\005\uffbc\007\uffbc\010\uffbc\011\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\057\uffbc\001\002\000\006\004\176\066\177" +
    "\001\002\000\054\004\uff8c\005\uff8c\007\uff8c\010\uff8c\011" +
    "\uff8c\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c\023\uff8c" +
    "\024\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\031\uff8c\032" +
    "\uff8c\033\uff8c\034\uff8c\057\uff8c\001\002\000\076\002\ufff9" +
    "\004\ufff9\007\ufff9\020\ufff9\022\ufff9\023\ufff9\035\ufff9\036" +
    "\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9\044\ufff9\045\ufff9" +
    "\046\ufff9\052\ufff9\054\ufff9\055\ufff9\056\ufff9\061\ufff9\062" +
    "\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\070\ufff9" +
    "\071\ufff9\072\ufff9\073\ufff9\001\002\000\054\004\166\005" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\131\057\uffa1" +
    "\001\002\000\004\004\163\001\002\000\050\005\uff93\007" +
    "\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014\121\015\117" +
    "\016\113\023\uff93\024\uff93\025\uff93\026\114\027\112\030" +
    "\120\031\116\032\111\033\115\057\uff93\001\002\000\054" +
    "\004\uff8a\005\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\016\uff8a\023\uff8a\024\uff8a\025\uff8a" +
    "\026\uff8a\027\uff8a\030\uff8a\031\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\057\uff8a\001\002\000\076\002\ufffe\004\ufffe\007\ufffe" +
    "\020\ufffe\022\ufffe\023\ufffe\035\ufffe\036\ufffe\037\ufffe\040" +
    "\ufffe\041\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\052\ufffe" +
    "\054\ufffe\055\ufffe\056\ufffe\061\ufffe\062\ufffe\063\ufffe\064" +
    "\ufffe\065\ufffe\066\ufffe\067\ufffe\070\ufffe\071\ufffe\072\ufffe" +
    "\073\ufffe\001\002\000\062\004\023\007\076\020\073\022" +
    "\064\035\053\036\016\037\026\040\055\041\070\043\054" +
    "\044\043\045\072\046\046\052\101\054\035\055\050\064" +
    "\021\065\020\066\127\067\013\070\030\071\057\072\074" +
    "\073\102\001\002\000\062\004\023\007\076\020\073\022" +
    "\064\035\053\036\016\037\026\040\055\041\070\043\054" +
    "\044\043\045\072\046\046\052\101\054\035\055\050\064" +
    "\021\065\020\066\127\067\013\070\030\071\057\072\074" +
    "\073\102\001\002\000\026\004\023\007\126\022\123\064" +
    "\021\065\020\066\127\070\030\071\057\072\074\073\102" +
    "\001\002\000\062\004\023\007\076\020\073\022\064\035" +
    "\053\036\016\037\026\040\055\041\070\043\054\044\043" +
    "\045\072\046\046\052\101\054\035\055\050\064\021\065" +
    "\020\066\127\067\013\070\030\071\057\072\074\073\102" +
    "\001\002\000\062\004\023\007\076\020\073\022\064\035" +
    "\053\036\016\037\026\040\055\041\070\043\054\044\043" +
    "\045\072\046\046\052\101\054\035\055\050\064\021\065" +
    "\020\066\127\067\013\070\030\071\057\072\074\073\102" +
    "\001\002\000\062\004\023\007\076\020\073\022\064\035" +
    "\053\036\016\037\026\040\055\041\070\043\054\044\043" +
    "\045\072\046\046\052\101\054\035\055\050\064\021\065" +
    "\020\066\127\067\013\070\030\071\057\072\074\073\102" +
    "\001\002\000\026\004\023\007\126\022\123\064\021\065" +
    "\020\066\127\070\030\071\057\072\074\073\102\001\002" +
    "\000\062\004\023\007\076\020\073\022\064\035\053\036" +
    "\016\037\026\040\055\041\070\043\054\044\043\045\072" +
    "\046\046\052\101\054\035\055\050\064\021\065\020\066" +
    "\127\067\013\070\030\071\057\072\074\073\102\001\002" +
    "\000\026\004\023\007\126\022\123\064\021\065\020\066" +
    "\127\070\030\071\057\072\074\073\102\001\002\000\034" +
    "\005\uff93\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014" +
    "\121\015\117\016\113\023\uff93\024\uff93\025\uff93\057\uff93" +
    "\001\002\000\062\004\023\007\076\020\073\022\064\035" +
    "\053\036\016\037\026\040\055\041\070\043\054\044\043" +
    "\045\072\046\046\052\101\054\035\055\050\064\021\065" +
    "\020\066\127\067\013\070\030\071\057\072\074\073\102" +
    "\001\002\000\052\005\uff86\007\uff86\010\uff86\011\uff86\012" +
    "\uff86\013\uff86\014\uff86\015\uff86\016\uff86\023\uff86\024\uff86" +
    "\025\uff86\026\uff86\027\uff86\030\uff86\031\uff86\032\uff86\033" +
    "\uff86\034\uff86\057\uff86\001\002\000\026\005\uff96\007\uff96" +
    "\010\uff96\011\uff96\012\uff96\013\uff96\023\uff96\024\uff96\025" +
    "\uff96\057\uff96\001\002\000\004\011\133\001\002\000\054" +
    "\004\uff89\005\uff89\007\uff89\010\uff89\011\uff89\012\uff89\013" +
    "\uff89\014\uff89\015\uff89\016\uff89\023\uff89\024\uff89\025\uff89" +
    "\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033\uff89\034" +
    "\uff89\057\uff89\001\002\000\052\005\uffa1\007\uffa1\010\uffa1" +
    "\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\023" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\033\uffa1\034\131\057\uffa1\001\002\000\026\004" +
    "\023\007\126\022\123\064\021\065\020\066\127\070\030" +
    "\071\057\072\074\073\102\001\002\000\050\005\uffa2\007" +
    "\uffa2\010\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\057\uffa2\001\002\000\004" +
    "\007\134\001\002\000\064\004\023\007\076\010\uff85\020" +
    "\073\022\064\035\053\036\016\037\026\040\055\041\070" +
    "\043\054\044\043\045\072\046\046\052\101\054\035\055" +
    "\050\064\021\065\020\066\127\067\013\070\030\071\057" +
    "\072\074\073\102\001\002\000\004\010\uffec\001\002\000" +
    "\004\010\146\001\002\000\006\010\uffea\024\uffea\001\002" +
    "\000\010\010\uffe7\011\144\024\uffe7\001\002\000\006\010" +
    "\uffed\024\142\001\002\000\062\004\023\007\076\020\073" +
    "\022\064\035\053\036\016\037\026\040\055\041\070\043" +
    "\054\044\043\045\072\046\046\052\101\054\035\055\050" +
    "\064\021\065\020\066\127\067\013\070\030\071\057\072" +
    "\074\073\102\001\002\000\006\010\uffeb\024\uffeb\001\002" +
    "\000\062\004\023\007\076\020\073\022\064\035\053\036" +
    "\016\037\026\040\055\041\070\043\054\044\043\045\072" +
    "\046\046\052\101\054\035\055\050\064\021\065\020\066" +
    "\127\067\013\070\030\071\057\072\074\073\102\001\002" +
    "\000\006\010\uffe8\024\uffe8\001\002\000\004\011\147\001" +
    "\002\000\004\010\150\001\002\000\056\004\uffe9\005\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\053\uffe9\057" +
    "\uffe9\001\002\000\004\023\152\001\002\000\054\004\uff87" +
    "\005\uff87\007\uff87\010\uff87\011\uff87\012\uff87\013\uff87\014" +
    "\uff87\015\uff87\016\uff87\023\uff87\024\uff87\025\uff87\026\uff87" +
    "\027\uff87\030\uff87\031\uff87\032\uff87\033\uff87\034\uff87\057" +
    "\uff87\001\002\000\022\005\uff9d\007\uff9d\010\uff9d\011\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\057\uff9d\001\002\000\026\005" +
    "\uff95\007\uff95\010\uff95\011\uff95\012\uff95\013\uff95\023\uff95" +
    "\024\uff95\025\uff95\057\uff95\001\002\000\022\005\uff9c\007" +
    "\uff9c\010\uff9c\011\uff9c\023\uff9c\024\uff9c\025\uff9c\057\uff9c" +
    "\001\002\000\022\005\uffa0\007\uffa0\010\uffa0\011\uffa0\023" +
    "\uffa0\024\uffa0\025\uffa0\057\uffa0\001\002\000\022\005\uff9f" +
    "\007\uff9f\010\uff9f\011\uff9f\023\uff9f\024\uff9f\025\uff9f\057" +
    "\uff9f\001\002\000\026\005\uff94\007\uff94\010\uff94\011\uff94" +
    "\012\uff94\013\uff94\023\uff94\024\uff94\025\uff94\057\uff94\001" +
    "\002\000\022\005\uff9e\007\uff9e\010\uff9e\011\uff9e\023\uff9e" +
    "\024\uff9e\025\uff9e\057\uff9e\001\002\000\022\005\uff9b\007" +
    "\uff9b\010\uff9b\011\uff9b\023\uff9b\024\uff9b\025\uff9b\057\uff9b" +
    "\001\002\000\062\004\023\007\076\020\073\022\064\035" +
    "\053\036\016\037\026\040\055\041\070\043\054\044\043" +
    "\045\072\046\046\052\101\054\035\055\050\064\021\065" +
    "\020\066\127\067\013\070\030\071\057\072\074\073\102" +
    "\001\002\000\004\005\165\001\002\000\076\002\ufff7\004" +
    "\ufff7\007\ufff7\020\ufff7\022\ufff7\023\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\043\ufff7\044\ufff7\045\ufff7\046" +
    "\ufff7\052\ufff7\054\ufff7\055\ufff7\056\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\064\ufff7\065\ufff7\066\ufff7\067\ufff7\070\ufff7\071" +
    "\ufff7\072\ufff7\073\ufff7\001\002\000\064\004\023\005\uff85" +
    "\007\076\020\073\022\064\035\053\036\016\037\026\040" +
    "\055\041\070\043\054\044\043\045\072\046\046\052\101" +
    "\054\035\055\050\064\021\065\020\066\127\067\013\070" +
    "\030\071\057\072\074\073\102\001\002\000\004\005\uffe3" +
    "\001\002\000\006\005\uffe4\024\174\001\002\000\006\005" +
    "\uffe1\024\uffe1\001\002\000\004\005\173\001\002\000\022" +
    "\005\uffe5\007\uffe5\010\uffe5\011\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\057\uffe5\001\002\000\062\004\023\007\076\020\073" +
    "\022\064\035\053\036\016\037\026\040\055\041\070\043" +
    "\054\044\043\045\072\046\046\052\101\054\035\055\050" +
    "\064\021\065\020\066\127\067\013\070\030\071\057\072" +
    "\074\073\102\001\002\000\006\005\uffe2\024\uffe2\001\002" +
    "\000\012\007\203\053\uff85\066\207\074\206\001\002\000" +
    "\062\004\023\007\076\020\073\022\064\035\053\036\016" +
    "\037\026\040\055\041\070\043\054\044\043\045\072\046" +
    "\046\052\101\054\035\055\050\064\021\065\020\066\127" +
    "\067\013\070\030\071\057\072\074\073\102\001\002\000" +
    "\022\005\uffdd\007\uffdd\010\uffdd\011\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\057\uffdd\001\002\000\010\010\uffda\024\221\053" +
    "\uffda\001\002\000\004\053\215\001\002\000\010\010\uff85" +
    "\066\207\074\206\001\002\000\006\010\uffd9\053\uffd9\001" +
    "\002\000\010\010\uffd7\024\uffd7\053\uffd7\001\002\000\004" +
    "\066\210\001\002\000\012\005\uffd5\010\uffd5\024\uffd5\053" +
    "\uffd5\001\002\000\012\005\uffd6\010\uffd6\024\uffd6\053\uffd6" +
    "\001\002\000\004\010\212\001\002\000\004\005\213\001" +
    "\002\000\062\004\023\007\076\020\073\022\064\035\053" +
    "\036\016\037\026\040\055\041\070\043\054\044\043\045" +
    "\072\046\046\052\101\054\035\055\050\064\021\065\020" +
    "\066\127\067\013\070\030\071\057\072\074\073\102\001" +
    "\002\000\022\005\uffdb\007\uffdb\010\uffdb\011\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\057\uffdb\001\002\000\006\066\207\074" +
    "\206\001\002\000\004\005\217\001\002\000\062\004\023" +
    "\007\076\020\073\022\064\035\053\036\016\037\026\040" +
    "\055\041\070\043\054\044\043\045\072\046\046\052\101" +
    "\054\035\055\050\064\021\065\020\066\127\067\013\070" +
    "\030\071\057\072\074\073\102\001\002\000\022\005\uffdc" +
    "\007\uffdc\010\uffdc\011\uffdc\023\uffdc\024\uffdc\025\uffdc\057" +
    "\uffdc\001\002\000\006\066\207\074\206\001\002\000\010" +
    "\010\uffd8\024\uffd8\053\uffd8\001\002\000\004\010\uffcb\001" +
    "\002\000\004\010\uffc9\001\002\000\004\010\232\001\002" +
    "\000\004\024\230\001\002\000\004\010\uffcc\001\002\000" +
    "\064\004\023\007\076\020\073\022\064\035\053\036\016" +
    "\037\026\040\055\041\070\042\224\043\054\044\043\045" +
    "\072\046\046\052\101\054\035\055\050\064\021\065\020" +
    "\066\127\067\013\070\030\071\057\072\074\073\102\001" +
    "\002\000\004\010\uffca\001\002\000\024\005\uffce\006\uffce" +
    "\007\uffce\010\uffce\011\uffce\023\uffce\024\uffce\025\uffce\057" +
    "\uffce\001\002\000\006\005\uff85\066\237\001\002\000\004" +
    "\005\uffa9\001\002\000\006\005\uff85\024\244\001\002\000" +
    "\004\005\242\001\002\000\004\017\240\001\002\000\062" +
    "\004\023\007\076\020\073\022\064\035\053\036\016\037" +
    "\026\040\055\041\070\043\054\044\043\045\072\046\046" +
    "\052\101\054\035\055\050\064\021\065\020\066\127\067" +
    "\013\070\030\071\057\072\074\073\102\001\002\000\006" +
    "\005\uffab\024\uffab\001\002\000\062\004\023\007\076\020" +
    "\073\022\064\035\053\036\016\037\026\040\055\041\070" +
    "\043\054\044\043\045\072\046\046\052\101\054\035\055" +
    "\050\064\021\065\020\066\127\067\013\070\030\071\057" +
    "\072\074\073\102\001\002\000\022\005\uffac\007\uffac\010" +
    "\uffac\011\uffac\023\uffac\024\uffac\025\uffac\057\uffac\001\002" +
    "\000\004\066\237\001\002\000\004\005\uffa7\001\002\000" +
    "\004\005\uffaa\001\002\000\006\005\uff85\024\244\001\002" +
    "\000\004\005\uffa8\001\002\000\062\004\023\007\076\020" +
    "\073\022\064\035\053\036\016\037\026\040\055\041\070" +
    "\043\054\044\043\045\072\046\046\052\101\054\035\055" +
    "\050\064\021\065\020\066\127\067\013\070\030\071\057" +
    "\072\074\073\102\001\002\000\004\024\253\001\002\000" +
    "\062\004\023\007\076\020\073\022\064\035\053\036\016" +
    "\037\026\040\055\041\070\043\054\044\043\045\072\046" +
    "\046\052\101\054\035\055\050\064\021\065\020\066\127" +
    "\067\013\070\030\071\057\072\074\073\102\001\002\000" +
    "\004\024\255\001\002\000\062\004\023\007\076\020\073" +
    "\022\064\035\053\036\016\037\026\040\055\041\070\043" +
    "\054\044\043\045\072\046\046\052\101\054\035\055\050" +
    "\064\021\065\020\066\127\067\013\070\030\071\057\072" +
    "\074\073\102\001\002\000\004\005\257\001\002\000\022" +
    "\005\uffd4\007\uffd4\010\uffd4\011\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\057\uffd4\001\002\000\004\007\261\001\002\000\066" +
    "\004\023\007\076\010\uff85\020\073\022\064\035\053\036" +
    "\016\037\026\040\055\041\070\042\224\043\054\044\043" +
    "\045\072\046\046\052\101\054\035\055\050\064\021\065" +
    "\020\066\127\067\013\070\030\071\057\072\074\073\102" +
    "\001\002\000\004\005\263\001\002\000\024\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\057\uffcd\001\002\000\062\004\023\007\076\020\073\022" +
    "\064\035\053\036\016\037\026\040\055\041\070\043\054" +
    "\044\043\045\072\046\046\052\101\054\035\055\050\064" +
    "\021\065\020\066\127\067\013\070\030\071\057\072\074" +
    "\073\102\001\002\000\004\025\266\001\002\000\076\002" +
    "\uffa6\004\uffa6\007\uffa6\020\uffa6\022\uffa6\023\uffa6\035\uffa6" +
    "\036\uffa6\037\uffa6\040\uffa6\041\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\052\uffa6\054\uffa6\055\uffa6\056\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\064\uffa6\065\uffa6\066\uffa6\067\uffa6\070" +
    "\uffa6\071\uffa6\072\uffa6\073\uffa6\001\002\000\074\004\023" +
    "\007\076\020\073\022\064\023\272\035\053\036\016\037" +
    "\026\040\055\041\070\043\054\044\043\045\072\046\046" +
    "\052\101\054\035\055\050\056\042\061\015\062\027\063" +
    "\105\064\021\065\020\066\066\067\013\070\030\071\057" +
    "\072\074\073\102\001\002\000\006\023\152\025\271\001" +
    "\002\000\076\002\ufffc\004\ufffc\007\ufffc\020\ufffc\022\ufffc" +
    "\023\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\043" +
    "\ufffc\044\ufffc\045\ufffc\046\ufffc\052\ufffc\054\ufffc\055\ufffc" +
    "\056\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\065\ufffc\066" +
    "\ufffc\067\ufffc\070\ufffc\071\ufffc\072\ufffc\073\ufffc\001\002" +
    "\000\022\005\uffc1\007\uffc1\010\uffc1\011\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\057\uffc1\001\002\000\076\002\uffff\004\uffff" +
    "\007\uffff\020\uffff\022\uffff\023\uffff\035\uffff\036\uffff\037" +
    "\uffff\040\uffff\041\uffff\043\uffff\044\uffff\045\uffff\046\uffff" +
    "\052\uffff\054\uffff\055\uffff\056\uffff\061\uffff\062\uffff\063" +
    "\uffff\064\uffff\065\uffff\066\uffff\067\uffff\070\uffff\071\uffff" +
    "\072\uffff\073\uffff\001\002\000\026\004\023\007\126\022" +
    "\123\064\021\065\020\066\127\070\030\071\057\072\074" +
    "\073\102\001\002\000\026\004\023\007\126\022\123\064" +
    "\021\065\020\066\127\070\030\071\057\072\074\073\102" +
    "\001\002\000\026\005\uffa4\007\uffa4\010\uffa4\011\uffa4\012" +
    "\uffa4\013\uffa4\023\uffa4\024\uffa4\025\uffa4\057\uffa4\001\002" +
    "\000\026\005\uffa5\007\uffa5\010\uffa5\011\uffa5\012\uffa5\013" +
    "\uffa5\023\uffa5\024\uffa5\025\uffa5\057\uffa5\001\002\000\062" +
    "\004\023\007\076\020\073\022\064\035\053\036\016\037" +
    "\026\040\055\041\070\043\054\044\043\045\072\046\046" +
    "\052\101\054\035\055\050\064\021\065\020\066\127\067" +
    "\013\070\030\071\057\072\074\073\102\001\002\000\004" +
    "\005\302\001\002\000\022\005\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\023\uffc8\024\uffc8\025\uffc8\057\uffc8\001\002\000\062" +
    "\004\023\007\076\020\073\022\064\035\053\036\016\037" +
    "\026\040\055\041\070\043\054\044\043\045\072\046\046" +
    "\052\101\054\035\055\050\064\021\065\020\066\127\067" +
    "\013\070\030\071\057\072\074\073\102\001\002\000\004" +
    "\024\305\001\002\000\062\004\023\007\076\020\073\022" +
    "\064\035\053\036\016\037\026\040\055\041\070\043\054" +
    "\044\043\045\072\046\046\052\101\054\035\055\050\064" +
    "\021\065\020\066\127\067\013\070\030\071\057\072\074" +
    "\073\102\001\002\000\004\005\307\001\002\000\022\005" +
    "\uffd1\007\uffd1\010\uffd1\011\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\057\uffd1\001\002\000\062\004\023\007\076\020\073\022" +
    "\064\035\053\036\016\037\026\040\055\041\070\043\054" +
    "\044\043\045\072\046\046\052\101\054\035\055\050\064" +
    "\021\065\020\066\127\067\013\070\030\071\057\072\074" +
    "\073\102\001\002\000\004\024\312\001\002\000\062\004" +
    "\023\007\076\020\073\022\064\035\053\036\016\037\026" +
    "\040\055\041\070\043\054\044\043\045\072\046\046\052" +
    "\101\054\035\055\050\064\021\065\020\066\127\067\013" +
    "\070\030\071\057\072\074\073\102\001\002\000\004\005" +
    "\314\001\002\000\022\005\uffc3\007\uffc3\010\uffc3\011\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\057\uffc3\001\002\000\062\004" +
    "\023\007\076\020\073\022\064\035\053\036\016\037\026" +
    "\040\055\041\070\043\054\044\043\045\072\046\046\052" +
    "\101\054\035\055\050\064\021\065\020\066\127\067\013" +
    "\070\030\071\057\072\074\073\102\001\002\000\004\005" +
    "\317\001\002\000\022\005\uffee\007\uffee\010\uffee\011\uffee" +
    "\023\uffee\024\uffee\025\uffee\057\uffee\001\002\000\006\007" +
    "\261\041\070\001\002\000\022\005\uffd3\007\uffd3\010\uffd3" +
    "\011\uffd3\023\uffd3\024\uffd3\025\uffd3\057\uffd3\001\002\000" +
    "\022\005\uff9a\007\uff9a\010\uff9a\011\uff9a\023\uff9a\024\uff9a" +
    "\025\uff9a\057\uff9a\001\002\000\062\004\023\007\076\020" +
    "\073\022\064\035\053\036\016\037\026\040\055\041\070" +
    "\043\054\044\043\045\072\046\046\052\101\054\035\055" +
    "\050\064\021\065\020\066\127\067\013\070\030\071\057" +
    "\072\074\073\102\001\002\000\004\024\325\001\002\000" +
    "\062\004\023\007\076\020\073\022\064\035\053\036\016" +
    "\037\026\040\055\041\070\043\054\044\043\045\072\046" +
    "\046\052\101\054\035\055\050\064\021\065\020\066\127" +
    "\067\013\070\030\071\057\072\074\073\102\001\002\000" +
    "\004\005\327\001\002\000\022\005\uffd2\007\uffd2\010\uffd2" +
    "\011\uffd2\023\uffd2\024\uffd2\025\uffd2\057\uffd2\001\002\000" +
    "\004\057\331\001\002\000\062\004\023\007\076\020\073" +
    "\022\064\035\053\036\016\037\026\040\055\041\070\043" +
    "\054\044\043\045\072\046\046\052\101\054\035\055\050" +
    "\064\021\065\020\066\127\067\013\070\030\071\057\072" +
    "\074\073\102\001\002\000\004\007\333\001\002\000\004" +
    "\060\334\001\002\000\062\004\023\007\076\020\073\022" +
    "\064\035\053\036\016\037\026\040\055\041\070\043\054" +
    "\044\043\045\072\046\046\052\101\054\035\055\050\064" +
    "\021\065\020\066\127\067\013\070\030\071\057\072\074" +
    "\073\102\001\002\000\004\010\336\001\002\000\076\002" +
    "\uffef\004\uffef\007\uffef\020\uffef\022\uffef\023\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\041\uffef\043\uffef\044\uffef\045" +
    "\uffef\046\uffef\052\uffef\054\uffef\055\uffef\056\uffef\061\uffef" +
    "\062\uffef\063\uffef\064\uffef\065\uffef\066\uffef\067\uffef\070" +
    "\uffef\071\uffef\072\uffef\073\uffef\001\002\000\062\004\023" +
    "\007\076\020\073\022\064\035\053\036\016\037\026\040" +
    "\055\041\070\043\054\044\043\045\072\046\046\052\101" +
    "\054\035\055\050\064\021\065\020\066\127\067\013\070" +
    "\030\071\057\072\074\073\102\001\002\000\004\024\341" +
    "\001\002\000\062\004\023\007\076\020\073\022\064\035" +
    "\053\036\016\037\026\040\055\041\070\043\054\044\043" +
    "\045\072\046\046\052\101\054\035\055\050\064\021\065" +
    "\020\066\127\067\013\070\030\071\057\072\074\073\102" +
    "\001\002\000\004\005\343\001\002\000\022\005\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\023\uffe6\024\uffe6\025\uffe6\057\uffe6" +
    "\001\002\000\062\004\023\007\076\020\073\022\064\035" +
    "\053\036\016\037\026\040\055\041\070\043\054\044\043" +
    "\045\072\046\046\052\101\054\035\055\050\064\021\065" +
    "\020\066\127\067\013\070\030\071\057\072\074\073\102" +
    "\001\002\000\004\005\346\001\002\000\076\002\ufff6\004" +
    "\ufff6\007\ufff6\020\ufff6\022\ufff6\023\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\040\ufff6\041\ufff6\043\ufff6\044\ufff6\045\ufff6\046" +
    "\ufff6\052\ufff6\054\ufff6\055\ufff6\056\ufff6\061\ufff6\062\ufff6" +
    "\063\ufff6\064\ufff6\065\ufff6\066\ufff6\067\ufff6\070\ufff6\071" +
    "\ufff6\072\ufff6\073\ufff6\001\002\000\006\035\053\066\351" +
    "\001\002\000\004\005\353\001\002\000\004\005\352\001" +
    "\002\000\022\005\uffc4\007\uffc4\010\uffc4\011\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\057\uffc4\001\002\000\022\005\uffc5\007" +
    "\uffc5\010\uffc5\011\uffc5\023\uffc5\024\uffc5\025\uffc5\057\uffc5" +
    "\001\002\000\004\005\355\001\002\000\054\004\uff88\005" +
    "\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88" +
    "\015\uff88\016\uff88\023\uff88\024\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\031\uff88\032\uff88\033\uff88\034\uff88\057\uff88" +
    "\001\002\000\006\035\053\066\360\001\002\000\004\005" +
    "\362\001\002\000\004\005\361\001\002\000\022\005\uffc6" +
    "\007\uffc6\010\uffc6\011\uffc6\023\uffc6\024\uffc6\025\uffc6\057" +
    "\uffc6\001\002\000\022\005\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\057\uffc7\001\002\000\004\007" +
    "\364\001\002\000\064\004\023\007\076\010\uff85\020\073" +
    "\022\064\035\053\036\016\037\026\040\055\041\070\043" +
    "\054\044\043\045\072\046\046\052\101\054\035\055\050" +
    "\064\021\065\020\066\127\067\013\070\030\071\057\072" +
    "\074\073\102\001\002\000\004\010\376\001\002\000\004" +
    "\010\ufff4\001\002\000\006\010\ufff5\024\374\001\002\000" +
    "\006\010\ufff2\024\ufff2\001\002\000\004\011\372\001\002" +
    "\000\062\004\023\007\076\020\073\022\064\035\053\036" +
    "\016\037\026\040\055\041\070\043\054\044\043\045\072" +
    "\046\046\052\101\054\035\055\050\064\021\065\020\066" +
    "\127\067\013\070\030\071\057\072\074\073\102\001\002" +
    "\000\006\010\ufff0\024\ufff0\001\002\000\062\004\023\007" +
    "\076\020\073\022\064\035\053\036\016\037\026\040\055" +
    "\041\070\043\054\044\043\045\072\046\046\052\101\054" +
    "\035\055\050\064\021\065\020\066\127\067\013\070\030" +
    "\071\057\072\074\073\102\001\002\000\006\010\ufff3\024" +
    "\ufff3\001\002\000\004\023\377\001\002\000\076\002\ufff1" +
    "\004\ufff1\007\ufff1\020\ufff1\022\ufff1\023\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\041\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\052\ufff1\054\ufff1\055\ufff1\056\ufff1\061\ufff1\062" +
    "\ufff1\063\ufff1\064\ufff1\065\ufff1\066\ufff1\067\ufff1\070\ufff1" +
    "\071\ufff1\072\ufff1\073\ufff1\001\002\000\010\047\u0103\050" +
    "\u0101\051\u0102\001\002\000\004\004\u0109\001\002\000\004" +
    "\004\u0107\001\002\000\004\004\u0104\001\002\000\026\004" +
    "\023\007\126\022\123\064\021\065\020\066\127\070\030" +
    "\071\057\072\074\073\102\001\002\000\004\005\u0106\001" +
    "\002\000\022\005\uff99\007\uff99\010\uff99\011\uff99\023\uff99" +
    "\024\uff99\025\uff99\057\uff99\001\002\000\004\005\u0108\001" +
    "\002\000\022\005\uff97\007\uff97\010\uff97\011\uff97\023\uff97" +
    "\024\uff97\025\uff97\057\uff97\001\002\000\004\005\u010a\001" +
    "\002\000\022\005\uff98\007\uff98\010\uff98\011\uff98\023\uff98" +
    "\024\uff98\025\uff98\057\uff98\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\124\002\050\003\003\004\010\005\107\006" +
    "\013\007\036\013\044\014\060\015\051\016\103\017\106" +
    "\023\105\024\031\025\057\026\062\027\077\030\040\031" +
    "\076\032\046\033\030\034\033\035\066\036\024\037\064" +
    "\040\006\041\016\042\055\043\021\044\011\050\043\051" +
    "\032\052\023\053\070\054\037\057\005\061\007\065\035" +
    "\066\004\070\074\073\102\074\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\120\002\050\005\272\006\013\007" +
    "\036\013\044\014\060\015\051\016\103\017\106\023\105" +
    "\024\031\025\057\026\062\027\077\030\040\031\076\032" +
    "\046\033\030\034\033\035\066\036\024\037\064\040\006" +
    "\041\016\042\055\043\021\044\011\050\043\051\032\052" +
    "\023\053\070\054\037\057\005\061\007\065\035\066\004" +
    "\070\074\073\102\074\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\002\050\007\036\013\353" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\002\050\007\036\013\327\014\060\015\051" +
    "\016\103\017\106\023\105\024\031\025\057\026\062\027" +
    "\077\030\040\031\076\032\046\033\030\034\033\035\066" +
    "\036\024\037\064\040\006\041\016\042\055\043\021\044" +
    "\011\050\043\051\032\052\023\053\070\054\037\057\005" +
    "\061\007\065\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\061\321\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\122" +
    "\002\050\004\266\005\107\006\013\007\036\013\267\014" +
    "\060\015\051\016\103\017\106\023\105\024\031\025\057" +
    "\026\062\027\077\030\040\031\076\032\046\033\030\034" +
    "\033\035\066\036\024\037\064\040\006\041\016\042\055" +
    "\043\021\044\011\050\043\051\032\052\023\053\070\054" +
    "\037\057\005\061\007\065\035\066\004\070\074\073\102" +
    "\074\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\112\002\050\007\036\013\225\014\060\015\051" +
    "\016\103\017\106\020\222\021\224\022\226\023\105\024" +
    "\031\025\057\026\062\027\077\030\040\031\076\032\046" +
    "\033\030\034\033\035\066\036\024\037\064\040\006\041" +
    "\016\042\055\043\021\044\011\050\043\051\032\052\023" +
    "\053\070\054\037\057\005\061\007\065\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\104\002\050\007\036\013\161\014\060\015\051\016" +
    "\103\017\106\023\105\024\031\025\057\026\062\027\077" +
    "\030\040\031\076\032\046\033\030\034\033\035\066\036" +
    "\024\037\064\040\006\041\016\042\055\043\021\044\011" +
    "\050\043\051\032\052\023\053\070\054\037\057\005\061" +
    "\007\065\035\001\001\000\104\002\050\007\036\013\160" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\016\015" +
    "\157\016\127\017\106\023\121\037\064\061\123\001\001" +
    "\000\104\002\050\007\036\013\156\014\060\015\051\016" +
    "\103\017\106\023\105\024\031\025\057\026\062\027\077" +
    "\030\040\031\076\032\046\033\030\034\033\035\066\036" +
    "\024\037\064\040\006\041\016\042\055\043\021\044\011" +
    "\050\043\051\032\052\023\053\070\054\037\057\005\061" +
    "\007\065\035\001\001\000\104\002\050\007\036\013\155" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\104\002" +
    "\050\007\036\013\154\014\060\015\051\016\103\017\106" +
    "\023\105\024\031\025\057\026\062\027\077\030\040\031" +
    "\076\032\046\033\030\034\033\035\066\036\024\037\064" +
    "\040\006\041\016\042\055\043\021\044\011\050\043\051" +
    "\032\052\023\053\070\054\037\057\005\061\007\065\035" +
    "\001\001\000\016\015\153\016\127\017\106\023\121\037" +
    "\064\061\123\001\001\000\104\002\050\007\036\013\152" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\016\015" +
    "\124\016\127\017\106\023\121\037\064\061\123\001\001" +
    "\000\002\001\001\000\104\002\050\007\036\013\150\014" +
    "\060\015\051\016\103\017\106\023\105\024\031\025\057" +
    "\026\062\027\077\030\040\031\076\032\046\033\030\034" +
    "\033\035\066\036\024\037\064\040\006\041\016\042\055" +
    "\043\021\044\011\050\043\051\032\052\023\053\070\054" +
    "\037\057\005\061\007\065\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\016\127\017\106\023\131\037\064" +
    "\061\123\001\001\000\002\001\001\000\002\001\001\000" +
    "\114\002\050\007\036\013\137\014\060\015\051\016\103" +
    "\017\106\020\134\023\105\024\031\025\057\026\062\027" +
    "\077\030\040\031\076\032\046\033\030\034\033\035\066" +
    "\036\024\037\064\040\006\041\016\042\055\043\021\044" +
    "\011\050\043\051\032\052\023\053\070\054\037\057\005" +
    "\060\136\061\007\062\135\063\140\065\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\106\002\050\007\036\013" +
    "\137\014\060\015\051\016\103\017\106\023\105\024\031" +
    "\025\057\026\062\027\077\030\040\031\076\032\046\033" +
    "\030\034\033\035\066\036\024\037\064\040\006\041\016" +
    "\042\055\043\021\044\011\050\043\051\032\052\023\053" +
    "\070\054\037\057\005\060\142\061\007\065\035\001\001" +
    "\000\002\001\001\000\104\002\050\007\036\013\144\014" +
    "\060\015\051\016\103\017\106\023\105\024\031\025\057" +
    "\026\062\027\077\030\040\031\076\032\046\033\030\034" +
    "\033\035\066\036\024\037\064\040\006\041\016\042\055" +
    "\043\021\044\011\050\043\051\032\052\023\053\070\054" +
    "\037\057\005\061\007\065\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\104\002\050\007\036\013\163\014\060\015\051\016" +
    "\103\017\106\023\105\024\031\025\057\026\062\027\077" +
    "\030\040\031\076\032\046\033\030\034\033\035\066\036" +
    "\024\037\064\040\006\041\016\042\055\043\021\044\011" +
    "\050\043\051\032\052\023\053\070\054\037\057\005\061" +
    "\007\065\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\112\002\050\007\036\013\170\014\060\015\051\016" +
    "\103\017\106\020\166\023\105\024\031\025\057\026\062" +
    "\027\077\030\040\031\076\032\046\033\030\034\033\035" +
    "\066\036\024\037\064\040\006\041\016\042\055\043\021" +
    "\044\011\050\043\051\032\052\023\053\070\054\037\055" +
    "\171\056\167\057\005\061\007\065\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\002\050\007\036\013\174" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\002\001" +
    "\001\000\012\020\203\045\204\046\201\047\200\001\001" +
    "\000\104\002\050\007\036\013\177\014\060\015\051\016" +
    "\103\017\106\023\105\024\031\025\057\026\062\027\077" +
    "\030\040\031\076\032\046\033\030\034\033\035\066\036" +
    "\024\037\064\040\006\041\016\042\055\043\021\044\011" +
    "\050\043\051\032\052\023\053\070\054\037\057\005\061" +
    "\007\065\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\020\203\045\204\046\210\047" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\002\050\007\036\013\213" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\002\001" +
    "\001\000\004\045\215\001\001\000\002\001\001\000\104" +
    "\002\050\007\036\013\217\014\060\015\051\016\103\017" +
    "\106\023\105\024\031\025\057\026\062\027\077\030\040" +
    "\031\076\032\046\033\030\034\033\035\066\036\024\037" +
    "\064\040\006\041\016\042\055\043\021\044\011\050\043" +
    "\051\032\052\023\053\070\054\037\057\005\061\007\065" +
    "\035\001\001\000\002\001\001\000\004\045\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\002\050\007\036\013\225\014\060\015\051\016\103\017" +
    "\106\022\230\023\105\024\031\025\057\026\062\027\077" +
    "\030\040\031\076\032\046\033\030\034\033\035\066\036" +
    "\024\037\064\040\006\041\016\042\055\043\021\044\011" +
    "\050\043\051\032\052\023\053\070\054\037\057\005\061" +
    "\007\065\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\235\012\234\020\233\001\001\000\002\001" +
    "\001\000\006\011\245\020\244\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\002\050\007\036\013\240\014" +
    "\060\015\051\016\103\017\106\023\105\024\031\025\057" +
    "\026\062\027\077\030\040\031\076\032\046\033\030\034" +
    "\033\035\066\036\024\037\064\040\006\041\016\042\055" +
    "\043\021\044\011\050\043\051\032\052\023\053\070\054" +
    "\037\057\005\061\007\065\035\001\001\000\002\001\001" +
    "\000\104\002\050\007\036\013\242\014\060\015\051\016" +
    "\103\017\106\023\105\024\031\025\057\026\062\027\077" +
    "\030\040\031\076\032\046\033\030\034\033\035\066\036" +
    "\024\037\064\040\006\041\016\042\055\043\021\044\011" +
    "\050\043\051\032\052\023\053\070\054\037\057\005\061" +
    "\007\065\035\001\001\000\002\001\001\000\004\012\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\247\020\244\001\001\000\002\001\001\000\104\002\050" +
    "\007\036\013\251\014\060\015\051\016\103\017\106\023" +
    "\105\024\031\025\057\026\062\027\077\030\040\031\076" +
    "\032\046\033\030\034\033\035\066\036\024\037\064\040" +
    "\006\041\016\042\055\043\021\044\011\050\043\051\032" +
    "\052\023\053\070\054\037\057\005\061\007\065\035\001" +
    "\001\000\002\001\001\000\104\002\050\007\036\013\253" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\002\001" +
    "\001\000\104\002\050\007\036\013\255\014\060\015\051" +
    "\016\103\017\106\023\105\024\031\025\057\026\062\027" +
    "\077\030\040\031\076\032\046\033\030\034\033\035\066" +
    "\036\024\037\064\040\006\041\016\042\055\043\021\044" +
    "\011\050\043\051\032\052\023\053\070\054\037\057\005" +
    "\061\007\065\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\261\001\001\000\112\002\050\007\036" +
    "\013\225\014\060\015\051\016\103\017\106\020\222\021" +
    "\224\022\226\023\105\024\031\025\057\026\062\027\077" +
    "\030\040\031\076\032\046\033\030\034\033\035\066\036" +
    "\024\037\064\040\006\041\016\042\055\043\021\044\011" +
    "\050\043\051\032\052\023\053\070\054\037\057\005\061" +
    "\007\065\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\104\002\050\007\036\013\264\014\060\015\051\016" +
    "\103\017\106\023\105\024\031\025\057\026\062\027\077" +
    "\030\040\031\076\032\046\033\030\034\033\035\066\036" +
    "\024\037\064\040\006\041\016\042\055\043\021\044\011" +
    "\050\043\051\032\052\023\053\070\054\037\057\005\061" +
    "\007\065\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\120\002\050\005\272\006\013\007\036\013\044\014" +
    "\060\015\051\016\103\017\106\023\105\024\031\025\057" +
    "\026\062\027\077\030\040\031\076\032\046\033\030\034" +
    "\033\035\066\036\024\037\064\040\006\041\016\042\055" +
    "\043\021\044\011\050\043\051\032\052\023\053\070\054" +
    "\037\057\005\061\007\065\035\066\004\070\074\073\102" +
    "\074\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\276\016\127" +
    "\017\106\023\121\037\064\061\123\001\001\000\016\015" +
    "\275\016\127\017\106\023\121\037\064\061\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\002\050\007" +
    "\036\013\300\014\060\015\051\016\103\017\106\023\105" +
    "\024\031\025\057\026\062\027\077\030\040\031\076\032" +
    "\046\033\030\034\033\035\066\036\024\037\064\040\006" +
    "\041\016\042\055\043\021\044\011\050\043\051\032\052" +
    "\023\053\070\054\037\057\005\061\007\065\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\104\002\050\007" +
    "\036\013\303\014\060\015\051\016\103\017\106\023\105" +
    "\024\031\025\057\026\062\027\077\030\040\031\076\032" +
    "\046\033\030\034\033\035\066\036\024\037\064\040\006" +
    "\041\016\042\055\043\021\044\011\050\043\051\032\052" +
    "\023\053\070\054\037\057\005\061\007\065\035\001\001" +
    "\000\002\001\001\000\104\002\050\007\036\013\305\014" +
    "\060\015\051\016\103\017\106\023\105\024\031\025\057" +
    "\026\062\027\077\030\040\031\076\032\046\033\030\034" +
    "\033\035\066\036\024\037\064\040\006\041\016\042\055" +
    "\043\021\044\011\050\043\051\032\052\023\053\070\054" +
    "\037\057\005\061\007\065\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\104\002\050\007\036\013\310\014" +
    "\060\015\051\016\103\017\106\023\105\024\031\025\057" +
    "\026\062\027\077\030\040\031\076\032\046\033\030\034" +
    "\033\035\066\036\024\037\064\040\006\041\016\042\055" +
    "\043\021\044\011\050\043\051\032\052\023\053\070\054" +
    "\037\057\005\061\007\065\035\001\001\000\002\001\001" +
    "\000\104\002\050\007\036\013\312\014\060\015\051\016" +
    "\103\017\106\023\105\024\031\025\057\026\062\027\077" +
    "\030\040\031\076\032\046\033\030\034\033\035\066\036" +
    "\024\037\064\040\006\041\016\042\055\043\021\044\011" +
    "\050\043\051\032\052\023\053\070\054\037\057\005\061" +
    "\007\065\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\104\002\050\007\036\013\315\014\060\015\051\016" +
    "\103\017\106\023\105\024\031\025\057\026\062\027\077" +
    "\030\040\031\076\032\046\033\030\034\033\035\066\036" +
    "\024\037\064\040\006\041\016\042\055\043\021\044\011" +
    "\050\043\051\032\052\023\053\070\054\037\057\005\061" +
    "\007\065\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\030\040\031\076\032\320\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\002\050\007\036\013\323" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\002\001" +
    "\001\000\104\002\050\007\036\013\325\014\060\015\051" +
    "\016\103\017\106\023\105\024\031\025\057\026\062\027" +
    "\077\030\040\031\076\032\046\033\030\034\033\035\066" +
    "\036\024\037\064\040\006\041\016\042\055\043\021\044" +
    "\011\050\043\051\032\052\023\053\070\054\037\057\005" +
    "\061\007\065\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\002\050\007\036\013\331" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\002\050\007\036\013\334" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\002\050\007\036\013\337" +
    "\014\060\015\051\016\103\017\106\023\105\024\031\025" +
    "\057\026\062\027\077\030\040\031\076\032\046\033\030" +
    "\034\033\035\066\036\024\037\064\040\006\041\016\042" +
    "\055\043\021\044\011\050\043\051\032\052\023\053\070" +
    "\054\037\057\005\061\007\065\035\001\001\000\002\001" +
    "\001\000\104\002\050\007\036\013\341\014\060\015\051" +
    "\016\103\017\106\023\105\024\031\025\057\026\062\027" +
    "\077\030\040\031\076\032\046\033\030\034\033\035\066" +
    "\036\024\037\064\040\006\041\016\042\055\043\021\044" +
    "\011\050\043\051\032\052\023\053\070\054\037\057\005" +
    "\061\007\065\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\104\002\050\007\036\013\344\014\060\015\051" +
    "\016\103\017\106\023\105\024\031\025\057\026\062\027" +
    "\077\030\040\031\076\032\046\033\030\034\033\035\066" +
    "\036\024\037\064\040\006\041\016\042\055\043\021\044" +
    "\011\050\043\051\032\052\023\053\070\054\037\057\005" +
    "\061\007\065\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\347\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\356\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\114\002\050\007\036\013\370" +
    "\014\060\015\051\016\103\017\106\020\365\023\105\024" +
    "\031\025\057\026\062\027\077\030\040\031\076\032\046" +
    "\033\030\034\033\035\066\036\024\037\064\040\006\041" +
    "\016\042\055\043\021\044\011\050\043\051\032\052\023" +
    "\053\070\054\037\057\005\061\007\065\035\067\367\071" +
    "\364\072\366\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\104\002\050\007\036\013\372\014\060\015\051\016\103" +
    "\017\106\023\105\024\031\025\057\026\062\027\077\030" +
    "\040\031\076\032\046\033\030\034\033\035\066\036\024" +
    "\037\064\040\006\041\016\042\055\043\021\044\011\050" +
    "\043\051\032\052\023\053\070\054\037\057\005\061\007" +
    "\065\035\001\001\000\002\001\001\000\106\002\050\007" +
    "\036\013\370\014\060\015\051\016\103\017\106\023\105" +
    "\024\031\025\057\026\062\027\077\030\040\031\076\032" +
    "\046\033\030\034\033\035\066\036\024\037\064\040\006" +
    "\041\016\042\055\043\021\044\011\050\043\051\032\052" +
    "\023\053\070\054\037\057\005\061\007\065\035\067\374" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\015\u0104\016\127\017\106\023" +
    "\121\037\064\061\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FnPlotParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FnPlotParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FnPlotParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  
    }


		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FnPlotParser$actions {
  private final FnPlotParser parser;

  /** Constructor */
  CUP$FnPlotParser$actions(FnPlotParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action_part00000000(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FnPlotParser$result;

      /* select the action based on the action number */
      switch (CUP$FnPlotParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		RESULT = start_val;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FnPlotParser$parser.done_parsing();
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= stmtIf 
            {
              Statement RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IfStatement si = (IfStatement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = si; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= case 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CaseStatement c = (CaseStatement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= print 
            {
              Statement RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StatementPrint p = (StatementPrint)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt ::= println 
            {
              Statement RESULT =null;
		int pnleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pnright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StatementPrintLn pn = (StatementPrintLn)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pn;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // print ::= PRINT LPAREN expression RPAREN 
            {
              StatementPrint RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new StatementPrint(e); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("print",57, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // println ::= PRINTLN LPAREN expression RPAREN 
            {
              StatementPrintLn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new StatementPrintLn(e); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("println",58, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cParamListE ::= cParamList 
            {
              ArrayList<Clause> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Clause> pl = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamListE",55, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cParamListE ::= empty 
            {
              ArrayList<Clause> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamListE",55, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cParamList ::= cParamList COMMA clause 
            {
              ArrayList<Clause> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Clause> pl = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Clause v = (Clause)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamList",56, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cParamList ::= clause 
            {
              ArrayList<Clause> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Clause v = (Clause)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<Clause> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamList",56, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // case ::= CASE LBRACE RSQBRACKET cParamListE LSQBRACKET RBRACE 
            {
              CaseStatement RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Clause> cp = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		 RESULT = new CaseStatement( cp );  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("case",54, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // clause ::= expression COLON expression 
            {
              Clause RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp consq = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new Clause(pred,consq); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("clause",53, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmtIf ::= IF expression THEN expression RSQBRACKET ELSE expression LSQBRACKET 
            {
              IfStatement RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp consq = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int consq2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int consq2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp consq2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	
	RESULT = new IfStatement(pred,consq,consq2);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtIf",52, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vecSize ::= SIZE LPAREN expression RPAREN 
            {
              SizeVectorFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new SizeVectorFunction(v); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSize",51, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vParamListE ::= vParamList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamListE",48, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vParamListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamListE",48, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vParamList ::= vParamList COMMA vecSpec 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamList",49, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vParamList ::= vecSpec 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<Exp> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamList",49, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vector ::= RSQBRACKET COLON RSQBRACKET vParamListE LSQBRACKET COLON LSQBRACKET 
            {
              VectorFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<Exp> v = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		 RESULT = new VectorFunction(v);  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vector",47, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vecSpec ::= expression COLON expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVecSpec(e,f); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSpec",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vecSpec ::= expression 
            {
              Exp RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp en = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = en; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSpec",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              CallFunction RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp func = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp lst = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	RESULT = new CallFunction(func,lst);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("call",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funCall ::= factor LPAREN funCallExpListE RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT= new ExpFunCall(v,el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funCallExpListE ::= funCallExpList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpListE",43, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funCallExpListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpListE",43, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // funCallExpList ::= funCallExpList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
											RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpList",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // funCallExpList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList<Exp> ls = new ArrayList<>(); 
									ls.add(v) ;
									RESULT = ls;
									
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpList",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedures ::= procDef 
            {
              Exp RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction pd = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pd; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedures ::= procDefWithOverflow 
            {
              Exp RESULT =null;
		int pdOverFlowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pdOverFlowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction pdOverFlow = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pdOverFlow; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedures ::= noLimitProc 
            {
              Exp RESULT =null;
		int nlpleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nlpright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction nlp = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=nlp; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // noLimitProc ::= PROC VARIABLE expression 
            {
              ExpFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpFunction(v,body); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("noLimitProc",41, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procDefWithOverflow ::= PROC LPAREN paramListE DOT paramter RPAREN expression 
            {
              ExpFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		ArrayList<ExpPara> p = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int overflowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int overflowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ExpPara overflow = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
	RESULT=new ExpFunction(p,body,overflow); 				

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procDefWithOverflow",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procDef ::= PROC LPAREN RSQBRACKET paramListE LSQBRACKET RPAREN expression 
            {
              ExpFunction RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 

System.out.println("procDeof");
RESULT=new ExpFunction(pl,body); 

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procDef",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramListE ::= paramList 
            {
              ArrayList<ExpPara> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramListE ::= empty 
            {
              ArrayList<ExpPara> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramList ::= paramList COMMA paramter 
            {
              ArrayList<ExpPara> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpPara v = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramList",37, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramList ::= paramter 
            {
              ArrayList<ExpPara> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpPara v = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<ExpPara> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramList",37, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paramter ::= MODIFIER VARIABLE 
            {
              ExpPara RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 

			RESULT = new ExpPara(m,v); 

			
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramter",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paramter ::= VARIABLE 
            {
              ExpPara RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpPara("default",v); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramter",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // substr ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              SubstrFunction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp str = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp end = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	RESULT = new SubstrFunction(str,start,end);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("substr",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // concat ::= allLists CONCAT allLists 
            {
              Exp RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ListFunction l1 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction l2 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpConcat(l1, l2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // isEqual ::= IS_EQUAL LPAREN expression COMMA expression RPAREN 
            {
              IsEqual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
							RESULT = new IsEqual(e1,e2);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isEqual",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // isEqv ::= IS_EQV LPAREN expression COMMA expression RPAREN 
            {
              IsEqv RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
							RESULT = new IsEqv(e1,e2);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isEqv",26, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // allLists ::= list 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("allLists",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // allLists ::= list2 
            {
              ListFunction RESULT =null;
		int lst2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lst2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst2 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=lst2; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("allLists",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list2 ::= RSQBRACKET expListE LSQBRACKET 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
                //System.out.println("inhere");
				RESULT = new ListFunction(lst);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list2",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list ::= LIST LPAREN list2 RPAREN 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
			RESULT = lst;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",22, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expListE ::= expList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expList ::= expression COMMA expList 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
											
											pl.add(0,v); 
											RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expList",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expList ::= NIL 
            {
              ArrayList<Exp> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
									RESULT = new ArrayList<>();
									
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expList",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // isPair ::= IS_PAIR LPAREN expression RPAREN 
            {
              IsPairFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		RESULT = new IsPairFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isPair",21, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // car ::= CAR LPAREN pair RPAREN 
            {
              CarFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		// System.out.println("inside car");
		RESULT = new CarFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("car",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // car ::= CAR LPAREN VARIABLE RPAREN 
            {
              CarFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		// System.out.println("inside car");
		ExpVar var = new ExpVar(p);
		RESULT = new CarFunction(var);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("car",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // cdr ::= CDR LPAREN pair RPAREN 
            {
              CdrFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		RESULT = new CdrFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cdr",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cdr ::= CDR LPAREN VARIABLE RPAREN 
            {
              CdrFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		ExpVar var = new ExpVar(p);
		RESULT = new CdrFunction(var);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cdr",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              PairFunction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		ArrayList<Exp> store = new ArrayList<>();
		store.add(e1);
		store.add(e2);
		RESULT = new PairFunction("pair",store);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = a; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= string 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CarFunction c = (CarFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= isPair 
            {
              Exp RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsPairFunction ip = (IsPairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = ip; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= allLists 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= vecSize 
            {
              Exp RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		SizeVectorFunction vs = (SizeVectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		  RESULT = vs;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= isEqv 
            {
              Exp RESULT =null;
		int eqvleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eqvright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsEqv eqv = (IsEqv)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = eqv; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= isEqual 
            {
              Exp RESULT =null;
		int isEqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int isEqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsEqual isEq = (IsEqual)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = isEq; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= substr 
            {
              Exp RESULT =null;
		int subsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int subsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		SubstrFunction subs = (SubstrFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=subs; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CallFunction c = (CallFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= concat 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= comp 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= n; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expression ::= heap 
            {
              Exp RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int hright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp h = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=h; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expression ::= heapinsert 
            {
              Exp RESULT =null;
		int hileft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int hiright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp hi = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=hi; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expression ::= heapdelete 
            {
              Exp RESULT =null;
		int hdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int hdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp hd = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=hd ; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expression ::= getmin 
            {
              Exp RESULT =null;
		int gmleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int gmright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp gm = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=gm ;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expression ::= procedures 
            {
              Exp RESULT =null;
		int prdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int prdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp prd = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=prd; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expression ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CdrFunction c = (CdrFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // letExp ::= LET LPAREN bindings RPAREN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
           
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("letExp",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binding",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // power ::= factor EXPO power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpExpo(f,p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=f; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comp ::= power EEQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
              System.out.println("in here");
              RESULT=new ExpComp(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comp ::= power GREATER expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		      RESULT= new ExpGreater(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // comp ::= power LESSER expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
		      RESULT= new ExpLesser(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // comp ::= power GREATEREQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  RESULT= new ExpGreaterEqual(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // comp ::= power LESSEREQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
		  RESULT= new ExpLesserEqual(e1,e2);
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // comp ::= power NOTEQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  RESULT= new ExpNotEqual(e1,e2);
		  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // heap ::= HEAP vector 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		VectorFunction e = (VectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
 RESULT= new ExpHeap(e);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("heap",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // heapinsert ::= vector DOT HEAPINSERT LPAREN term RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		VectorFunction e1 = (VectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
//System.out.println("in here");
RESULT = new ExpHeapInsert(e1,p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("heapinsert",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // heapdelete ::= vector DOT HEAPDELETE LPAREN RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		VectorFunction e1 = (VectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		 
RESULT= new ExpHeapDelete(e1);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("heapdelete",33, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // getmin ::= vector DOT GETMIN LPAREN RPAREN 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		VectorFunction e1 = (VectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		
  RESULT= new ExpGetMin(e1);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("getmin",34, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // term ::= power MUL term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMul(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // term ::= power DIV term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpDiv(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // term ::= power MOD term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMod(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // string ::= STR 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpLit( FnPlotValue.make(s) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // complits ::= BOOL_FALSE 
            {
              Boolean RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new Boolean("false"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("complits",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // complits ::= BOOL_TRUE 
            {
              Boolean RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new Boolean("true"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("complits",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // number ::= INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make( ilit ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // number ::= DOUBLE 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // number ::= BIN_INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
Integer val = Integer.parseInt(ilit, 2);

RESULT = FnPlotValue.make(val);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // number ::= HEX_INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
Integer val = Integer.parseInt(ilit, 16);
RESULT = FnPlotValue.make(val);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // number ::= complits 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean ilit = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		FnPlotValue< ? > n = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLit( n ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // factor ::= LBRACE expression RBRACE 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // factor ::= vector 
            {
              Exp RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		VectorFunction vc = (VectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = vc; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // empty ::= 
            {
              Object RESULT =null;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("empty",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FnPlotParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
              return CUP$FnPlotParser$do_action_part00000000(
                               CUP$FnPlotParser$act_num,
                               CUP$FnPlotParser$parser,
                               CUP$FnPlotParser$stack,
                               CUP$FnPlotParser$top);
    }
}

}
