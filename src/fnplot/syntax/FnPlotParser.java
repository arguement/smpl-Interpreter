
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 22 11:09:48 EST 2019
//----------------------------------------------------

package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;
import fnplot.values.FnPlotReal;
import fnplot.syntax.inbuiltfunctions.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 22 11:09:48 EST 2019
  */
public class FnPlotParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FnPlotParser() {super();}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\035\012\000\002\034\010\000\002\033\010\000" +
    "\002\031\003\000\002\031\003\000\002\030\005\000\002" +
    "\027\006\000\002\020\003\000\002\020\003\000\002\021" +
    "\005\000\002\021\003\000\002\026\006\000\002\024\006" +
    "\000\002\024\006\000\002\025\006\000\002\025\006\000" +
    "\002\023\010\000\002\012\003\000\002\012\005\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\006\006\000\002" +
    "\011\005\000\002\007\004\000\002\007\003\000\002\010" +
    "\005\000\002\010\003\000\002\005\006\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\040\004\000" +
    "\002\022\005\000\002\022\003\000\002\037\005\000\002" +
    "\037\005\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\003\000\002\032\003\000" +
    "\002\036\003\000\002\036\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\005" +
    "\000\002\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\054\004\053\005\016\007\051\020\047\022" +
    "\041\035\032\036\011\037\015\040\034\041\045\043\033" +
    "\044\025\045\046\046\012\047\013\050\043\051\007\052" +
    "\017\053\036\054\050\055\055\001\002\000\004\002\221" +
    "\001\002\000\012\006\uffde\021\uffde\024\uffde\025\uffde\001" +
    "\002\000\056\002\001\004\053\005\016\007\051\020\047" +
    "\022\041\035\032\036\011\037\015\040\034\041\045\043" +
    "\033\044\025\045\046\046\012\047\013\050\043\051\007" +
    "\052\017\053\036\054\050\055\055\001\002\000\012\006" +
    "\uffc5\021\uffc5\024\uffc5\025\uffc5\001\002\000\060\002\ufffd" +
    "\004\ufffd\005\ufffd\007\ufffd\020\ufffd\022\ufffd\023\ufffd\035" +
    "\ufffd\036\ufffd\037\ufffd\040\ufffd\041\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\054\ufffd\055\ufffd\001\002\000\004\005\214\001\002" +
    "\000\042\006\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\016" +
    "\uffc2\021\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\001\002\000\042\006" +
    "\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\021\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\001\002\000\012\006\uffdf\021\uffdf" +
    "\024\uffdf\025\uffdf\001\002\000\004\005\207\001\002\000" +
    "\054\004\053\005\016\007\051\020\047\022\041\035\032" +
    "\036\011\037\015\040\034\041\045\043\033\044\025\045" +
    "\046\046\012\047\013\050\075\051\007\052\017\053\036" +
    "\054\050\055\055\001\002\000\042\006\uffc3\012\uffc3\013" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\021\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034" +
    "\uffc3\001\002\000\012\006\uffe7\021\uffe7\024\uffe7\025\uffe7" +
    "\001\002\000\012\006\uffe6\021\uffe6\024\uffe6\025\uffe6\001" +
    "\002\000\012\006\uffe1\021\uffe1\024\uffe1\025\uffe1\001\002" +
    "\000\012\006\uffea\021\uffea\024\uffea\025\uffea\001\002\000" +
    "\012\006\ufff8\021\ufff8\024\ufff8\025\ufff8\001\002\000\004" +
    "\005\200\001\002\000\004\025\177\001\002\000\012\006" +
    "\uffe2\021\uffe2\024\uffe2\025\uffe2\001\002\000\012\006\uffdd" +
    "\021\uffdd\024\uffdd\025\uffdd\001\002\000\016\006\uffd3\012" +
    "\uffd3\013\uffd3\021\uffd3\024\uffd3\025\uffd3\001\002\000\004" +
    "\005\172\001\002\000\004\005\165\001\002\000\004\005" +
    "\162\001\002\000\012\006\uffe5\021\uffe5\024\uffe5\025\uffe5" +
    "\001\002\000\042\006\uffc4\012\uffc4\013\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\021\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\001\002\000" +
    "\016\006\uffe8\012\111\013\112\021\uffe8\024\uffe8\025\uffe8" +
    "\001\002\000\012\006\uffe4\021\uffe4\024\uffe4\025\uffe4\001" +
    "\002\000\054\004\053\005\016\007\051\020\047\022\041" +
    "\035\032\036\011\037\015\040\034\041\045\043\033\044" +
    "\025\045\046\046\012\047\013\050\043\051\007\052\017" +
    "\053\036\054\050\055\055\001\002\000\042\006\uffbe\012" +
    "\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\021\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\001\002\000\036\012\uffbc\013\uffbc\014\uffbc" +
    "\015\uffbc\016\uffbc\017\154\025\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\001\002\000\012" +
    "\006\uffe0\021\uffe0\024\uffe0\025\uffe0\001\002\000\004\005" +
    "\151\001\002\000\004\005\142\001\002\000\006\021\uffba" +
    "\050\130\001\002\000\042\006\uffc0\012\uffc0\013\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\021\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\027\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\001" +
    "\002\000\060\004\053\005\016\007\051\010\uffba\020\047" +
    "\022\041\035\032\036\011\037\015\040\034\041\045\042" +
    "\116\043\033\044\025\045\046\046\012\047\013\050\075" +
    "\051\007\052\017\053\036\054\050\055\055\001\002\000" +
    "\012\006\ufff7\021\ufff7\024\ufff7\025\ufff7\001\002\000\022" +
    "\005\016\046\012\047\013\050\075\052\017\053\036\054" +
    "\050\055\055\001\002\000\012\006\uffe3\021\uffe3\024\uffe3" +
    "\025\uffe3\001\002\000\042\006\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\016\uffbf\021\uffbf\024\uffbf\025\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\001" +
    "\002\000\042\006\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\021\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\034\106\001\002\000\040" +
    "\006\uffc6\012\uffc6\013\uffc6\014\072\015\070\016\064\021" +
    "\uffc6\024\uffc6\025\uffc6\026\065\027\063\030\071\031\067" +
    "\032\062\033\066\001\002\000\060\002\ufffe\004\ufffe\005" +
    "\ufffe\007\ufffe\020\ufffe\022\ufffe\023\ufffe\035\ufffe\036\ufffe" +
    "\037\ufffe\040\ufffe\041\ufffe\043\ufffe\044\ufffe\045\ufffe\046" +
    "\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe" +
    "\055\ufffe\001\002\000\042\006\uffbd\012\uffbd\013\uffbd\014" +
    "\uffbd\015\uffbd\016\uffbd\021\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\001" +
    "\002\000\054\004\053\005\016\007\051\020\047\022\041" +
    "\035\032\036\011\037\015\040\034\041\045\043\033\044" +
    "\025\045\046\046\012\047\013\050\075\051\007\052\017" +
    "\053\036\054\050\055\055\001\002\000\054\004\053\005" +
    "\016\007\051\020\047\022\041\035\032\036\011\037\015" +
    "\040\034\041\045\043\033\044\025\045\046\046\012\047" +
    "\013\050\075\051\007\052\017\053\036\054\050\055\055" +
    "\001\002\000\022\005\016\046\012\047\013\050\075\052" +
    "\017\053\036\054\050\055\055\001\002\000\054\004\053" +
    "\005\016\007\051\020\047\022\041\035\032\036\011\037" +
    "\015\040\034\041\045\043\033\044\025\045\046\046\012" +
    "\047\013\050\075\051\007\052\017\053\036\054\050\055" +
    "\055\001\002\000\054\004\053\005\016\007\051\020\047" +
    "\022\041\035\032\036\011\037\015\040\034\041\045\043" +
    "\033\044\025\045\046\046\012\047\013\050\075\051\007" +
    "\052\017\053\036\054\050\055\055\001\002\000\054\004" +
    "\053\005\016\007\051\020\047\022\041\035\032\036\011" +
    "\037\015\040\034\041\045\043\033\044\025\045\046\046" +
    "\012\047\013\050\075\051\007\052\017\053\036\054\050" +
    "\055\055\001\002\000\022\005\016\046\012\047\013\050" +
    "\075\052\017\053\036\054\050\055\055\001\002\000\054" +
    "\004\053\005\016\007\051\020\047\022\041\035\032\036" +
    "\011\037\015\040\034\041\045\043\033\044\025\045\046" +
    "\046\012\047\013\050\075\051\007\052\017\053\036\054" +
    "\050\055\055\001\002\000\022\005\016\046\012\047\013" +
    "\050\075\052\017\053\036\054\050\055\055\001\002\000" +
    "\024\006\uffc6\012\uffc6\013\uffc6\014\072\015\070\016\064" +
    "\021\uffc6\024\uffc6\025\uffc6\001\002\000\016\006\uffc9\012" +
    "\uffc9\013\uffc9\021\uffc9\024\uffc9\025\uffc9\001\002\000\042" +
    "\006\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\021" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\001\002\000\012\006\uffcc\021" +
    "\uffcc\024\uffcc\025\uffcc\001\002\000\016\006\uffc8\012\uffc8" +
    "\013\uffc8\021\uffc8\024\uffc8\025\uffc8\001\002\000\012\006" +
    "\uffcb\021\uffcb\024\uffcb\025\uffcb\001\002\000\012\006\uffcf" +
    "\021\uffcf\024\uffcf\025\uffcf\001\002\000\012\006\uffce\021" +
    "\uffce\024\uffce\025\uffce\001\002\000\016\006\uffc7\012\uffc7" +
    "\013\uffc7\021\uffc7\024\uffc7\025\uffc7\001\002\000\012\006" +
    "\uffcd\021\uffcd\024\uffcd\025\uffcd\001\002\000\012\006\uffca" +
    "\021\uffca\024\uffca\025\uffca\001\002\000\022\005\016\046" +
    "\012\047\013\050\075\052\017\053\036\054\050\055\055" +
    "\001\002\000\040\006\uffd1\012\uffd1\013\uffd1\014\uffd1\015" +
    "\uffd1\016\uffd1\021\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\001\002\000\016\006" +
    "\uffd2\012\111\013\112\021\uffd2\024\uffd2\025\uffd2\001\002" +
    "\000\022\005\016\046\012\047\013\050\075\052\017\053" +
    "\036\054\050\055\055\001\002\000\022\005\016\046\012" +
    "\047\013\050\075\052\017\053\036\054\050\055\055\001" +
    "\002\000\016\006\uffd4\012\uffd4\013\uffd4\021\uffd4\024\uffd4" +
    "\025\uffd4\001\002\000\016\006\uffd5\012\uffd5\013\uffd5\021" +
    "\uffd5\024\uffd5\025\uffd5\001\002\000\004\010\ufff3\001\002" +
    "\000\004\010\ufff1\001\002\000\004\010\124\001\002\000" +
    "\004\024\122\001\002\000\004\010\ufff4\001\002\000\056" +
    "\004\053\005\016\007\051\020\047\022\041\035\032\036" +
    "\011\037\015\040\034\041\045\042\116\043\033\044\025" +
    "\045\046\046\012\047\013\050\075\051\007\052\017\053" +
    "\036\054\050\055\055\001\002\000\004\010\ufff2\001\002" +
    "\000\012\006\ufff6\021\ufff6\024\ufff6\025\ufff6\001\002\000" +
    "\004\021\uffd9\001\002\000\006\021\uffba\024\135\001\002" +
    "\000\004\021\133\001\002\000\004\017\131\001\002\000" +
    "\054\004\053\005\016\007\051\020\047\022\041\035\032" +
    "\036\011\037\015\040\034\041\045\043\033\044\025\045" +
    "\046\046\012\047\013\050\075\051\007\052\017\053\036" +
    "\054\050\055\055\001\002\000\006\021\uffdb\024\uffdb\001" +
    "\002\000\054\004\053\005\016\007\051\020\047\022\041" +
    "\035\032\036\011\037\015\040\034\041\045\043\033\044" +
    "\025\045\046\046\012\047\013\050\075\051\007\052\017" +
    "\053\036\054\050\055\055\001\002\000\012\006\uffdc\021" +
    "\uffdc\024\uffdc\025\uffdc\001\002\000\004\050\130\001\002" +
    "\000\004\021\uffd7\001\002\000\004\021\uffda\001\002\000" +
    "\006\021\uffba\024\135\001\002\000\004\021\uffd8\001\002" +
    "\000\054\004\053\005\016\007\051\020\047\022\041\035" +
    "\032\036\011\037\015\040\034\041\045\043\033\044\025" +
    "\045\046\046\012\047\013\050\075\051\007\052\017\053" +
    "\036\054\050\055\055\001\002\000\004\024\144\001\002" +
    "\000\054\004\053\005\016\007\051\020\047\022\041\035" +
    "\032\036\011\037\015\040\034\041\045\043\033\044\025" +
    "\045\046\046\012\047\013\050\075\051\007\052\017\053" +
    "\036\054\050\055\055\001\002\000\004\024\146\001\002" +
    "\000\054\004\053\005\016\007\051\020\047\022\041\035" +
    "\032\036\011\037\015\040\034\041\045\043\033\044\025" +
    "\045\046\046\012\047\013\050\075\051\007\052\017\053" +
    "\036\054\050\055\055\001\002\000\004\006\150\001\002" +
    "\000\012\006\ufffb\021\ufffb\024\ufffb\025\ufffb\001\002\000" +
    "\004\007\051\001\002\000\004\006\153\001\002\000\012" +
    "\006\ufff5\021\ufff5\024\ufff5\025\ufff5\001\002\000\054\004" +
    "\053\005\016\007\051\020\047\022\041\035\032\036\011" +
    "\037\015\040\034\041\045\043\033\044\025\045\046\046" +
    "\012\047\013\050\075\051\007\052\017\053\036\054\050" +
    "\055\055\001\002\000\004\025\156\001\002\000\060\002" +
    "\uffd6\004\uffd6\005\uffd6\007\uffd6\020\uffd6\022\uffd6\023\uffd6" +
    "\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\001\002\000\056\004\053\005" +
    "\016\007\051\020\047\022\041\023\160\035\032\036\011" +
    "\037\015\040\034\041\045\043\033\044\025\045\046\046" +
    "\012\047\013\050\043\051\007\052\017\053\036\054\050" +
    "\055\055\001\002\000\012\006\uffe9\021\uffe9\024\uffe9\025" +
    "\uffe9\001\002\000\060\002\uffff\004\uffff\005\uffff\007\uffff" +
    "\020\uffff\022\uffff\023\uffff\035\uffff\036\uffff\037\uffff\040" +
    "\uffff\041\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff" +
    "\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\055\uffff\001" +
    "\002\000\054\004\053\005\016\007\051\020\047\022\041" +
    "\035\032\036\011\037\015\040\034\041\045\043\033\044" +
    "\025\045\046\046\012\047\013\050\075\051\007\052\017" +
    "\053\036\054\050\055\055\001\002\000\004\006\164\001" +
    "\002\000\012\006\ufff0\021\ufff0\024\ufff0\025\ufff0\001\002" +
    "\000\054\004\053\005\016\007\051\020\047\022\041\035" +
    "\032\036\011\037\015\040\034\041\045\043\033\044\025" +
    "\045\046\046\012\047\013\050\075\051\007\052\017\053" +
    "\036\054\050\055\055\001\002\000\004\024\167\001\002" +
    "\000\054\004\053\005\016\007\051\020\047\022\041\035" +
    "\032\036\011\037\015\040\034\041\045\043\033\044\025" +
    "\045\046\046\012\047\013\050\075\051\007\052\017\053" +
    "\036\054\050\055\055\001\002\000\004\006\171\001\002" +
    "\000\012\006\ufff9\021\ufff9\024\ufff9\025\ufff9\001\002\000" +
    "\054\004\053\005\016\007\051\020\047\022\041\035\032" +
    "\036\011\037\015\040\034\041\045\043\033\044\025\045" +
    "\046\046\012\047\013\050\075\051\007\052\017\053\036" +
    "\054\050\055\055\001\002\000\004\024\174\001\002\000" +
    "\054\004\053\005\016\007\051\020\047\022\041\035\032" +
    "\036\011\037\015\040\034\041\045\043\033\044\025\045" +
    "\046\046\012\047\013\050\075\051\007\052\017\053\036" +
    "\054\050\055\055\001\002\000\004\006\176\001\002\000" +
    "\012\006\uffeb\021\uffeb\024\uffeb\025\uffeb\001\002\000\060" +
    "\002\ufffc\004\ufffc\005\ufffc\007\ufffc\020\ufffc\022\ufffc\023" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\001\002\000\054\004\053" +
    "\005\016\007\051\020\047\022\041\035\032\036\011\037" +
    "\015\040\034\041\045\043\033\044\025\045\046\046\012" +
    "\047\013\050\075\051\007\052\017\053\036\054\050\055" +
    "\055\001\002\000\004\024\202\001\002\000\054\004\053" +
    "\005\016\007\051\020\047\022\041\035\032\036\011\037" +
    "\015\040\034\041\045\043\033\044\025\045\046\046\012" +
    "\047\013\050\075\051\007\052\017\053\036\054\050\055" +
    "\055\001\002\000\004\006\204\001\002\000\012\006\ufffa" +
    "\021\ufffa\024\ufffa\025\ufffa\001\002\000\004\006\206\001" +
    "\002\000\042\006\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb" +
    "\016\uffbb\021\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\001\002\000\006" +
    "\035\032\050\211\001\002\000\004\006\213\001\002\000" +
    "\004\006\212\001\002\000\012\006\uffec\021\uffec\024\uffec" +
    "\025\uffec\001\002\000\012\006\uffed\021\uffed\024\uffed\025" +
    "\uffed\001\002\000\006\035\032\050\216\001\002\000\004" +
    "\006\220\001\002\000\004\006\217\001\002\000\012\006" +
    "\uffee\021\uffee\024\uffee\025\uffee\001\002\000\012\006\uffef" +
    "\021\uffef\024\uffef\025\uffef\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\064\002\003\003\005\004\057\005\007\006" +
    "\022\012\025\013\036\014\030\015\055\016\060\022\056" +
    "\023\020\024\034\025\037\026\053\027\023\030\051\031" +
    "\026\032\017\033\021\034\043\035\013\036\041\037\004" +
    "\040\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\060\004\160\005\007\006\022\012\025\013\036\014\030" +
    "\015\055\016\060\022\056\023\020\024\034\025\037\026" +
    "\053\027\023\030\051\031\026\032\017\033\021\034\043" +
    "\035\013\036\041\037\004\040\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\022\012\204\013\036\014\030\015\055\016\060" +
    "\022\056\023\020\024\034\025\037\026\053\027\023\030" +
    "\051\031\026\032\017\033\021\034\043\035\013\036\041" +
    "\037\004\040\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\156\004\057\005\007\006\022\012\025\013" +
    "\036\014\030\015\055\016\060\022\056\023\020\024\034" +
    "\025\037\026\053\027\023\030\051\031\026\032\017\033" +
    "\021\034\043\035\013\036\041\037\004\040\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\126\011\125" +
    "\017\124\001\001\000\002\001\001\000\062\006\022\012" +
    "\117\013\036\014\030\015\055\016\060\017\114\020\116" +
    "\021\120\022\056\023\020\024\034\025\037\026\053\027" +
    "\023\030\051\031\026\032\017\033\021\034\043\035\013" +
    "\036\041\037\004\040\027\001\001\000\002\001\001\000" +
    "\016\013\107\014\030\015\055\016\060\022\072\036\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\054\006\022\012\104\013\036\014\030\015\055\016" +
    "\060\022\056\023\020\024\034\025\037\026\053\027\023" +
    "\030\051\031\026\032\017\033\021\034\043\035\013\036" +
    "\041\037\004\040\027\001\001\000\054\006\022\012\103" +
    "\013\036\014\030\015\055\016\060\022\056\023\020\024" +
    "\034\025\037\026\053\027\023\030\051\031\026\032\017" +
    "\033\021\034\043\035\013\036\041\037\004\040\027\001" +
    "\001\000\014\014\102\015\055\016\060\022\072\036\041" +
    "\001\001\000\054\006\022\012\101\013\036\014\030\015" +
    "\055\016\060\022\056\023\020\024\034\025\037\026\053" +
    "\027\023\030\051\031\026\032\017\033\021\034\043\035" +
    "\013\036\041\037\004\040\027\001\001\000\054\006\022" +
    "\012\100\013\036\014\030\015\055\016\060\022\056\023" +
    "\020\024\034\025\037\026\053\027\023\030\051\031\026" +
    "\032\017\033\021\034\043\035\013\036\041\037\004\040" +
    "\027\001\001\000\054\006\022\012\077\013\036\014\030" +
    "\015\055\016\060\022\056\023\020\024\034\025\037\026" +
    "\053\027\023\030\051\031\026\032\017\033\021\034\043" +
    "\035\013\036\041\037\004\040\027\001\001\000\014\014" +
    "\076\015\055\016\060\022\072\036\041\001\001\000\054" +
    "\006\022\012\075\013\036\014\030\015\055\016\060\022" +
    "\056\023\020\024\034\025\037\026\053\027\023\030\051" +
    "\031\026\032\017\033\021\034\043\035\013\036\041\037" +
    "\004\040\027\001\001\000\014\014\073\015\055\016\060" +
    "\022\072\036\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\015\055\016\060\022\106\036\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\014\113\015\055\016\060" +
    "\022\072\036\041\001\001\000\014\014\112\015\055\016" +
    "\060\022\072\036\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\006\022" +
    "\012\117\013\036\014\030\015\055\016\060\021\122\022" +
    "\056\023\020\024\034\025\037\026\053\027\023\030\051" +
    "\031\026\032\017\033\021\034\043\035\013\036\041\037" +
    "\004\040\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\136\017\135\001\001\000" +
    "\002\001\001\000\002\001\001\000\054\006\022\012\131" +
    "\013\036\014\030\015\055\016\060\022\056\023\020\024" +
    "\034\025\037\026\053\027\023\030\051\031\026\032\017" +
    "\033\021\034\043\035\013\036\041\037\004\040\027\001" +
    "\001\000\002\001\001\000\054\006\022\012\133\013\036" +
    "\014\030\015\055\016\060\022\056\023\020\024\034\025" +
    "\037\026\053\027\023\030\051\031\026\032\017\033\021" +
    "\034\043\035\013\036\041\037\004\040\027\001\001\000" +
    "\002\001\001\000\004\011\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\140\017\135\001\001\000" +
    "\002\001\001\000\054\006\022\012\142\013\036\014\030" +
    "\015\055\016\060\022\056\023\020\024\034\025\037\026" +
    "\053\027\023\030\051\031\026\032\017\033\021\034\043" +
    "\035\013\036\041\037\004\040\027\001\001\000\002\001" +
    "\001\000\054\006\022\012\144\013\036\014\030\015\055" +
    "\016\060\022\056\023\020\024\034\025\037\026\053\027" +
    "\023\030\051\031\026\032\017\033\021\034\043\035\013" +
    "\036\041\037\004\040\027\001\001\000\002\001\001\000" +
    "\054\006\022\012\146\013\036\014\030\015\055\016\060" +
    "\022\056\023\020\024\034\025\037\026\053\027\023\030" +
    "\051\031\026\032\017\033\021\034\043\035\013\036\041" +
    "\037\004\040\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\054\006\022\012\154\013\036\014\030\015" +
    "\055\016\060\022\056\023\020\024\034\025\037\026\053" +
    "\027\023\030\051\031\026\032\017\033\021\034\043\035" +
    "\013\036\041\037\004\040\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\060\004\160\005\007\006\022\012" +
    "\025\013\036\014\030\015\055\016\060\022\056\023\020" +
    "\024\034\025\037\026\053\027\023\030\051\031\026\032" +
    "\017\033\021\034\043\035\013\036\041\037\004\040\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\006" +
    "\022\012\162\013\036\014\030\015\055\016\060\022\056" +
    "\023\020\024\034\025\037\026\053\027\023\030\051\031" +
    "\026\032\017\033\021\034\043\035\013\036\041\037\004" +
    "\040\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\022\012\165\013\036\014\030\015\055\016\060" +
    "\022\056\023\020\024\034\025\037\026\053\027\023\030" +
    "\051\031\026\032\017\033\021\034\043\035\013\036\041" +
    "\037\004\040\027\001\001\000\002\001\001\000\054\006" +
    "\022\012\167\013\036\014\030\015\055\016\060\022\056" +
    "\023\020\024\034\025\037\026\053\027\023\030\051\031" +
    "\026\032\017\033\021\034\043\035\013\036\041\037\004" +
    "\040\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\006\022\012\172\013\036\014\030\015\055\016\060" +
    "\022\056\023\020\024\034\025\037\026\053\027\023\030" +
    "\051\031\026\032\017\033\021\034\043\035\013\036\041" +
    "\037\004\040\027\001\001\000\002\001\001\000\054\006" +
    "\022\012\174\013\036\014\030\015\055\016\060\022\056" +
    "\023\020\024\034\025\037\026\053\027\023\030\051\031" +
    "\026\032\017\033\021\034\043\035\013\036\041\037\004" +
    "\040\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\006\022\012\200\013\036\014\030" +
    "\015\055\016\060\022\056\023\020\024\034\025\037\026" +
    "\053\027\023\030\051\031\026\032\017\033\021\034\043" +
    "\035\013\036\041\037\004\040\027\001\001\000\002\001" +
    "\001\000\054\006\022\012\202\013\036\014\030\015\055" +
    "\016\060\022\056\023\020\024\034\025\037\026\053\027" +
    "\023\030\051\031\026\032\017\033\021\034\043\035\013" +
    "\036\041\037\004\040\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FnPlotParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FnPlotParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FnPlotParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  
    }


		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FnPlotParser$actions {
  private final FnPlotParser parser;

  /** Constructor */
  CUP$FnPlotParser$actions(FnPlotParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FnPlotParser$result;

      /* select the action based on the action number */
      switch (CUP$FnPlotParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // empty ::= 
            {
              Object RESULT =null;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("empty",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		FnPlotValue< ? > n = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLit( n ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // number ::= complits 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean ilit = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // number ::= HEX_INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
Integer val = Integer.parseInt(ilit, 16);
RESULT = FnPlotValue.make(val);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // number ::= BIN_INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
Integer val = Integer.parseInt(ilit, 2);
RESULT = FnPlotValue.make(val);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // number ::= DOUBLE 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // number ::= INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make( ilit ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // complits ::= BOOL_TRUE 
            {
              Boolean RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new Boolean("true"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("complits",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // complits ::= BOOL_FALSE 
            {
              Boolean RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new Boolean("false"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("complits",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // string ::= STR 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpLit( FnPlotValue.make(s) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // term ::= power MOD term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMod(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= power DIV term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpDiv(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= power MUL term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMul(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comp ::= power NOTEQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  RESULT= new ExpNotEqual(e1,e2);
		  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comp ::= power LESSEREQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
		  RESULT= new ExpLesserEqual(e1,e2);
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // comp ::= power GREATEREQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  RESULT= new ExpGreaterEqual(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // comp ::= power LESSER expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
		      RESULT= new ExpLesser(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // comp ::= power GREATER expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		      RESULT= new ExpGreater(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // comp ::= power EEQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
              System.out.println("in here");
              RESULT=new ExpComp(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=f; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // power ::= factor EXPO power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpExpo(f,p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bitOps ::= BITNOT arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpBitNot(a); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bitOps",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binding",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // letExp ::= LET bindings IN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
           
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("letExp",4, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= bitOps 
            {
              Exp RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp b = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=b; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= comp 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= n; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= substr 
            {
              Exp RESULT =null;
		int subsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int subsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		SubstrFunction subs = (SubstrFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=subs; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= isEqual 
            {
              Exp RESULT =null;
		int isEqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int isEqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsEqual isEq = (IsEqual)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = isEq; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= isEqv 
            {
              Exp RESULT =null;
		int eqvleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eqvright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsEqv eqv = (IsEqv)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = eqv; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= allLists 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= isPair 
            {
              Exp RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsPairFunction ip = (IsPairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = ip; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CdrFunction c = (CdrFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CarFunction c = (CarFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= string 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = a; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              PairFunction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		ArrayList<Exp> store = new ArrayList<>();
		store.add(e1);
		store.add(e2);
		RESULT = new PairFunction("pair",store);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cdr ::= CDR LPAREN VARIABLE RPAREN 
            {
              CdrFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		ExpVar var = new ExpVar(p);
		RESULT = new CdrFunction(var);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cdr",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cdr ::= CDR LPAREN pair RPAREN 
            {
              CdrFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		RESULT = new CdrFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cdr",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // car ::= CAR LPAREN VARIABLE RPAREN 
            {
              CarFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		// System.out.println("inside car");
		ExpVar var = new ExpVar(p);
		RESULT = new CarFunction(var);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("car",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // car ::= CAR LPAREN pair RPAREN 
            {
              CarFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		// System.out.println("inside car");
		RESULT = new CarFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("car",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // isPair ::= IS_PAIR LPAREN expression RPAREN 
            {
              IsPairFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		RESULT = new IsPairFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isPair",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expList ::= NIL 
            {
              ArrayList<Exp> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
									RESULT = new ArrayList<>();
									
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expList",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expList ::= expression COMMA expList 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
											
											pl.add(0,v); 
											RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expList",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expListE ::= expList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // list ::= LIST LPAREN list2 RPAREN 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
			RESULT = lst;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",21, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // list2 ::= RSQBRACKET expListE LSQBRACKET 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
				RESULT = new ListFunction(lst);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list2",22, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // allLists ::= list2 
            {
              ListFunction RESULT =null;
		int lst2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lst2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst2 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=lst2; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("allLists",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // allLists ::= list 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("allLists",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // isEqv ::= IS_EQV LPAREN expression COMMA expression RPAREN 
            {
              IsEqv RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
							RESULT = new IsEqv(e1,e2);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isEqv",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // isEqual ::= IS_EQUAL LPAREN expression COMMA expression RPAREN 
            {
              IsEqual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
							RESULT = new IsEqual(e1,e2);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isEqual",26, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // substr ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              SubstrFunction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp str = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp end = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	RESULT = new SubstrFunction(str,start,end);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("substr",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		RESULT = start_val;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FnPlotParser$parser.done_parsing();
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

