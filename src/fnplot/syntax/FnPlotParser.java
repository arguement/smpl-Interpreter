
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;
import fnplot.values.FnPlotReal;
import fnplot.syntax.inbuiltfunctions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FnPlotParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public FnPlotParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public FnPlotParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\151\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\004\000\002\061\012\000" +
    "\002\060\006\000\002\057\006\000\002\055\003\000\002" +
    "\055\003\000\002\056\005\000\002\056\003\000\002\054" +
    "\011\000\002\053\005\000\002\053\003\000\002\052\010" +
    "\000\002\047\006\000\002\050\003\000\002\050\003\000" +
    "\002\051\005\000\002\051\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\046\005\000\002\044" +
    "\011\000\002\043\011\000\002\041\003\000\002\041\003" +
    "\000\002\042\005\000\002\042\003\000\002\040\004\000" +
    "\002\040\003\000\002\035\012\000\002\034\010\000\002" +
    "\033\010\000\002\031\003\000\002\031\003\000\002\030" +
    "\005\000\002\027\006\000\002\020\003\000\002\020\003" +
    "\000\002\021\005\000\002\021\003\000\002\026\006\000" +
    "\002\024\006\000\002\024\006\000\002\025\006\000\002" +
    "\025\006\000\002\023\010\000\002\012\003\000\002\012" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\006\006" +
    "\000\002\011\005\000\002\007\004\000\002\007\003\000" +
    "\002\010\005\000\002\010\003\000\002\005\006\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\022" +
    "\005\000\002\022\003\000\002\037\005\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\003\000\002\032\003\000\002\036" +
    "\003\000\002\036\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\005\000\002" +
    "\015\003\000\002\017\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\062\004\020\006\064\017\062\021\053\034" +
    "\044\035\014\036\017\037\046\040\060\042\045\043\036" +
    "\044\061\045\066\047\030\050\042\051\035\054\015\055" +
    "\016\056\054\057\012\060\023\061\050\062\063\063\070" +
    "\001\002\000\004\002\335\001\002\000\066\002\ufffb\004" +
    "\ufffb\006\ufffb\017\ufffb\021\ufffb\022\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\042\ufffb\043\ufffb\044\ufffb\045" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\054\ufffb\055\ufffb\056\ufffb" +
    "\057\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\001\002\000" +
    "\022\005\uffbe\006\uffbe\007\uffbe\010\uffbe\020\uffbe\023\uffbe" +
    "\024\uffbe\052\uffbe\001\002\000\054\004\uff9a\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a" +
    "\015\uff9a\020\uff9a\023\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\030\uff9a\031\uff9a\032\uff9a\033\uff9a\052\uff9a\001\002" +
    "\000\022\005\uffbd\006\uffbd\007\uffbd\010\uffbd\020\uffbd\023" +
    "\uffbd\024\uffbd\052\uffbd\001\002\000\064\002\001\004\020" +
    "\006\064\017\062\021\053\034\044\035\014\036\017\037" +
    "\046\040\060\042\045\043\036\044\061\045\066\047\030" +
    "\050\042\051\035\054\015\055\016\056\054\057\012\060" +
    "\023\061\050\062\063\063\070\001\002\000\022\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\020\uffa5\023\uffa5\024\uffa5\052" +
    "\uffa5\001\002\000\066\002\ufffd\004\ufffd\006\ufffd\017\ufffd" +
    "\021\ufffd\022\ufffd\034\ufffd\035\ufffd\036\ufffd\037\ufffd\040" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061" +
    "\ufffd\062\ufffd\063\ufffd\001\002\000\004\004\330\001\002" +
    "\000\054\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\020\uffa2\023\uffa2" +
    "\024\uffa2\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\032" +
    "\uffa2\033\uffa2\052\uffa2\001\002\000\054\004\uffa1\005\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014" +
    "\uffa1\015\uffa1\020\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1" +
    "\027\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\052\uffa1\001" +
    "\002\000\004\004\323\001\002\000\060\004\020\006\064" +
    "\017\062\021\053\034\044\035\014\036\017\037\046\040" +
    "\060\042\045\043\036\044\061\045\066\047\030\050\042" +
    "\054\015\055\016\056\112\057\012\060\023\061\050\062" +
    "\063\063\070\001\002\000\022\005\uffbf\006\uffbf\007\uffbf" +
    "\010\uffbf\020\uffbf\023\uffbf\024\uffbf\052\uffbf\001\002\000" +
    "\022\005\uffc8\006\uffc8\007\uffc8\010\uffc8\020\uffc8\023\uffc8" +
    "\024\uffc8\052\uffc8\001\002\000\054\004\uffa3\005\uffa3\006" +
    "\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\020\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\030\uffa3\031\uffa3\032\uffa3\033\uffa3\052\uffa3\001\002" +
    "\000\022\005\uffc9\006\uffc9\007\uffc9\010\uffc9\020\uffc9\023" +
    "\uffc9\024\uffc9\052\uffc9\001\002\000\022\005\uffc7\006\uffc7" +
    "\007\uffc7\010\uffc7\020\uffc7\023\uffc7\024\uffc7\052\uffc7\001" +
    "\002\000\022\005\uffe8\006\uffe8\007\uffe8\010\uffe8\020\uffe8" +
    "\023\uffe8\024\uffe8\052\uffe8\001\002\000\022\005\uffc1\006" +
    "\uffc1\007\uffc1\010\uffc1\020\uffc1\023\uffc1\024\uffc1\052\uffc1" +
    "\001\002\000\004\004\314\001\002\000\022\005\uffc2\006" +
    "\uffc2\007\uffc2\010\uffc2\020\uffc2\023\uffc2\024\uffc2\052\uffc2" +
    "\001\002\000\022\005\uffcc\006\uffcc\007\uffcc\010\uffcc\020" +
    "\uffcc\023\uffcc\024\uffcc\052\uffcc\001\002\000\022\005\uffbc" +
    "\006\uffbc\007\uffbc\010\uffbc\020\uffbc\023\uffbc\024\uffbc\052" +
    "\uffbc\001\002\000\022\005\uffda\006\uffda\007\uffda\010\uffda" +
    "\020\uffda\023\uffda\024\uffda\052\uffda\001\002\000\060\004" +
    "\020\006\064\017\062\021\053\034\044\035\014\036\017" +
    "\037\046\040\060\042\045\043\036\044\061\045\066\047" +
    "\030\050\042\054\015\055\016\056\112\057\012\060\023" +
    "\061\050\062\063\063\070\001\002\000\004\004\300\001" +
    "\002\000\022\005\uffe9\006\uffe9\007\uffe9\010\uffe9\020\uffe9" +
    "\023\uffe9\024\uffe9\052\uffe9\001\002\000\006\006\274\024" +
    "\275\001\002\000\022\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\020\uffc3\023\uffc3\024\uffc3\052\uffc3\001\002\000\004\004" +
    "\271\001\002\000\026\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\020\uffb2\023\uffb2\024\uffb2\052\uffb2\001" +
    "\002\000\004\004\264\001\002\000\004\004\257\001\002" +
    "\000\004\004\254\001\002\000\022\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\020\uffc6\023\uffc6\024\uffc6\052\uffc6\001\002" +
    "\000\054\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\020\uffa4\023\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\030\uffa4\031\uffa4\032" +
    "\uffa4\033\uffa4\052\uffa4\001\002\000\026\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\011\250\012\251\020\uffca\023\uffca\024" +
    "\uffca\052\uffca\001\002\000\022\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\020\uffc5\023\uffc5\024\uffc5\052\uffc5\001\002\000" +
    "\062\004\020\006\064\017\062\021\053\034\044\035\014" +
    "\036\017\037\046\040\060\042\045\043\036\044\061\045" +
    "\066\047\030\050\042\051\035\054\015\055\016\056\054" +
    "\057\012\060\023\061\050\062\063\063\070\001\002\000" +
    "\042\004\uff9c\006\uff9c\011\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\015\uff9c\016\242\024\uff9c\025\uff9c\026\uff9c\027\uff9c\030" +
    "\uff9c\031\uff9c\032\uff9c\033\uff9c\001\002\000\054\004\uff9e" +
    "\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\020\uff9e\023\uff9e\024\uff9e\025\uff9e" +
    "\026\uff9e\027\uff9e\030\uff9e\031\uff9e\032\uff9e\033\uff9e\052" +
    "\uff9e\001\002\000\022\005\uffc0\006\uffc0\007\uffc0\010\uffc0" +
    "\020\uffc0\023\uffc0\024\uffc0\052\uffc0\001\002\000\022\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\020\uffe7\023\uffe7\024\uffe7" +
    "\052\uffe7\001\002\000\004\004\236\001\002\000\004\004" +
    "\227\001\002\000\006\020\uff99\056\215\001\002\000\054" +
    "\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\020\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033" +
    "\uffa0\052\uffa0\001\002\000\066\004\020\006\064\007\uff99" +
    "\010\116\017\062\021\053\034\044\035\014\036\017\037" +
    "\046\040\060\041\203\042\045\043\036\044\061\045\066" +
    "\047\030\050\042\054\015\055\016\056\112\057\012\060" +
    "\023\061\050\062\063\063\070\001\002\000\022\005\uffd9" +
    "\006\uffd9\007\uffd9\010\uffd9\020\uffd9\023\uffd9\024\uffd9\052" +
    "\uffd9\001\002\000\006\004\155\056\156\001\002\000\022" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\020\uffc4\023\uffc4\024" +
    "\uffc4\052\uffc4\001\002\000\054\004\uff9f\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015" +
    "\uff9f\020\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\030\uff9f\031\uff9f\032\uff9f\033\uff9f\052\uff9f\001\002\000" +
    "\054\004\145\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\015\uffb0\020\uffb0\023\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0" +
    "\033\114\052\uffb0\001\002\000\004\024\144\001\002\000" +
    "\050\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6" +
    "\013\106\014\104\015\100\020\uffa6\023\uffa6\024\uffa6\025" +
    "\101\026\077\027\105\030\103\031\076\032\102\052\uffa6" +
    "\001\002\000\066\002\ufffe\004\ufffe\006\ufffe\017\ufffe\021" +
    "\ufffe\022\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe\040\ufffe" +
    "\042\ufffe\043\ufffe\044\ufffe\045\ufffe\047\ufffe\050\ufffe\051" +
    "\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061\ufffe" +
    "\062\ufffe\063\ufffe\001\002\000\054\004\uff9d\005\uff9d\006" +
    "\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d" +
    "\015\uff9d\020\uff9d\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027" +
    "\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\052\uff9d\001\002" +
    "\000\060\004\020\006\064\017\062\021\053\034\044\035" +
    "\014\036\017\037\046\040\060\042\045\043\036\044\061" +
    "\045\066\047\030\050\042\054\015\055\016\056\112\057" +
    "\012\060\023\061\050\062\063\063\070\001\002\000\060" +
    "\004\020\006\064\017\062\021\053\034\044\035\014\036" +
    "\017\037\046\040\060\042\045\043\036\044\061\045\066" +
    "\047\030\050\042\054\015\055\016\056\112\057\012\060" +
    "\023\061\050\062\063\063\070\001\002\000\024\004\020" +
    "\006\111\054\015\055\016\056\112\060\023\061\050\062" +
    "\063\063\070\001\002\000\060\004\020\006\064\017\062" +
    "\021\053\034\044\035\014\036\017\037\046\040\060\042" +
    "\045\043\036\044\061\045\066\047\030\050\042\054\015" +
    "\055\016\056\112\057\012\060\023\061\050\062\063\063" +
    "\070\001\002\000\060\004\020\006\064\017\062\021\053" +
    "\034\044\035\014\036\017\037\046\040\060\042\045\043" +
    "\036\044\061\045\066\047\030\050\042\054\015\055\016" +
    "\056\112\057\012\060\023\061\050\062\063\063\070\001" +
    "\002\000\060\004\020\006\064\017\062\021\053\034\044" +
    "\035\014\036\017\037\046\040\060\042\045\043\036\044" +
    "\061\045\066\047\030\050\042\054\015\055\016\056\112" +
    "\057\012\060\023\061\050\062\063\063\070\001\002\000" +
    "\024\004\020\006\111\054\015\055\016\056\112\060\023" +
    "\061\050\062\063\063\070\001\002\000\060\004\020\006" +
    "\064\017\062\021\053\034\044\035\014\036\017\037\046" +
    "\040\060\042\045\043\036\044\061\045\066\047\030\050" +
    "\042\054\015\055\016\056\112\057\012\060\023\061\050" +
    "\062\063\063\070\001\002\000\024\004\020\006\111\054" +
    "\015\055\016\056\112\060\023\061\050\062\063\063\070" +
    "\001\002\000\034\005\uffa6\006\uffa6\007\uffa6\010\uffa6\011" +
    "\uffa6\012\uffa6\013\106\014\104\015\100\020\uffa6\023\uffa6" +
    "\024\uffa6\052\uffa6\001\002\000\026\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\011\uffa9\012\uffa9\020\uffa9\023\uffa9\024\uffa9" +
    "\052\uffa9\001\002\000\004\010\116\001\002\000\054\004" +
    "\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\020\uff9c\023\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c" +
    "\052\uff9c\001\002\000\052\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\020\uffb0" +
    "\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\032\uffb0\033\114\052\uffb0\001\002\000\024\004\020" +
    "\006\111\054\015\055\016\056\112\060\023\061\050\062" +
    "\063\063\070\001\002\000\050\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\020" +
    "\uffb1\023\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\052\uffb1\001\002\000\004\006\117\001" +
    "\002\000\062\004\020\006\064\007\uff99\017\062\021\053" +
    "\034\044\035\014\036\017\037\046\040\060\042\045\043" +
    "\036\044\061\045\066\047\030\050\042\054\015\055\016" +
    "\056\112\057\012\060\023\061\050\062\063\063\070\001" +
    "\002\000\004\007\ufff5\001\002\000\004\007\131\001\002" +
    "\000\006\007\ufff3\023\ufff3\001\002\000\010\007\ufff0\010" +
    "\127\023\ufff0\001\002\000\006\007\ufff6\023\125\001\002" +
    "\000\060\004\020\006\064\017\062\021\053\034\044\035" +
    "\014\036\017\037\046\040\060\042\045\043\036\044\061" +
    "\045\066\047\030\050\042\054\015\055\016\056\112\057" +
    "\012\060\023\061\050\062\063\063\070\001\002\000\006" +
    "\007\ufff4\023\ufff4\001\002\000\060\004\020\006\064\017" +
    "\062\021\053\034\044\035\014\036\017\037\046\040\060" +
    "\042\045\043\036\044\061\045\066\047\030\050\042\054" +
    "\015\055\016\056\112\057\012\060\023\061\050\062\063" +
    "\063\070\001\002\000\006\007\ufff1\023\ufff1\001\002\000" +
    "\004\010\132\001\002\000\004\007\133\001\002\000\054" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\020\ufff2\023\ufff2\024\ufff2" +
    "\025\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\052\ufff2\001\002\000\022\005\uffac\006\uffac\007\uffac" +
    "\010\uffac\020\uffac\023\uffac\024\uffac\052\uffac\001\002\000" +
    "\026\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\020\uffa8\023\uffa8\024\uffa8\052\uffa8\001\002\000\022\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\020\uffab\023\uffab\024\uffab" +
    "\052\uffab\001\002\000\022\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\020\uffaf\023\uffaf\024\uffaf\052\uffaf\001\002\000\022" +
    "\005\uffae\006\uffae\007\uffae\010\uffae\020\uffae\023\uffae\024" +
    "\uffae\052\uffae\001\002\000\026\005\uffa7\006\uffa7\007\uffa7" +
    "\010\uffa7\011\uffa7\012\uffa7\020\uffa7\023\uffa7\024\uffa7\052" +
    "\uffa7\001\002\000\022\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\020\uffad\023\uffad\024\uffad\052\uffad\001\002\000\022\005" +
    "\uffaa\006\uffaa\007\uffaa\010\uffaa\020\uffaa\023\uffaa\024\uffaa" +
    "\052\uffaa\001\002\000\066\002\ufffa\004\ufffa\006\ufffa\017" +
    "\ufffa\021\ufffa\022\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa" +
    "\040\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\047\ufffa\050" +
    "\ufffa\051\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\062\ufffa\063\ufffa\001\002\000\062\004\020\005" +
    "\uff99\006\064\017\062\021\053\034\044\035\014\036\017" +
    "\037\046\040\060\042\045\043\036\044\061\045\066\047" +
    "\030\050\042\054\015\055\016\056\112\057\012\060\023" +
    "\061\050\062\063\063\070\001\002\000\004\005\uffec\001" +
    "\002\000\006\005\uffed\023\153\001\002\000\006\005\uffea" +
    "\023\uffea\001\002\000\004\005\152\001\002\000\022\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\020\uffee\023\uffee\024\uffee" +
    "\052\uffee\001\002\000\060\004\020\006\064\017\062\021" +
    "\053\034\044\035\014\036\017\037\046\040\060\042\045" +
    "\043\036\044\061\045\066\047\030\050\042\054\015\055" +
    "\016\056\112\057\012\060\023\061\050\062\063\063\070" +
    "\001\002\000\006\005\uffeb\023\uffeb\001\002\000\012\006" +
    "\162\046\uff99\056\166\064\165\001\002\000\060\004\020" +
    "\006\064\017\062\021\053\034\044\035\014\036\017\037" +
    "\046\040\060\042\045\043\036\044\061\045\066\047\030" +
    "\050\042\054\015\055\016\056\112\057\012\060\023\061" +
    "\050\062\063\063\070\001\002\000\022\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\020\uffe6\023\uffe6\024\uffe6\052\uffe6\001" +
    "\002\000\010\007\uffe3\023\200\046\uffe3\001\002\000\004" +
    "\046\174\001\002\000\010\007\uff99\056\166\064\165\001" +
    "\002\000\006\007\uffe2\046\uffe2\001\002\000\010\007\uffe0" +
    "\023\uffe0\046\uffe0\001\002\000\004\056\167\001\002\000" +
    "\012\005\uffde\007\uffde\023\uffde\046\uffde\001\002\000\012" +
    "\005\uffdf\007\uffdf\023\uffdf\046\uffdf\001\002\000\004\007" +
    "\171\001\002\000\004\005\172\001\002\000\060\004\020" +
    "\006\064\017\062\021\053\034\044\035\014\036\017\037" +
    "\046\040\060\042\045\043\036\044\061\045\066\047\030" +
    "\050\042\054\015\055\016\056\112\057\012\060\023\061" +
    "\050\062\063\063\070\001\002\000\022\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\020\uffe4\023\uffe4\024\uffe4\052\uffe4\001" +
    "\002\000\006\056\166\064\165\001\002\000\004\005\176" +
    "\001\002\000\060\004\020\006\064\017\062\021\053\034" +
    "\044\035\014\036\017\037\046\040\060\042\045\043\036" +
    "\044\061\045\066\047\030\050\042\054\015\055\016\056" +
    "\112\057\012\060\023\061\050\062\063\063\070\001\002" +
    "\000\022\005\uffe5\006\uffe5\007\uffe5\010\uffe5\020\uffe5\023" +
    "\uffe5\024\uffe5\052\uffe5\001\002\000\006\056\166\064\165" +
    "\001\002\000\010\007\uffe1\023\uffe1\046\uffe1\001\002\000" +
    "\004\007\uffd5\001\002\000\004\007\uffd3\001\002\000\004" +
    "\007\211\001\002\000\004\023\207\001\002\000\004\007" +
    "\uffd6\001\002\000\062\004\020\006\064\017\062\021\053" +
    "\034\044\035\014\036\017\037\046\040\060\041\203\042" +
    "\045\043\036\044\061\045\066\047\030\050\042\054\015" +
    "\055\016\056\112\057\012\060\023\061\050\062\063\063" +
    "\070\001\002\000\004\007\uffd4\001\002\000\022\005\uffd8" +
    "\006\uffd8\007\uffd8\010\uffd8\020\uffd8\023\uffd8\024\uffd8\052" +
    "\uffd8\001\002\000\004\020\uffb8\001\002\000\006\020\uff99" +
    "\023\222\001\002\000\004\020\220\001\002\000\004\016" +
    "\216\001\002\000\060\004\020\006\064\017\062\021\053" +
    "\034\044\035\014\036\017\037\046\040\060\042\045\043" +
    "\036\044\061\045\066\047\030\050\042\054\015\055\016" +
    "\056\112\057\012\060\023\061\050\062\063\063\070\001" +
    "\002\000\006\020\uffba\023\uffba\001\002\000\060\004\020" +
    "\006\064\017\062\021\053\034\044\035\014\036\017\037" +
    "\046\040\060\042\045\043\036\044\061\045\066\047\030" +
    "\050\042\054\015\055\016\056\112\057\012\060\023\061" +
    "\050\062\063\063\070\001\002\000\022\005\uffbb\006\uffbb" +
    "\007\uffbb\010\uffbb\020\uffbb\023\uffbb\024\uffbb\052\uffbb\001" +
    "\002\000\004\056\215\001\002\000\004\020\uffb6\001\002" +
    "\000\004\020\uffb9\001\002\000\006\020\uff99\023\222\001" +
    "\002\000\004\020\uffb7\001\002\000\060\004\020\006\064" +
    "\017\062\021\053\034\044\035\014\036\017\037\046\040" +
    "\060\042\045\043\036\044\061\045\066\047\030\050\042" +
    "\054\015\055\016\056\112\057\012\060\023\061\050\062" +
    "\063\063\070\001\002\000\004\023\231\001\002\000\060" +
    "\004\020\006\064\017\062\021\053\034\044\035\014\036" +
    "\017\037\046\040\060\042\045\043\036\044\061\045\066" +
    "\047\030\050\042\054\015\055\016\056\112\057\012\060" +
    "\023\061\050\062\063\063\070\001\002\000\004\023\233" +
    "\001\002\000\060\004\020\006\064\017\062\021\053\034" +
    "\044\035\014\036\017\037\046\040\060\042\045\043\036" +
    "\044\061\045\066\047\030\050\042\054\015\055\016\056" +
    "\112\057\012\060\023\061\050\062\063\063\070\001\002" +
    "\000\004\005\235\001\002\000\022\005\uffdd\006\uffdd\007" +
    "\uffdd\010\uffdd\020\uffdd\023\uffdd\024\uffdd\052\uffdd\001\002" +
    "\000\004\006\237\001\002\000\064\004\020\006\064\007" +
    "\uff99\017\062\021\053\034\044\035\014\036\017\037\046" +
    "\040\060\041\203\042\045\043\036\044\061\045\066\047" +
    "\030\050\042\054\015\055\016\056\112\057\012\060\023" +
    "\061\050\062\063\063\070\001\002\000\004\005\241\001" +
    "\002\000\022\005\uffd7\006\uffd7\007\uffd7\010\uffd7\020\uffd7" +
    "\023\uffd7\024\uffd7\052\uffd7\001\002\000\060\004\020\006" +
    "\064\017\062\021\053\034\044\035\014\036\017\037\046" +
    "\040\060\042\045\043\036\044\061\045\066\047\030\050" +
    "\042\054\015\055\016\056\112\057\012\060\023\061\050" +
    "\062\063\063\070\001\002\000\004\024\244\001\002\000" +
    "\066\002\uffb5\004\uffb5\006\uffb5\017\uffb5\021\uffb5\022\uffb5" +
    "\034\uffb5\035\uffb5\036\uffb5\037\uffb5\040\uffb5\042\uffb5\043" +
    "\uffb5\044\uffb5\045\uffb5\047\uffb5\050\uffb5\051\uffb5\054\uffb5" +
    "\055\uffb5\056\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063" +
    "\uffb5\001\002\000\064\004\020\006\064\017\062\021\053" +
    "\022\246\034\044\035\014\036\017\037\046\040\060\042" +
    "\045\043\036\044\061\045\066\047\030\050\042\051\035" +
    "\054\015\055\016\056\054\057\012\060\023\061\050\062" +
    "\063\063\070\001\002\000\022\005\uffcb\006\uffcb\007\uffcb" +
    "\010\uffcb\020\uffcb\023\uffcb\024\uffcb\052\uffcb\001\002\000" +
    "\066\002\uffff\004\uffff\006\uffff\017\uffff\021\uffff\022\uffff" +
    "\034\uffff\035\uffff\036\uffff\037\uffff\040\uffff\042\uffff\043" +
    "\uffff\044\uffff\045\uffff\047\uffff\050\uffff\051\uffff\054\uffff" +
    "\055\uffff\056\uffff\057\uffff\060\uffff\061\uffff\062\uffff\063" +
    "\uffff\001\002\000\024\004\020\006\111\054\015\055\016" +
    "\056\112\060\023\061\050\062\063\063\070\001\002\000" +
    "\024\004\020\006\111\054\015\055\016\056\112\060\023" +
    "\061\050\062\063\063\070\001\002\000\026\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\020\uffb3\023\uffb3" +
    "\024\uffb3\052\uffb3\001\002\000\026\005\uffb4\006\uffb4\007" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\020\uffb4\023\uffb4\024\uffb4" +
    "\052\uffb4\001\002\000\060\004\020\006\064\017\062\021" +
    "\053\034\044\035\014\036\017\037\046\040\060\042\045" +
    "\043\036\044\061\045\066\047\030\050\042\054\015\055" +
    "\016\056\112\057\012\060\023\061\050\062\063\063\070" +
    "\001\002\000\004\005\256\001\002\000\022\005\uffd2\006" +
    "\uffd2\007\uffd2\010\uffd2\020\uffd2\023\uffd2\024\uffd2\052\uffd2" +
    "\001\002\000\060\004\020\006\064\017\062\021\053\034" +
    "\044\035\014\036\017\037\046\040\060\042\045\043\036" +
    "\044\061\045\066\047\030\050\042\054\015\055\016\056" +
    "\112\057\012\060\023\061\050\062\063\063\070\001\002" +
    "\000\004\023\261\001\002\000\060\004\020\006\064\017" +
    "\062\021\053\034\044\035\014\036\017\037\046\040\060" +
    "\042\045\043\036\044\061\045\066\047\030\050\042\054" +
    "\015\055\016\056\112\057\012\060\023\061\050\062\063" +
    "\063\070\001\002\000\004\005\263\001\002\000\022\005" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\020\uffdb\023\uffdb\024\uffdb" +
    "\052\uffdb\001\002\000\060\004\020\006\064\017\062\021" +
    "\053\034\044\035\014\036\017\037\046\040\060\042\045" +
    "\043\036\044\061\045\066\047\030\050\042\054\015\055" +
    "\016\056\112\057\012\060\023\061\050\062\063\063\070" +
    "\001\002\000\004\023\266\001\002\000\060\004\020\006" +
    "\064\017\062\021\053\034\044\035\014\036\017\037\046" +
    "\040\060\042\045\043\036\044\061\045\066\047\030\050" +
    "\042\054\015\055\016\056\112\057\012\060\023\061\050" +
    "\062\063\063\070\001\002\000\004\005\270\001\002\000" +
    "\022\005\uffcd\006\uffcd\007\uffcd\010\uffcd\020\uffcd\023\uffcd" +
    "\024\uffcd\052\uffcd\001\002\000\060\004\020\006\064\017" +
    "\062\021\053\034\044\035\014\036\017\037\046\040\060" +
    "\042\045\043\036\044\061\045\066\047\030\050\042\054" +
    "\015\055\016\056\112\057\012\060\023\061\050\062\063" +
    "\063\070\001\002\000\004\005\273\001\002\000\022\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\020\ufff8\023\ufff8\024\ufff8" +
    "\052\ufff8\001\002\000\060\004\020\006\064\017\062\021" +
    "\053\034\044\035\014\036\017\037\046\040\060\042\045" +
    "\043\036\044\061\045\066\047\030\050\042\054\015\055" +
    "\016\056\112\057\012\060\023\061\050\062\063\063\070" +
    "\001\002\000\066\002\ufffc\004\ufffc\006\ufffc\017\ufffc\021" +
    "\ufffc\022\ufffc\034\ufffc\035\ufffc\036\ufffc\037\ufffc\040\ufffc" +
    "\042\ufffc\043\ufffc\044\ufffc\045\ufffc\047\ufffc\050\ufffc\051" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc\061\ufffc" +
    "\062\ufffc\063\ufffc\001\002\000\004\007\277\001\002\000" +
    "\004\024\ufff7\001\002\000\060\004\020\006\064\017\062" +
    "\021\053\034\044\035\014\036\017\037\046\040\060\042" +
    "\045\043\036\044\061\045\066\047\030\050\042\054\015" +
    "\055\016\056\112\057\012\060\023\061\050\062\063\063" +
    "\070\001\002\000\004\023\302\001\002\000\060\004\020" +
    "\006\064\017\062\021\053\034\044\035\014\036\017\037" +
    "\046\040\060\042\045\043\036\044\061\045\066\047\030" +
    "\050\042\054\015\055\016\056\112\057\012\060\023\061" +
    "\050\062\063\063\070\001\002\000\004\005\304\001\002" +
    "\000\022\005\uffdc\006\uffdc\007\uffdc\010\uffdc\020\uffdc\023" +
    "\uffdc\024\uffdc\052\uffdc\001\002\000\004\052\306\001\002" +
    "\000\060\004\020\006\064\017\062\021\053\034\044\035" +
    "\014\036\017\037\046\040\060\042\045\043\036\044\061" +
    "\045\066\047\030\050\042\054\015\055\016\056\112\057" +
    "\012\060\023\061\050\062\063\063\070\001\002\000\004" +
    "\006\310\001\002\000\004\053\311\001\002\000\060\004" +
    "\020\006\064\017\062\021\053\034\044\035\014\036\017" +
    "\037\046\040\060\042\045\043\036\044\061\045\066\047" +
    "\030\050\042\054\015\055\016\056\112\057\012\060\023" +
    "\061\050\062\063\063\070\001\002\000\004\007\313\001" +
    "\002\000\066\002\ufff9\004\ufff9\006\ufff9\017\ufff9\021\ufff9" +
    "\022\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\040\ufff9\042" +
    "\ufff9\043\ufff9\044\ufff9\045\ufff9\047\ufff9\050\ufff9\051\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062" +
    "\ufff9\063\ufff9\001\002\000\060\004\020\006\064\017\062" +
    "\021\053\034\044\035\014\036\017\037\046\040\060\042" +
    "\045\043\036\044\061\045\066\047\030\050\042\054\015" +
    "\055\016\056\112\057\012\060\023\061\050\062\063\063" +
    "\070\001\002\000\004\023\316\001\002\000\060\004\020" +
    "\006\064\017\062\021\053\034\044\035\014\036\017\037" +
    "\046\040\060\042\045\043\036\044\061\045\066\047\030" +
    "\050\042\054\015\055\016\056\112\057\012\060\023\061" +
    "\050\062\063\063\070\001\002\000\004\005\320\001\002" +
    "\000\022\005\uffef\006\uffef\007\uffef\010\uffef\020\uffef\023" +
    "\uffef\024\uffef\052\uffef\001\002\000\004\005\322\001\002" +
    "\000\054\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\020\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\033\uff9b\052\uff9b\001\002\000\006\034\044\056\325" +
    "\001\002\000\004\005\327\001\002\000\004\005\326\001" +
    "\002\000\022\005\uffce\006\uffce\007\uffce\010\uffce\020\uffce" +
    "\023\uffce\024\uffce\052\uffce\001\002\000\022\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\020\uffcf\023\uffcf\024\uffcf\052\uffcf" +
    "\001\002\000\006\034\044\056\332\001\002\000\004\005" +
    "\334\001\002\000\004\005\333\001\002\000\022\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\020\uffd0\023\uffd0\024\uffd0\052" +
    "\uffd0\001\002\000\022\005\uffd1\006\uffd1\007\uffd1\010\uffd1" +
    "\020\uffd1\023\uffd1\024\uffd1\052\uffd1\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\333\000\106\002\003\003\010\004\073\005\012\006" +
    "\031\012\037\013\050\014\042\015\070\016\074\022\072" +
    "\023\024\024\046\025\051\026\066\027\033\030\064\031" +
    "\040\032\023\033\026\034\055\035\020\036\054\037\007" +
    "\043\036\044\025\045\021\046\056\047\032\052\005\054" +
    "\006\057\071\060\030\061\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\102\004\246\005\012\006\031\012\037" +
    "\013\050\014\042\015\070\016\074\022\072\023\024\024" +
    "\046\025\051\026\066\027\033\030\064\031\040\032\023" +
    "\033\026\034\055\035\020\036\054\037\007\043\036\044" +
    "\025\045\021\046\056\047\032\052\005\054\006\057\071" +
    "\060\030\061\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\072\006\031\012\320\013\050\014" +
    "\042\015\070\016\074\022\072\023\024\024\046\025\051" +
    "\026\066\027\033\030\064\031\040\032\023\033\026\034" +
    "\055\035\020\036\054\037\007\043\036\044\025\045\021" +
    "\046\056\047\032\052\005\054\006\060\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\006\031\012" +
    "\304\013\050\014\042\015\070\016\074\022\072\023\024" +
    "\024\046\025\051\026\066\027\033\030\064\031\040\032" +
    "\023\033\026\034\055\035\020\036\054\037\007\043\036" +
    "\044\025\045\021\046\056\047\032\052\005\054\006\060" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\003\244\004\073\005\012\006\031" +
    "\012\037\013\050\014\042\015\070\016\074\022\072\023" +
    "\024\024\046\025\051\026\066\027\033\030\064\031\040" +
    "\032\023\033\026\034\055\035\020\036\054\037\007\043" +
    "\036\044\025\045\021\046\056\047\032\052\005\054\006" +
    "\057\071\060\030\061\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\007\213\011\212\017" +
    "\211\001\001\000\002\001\001\000\100\006\031\012\204" +
    "\013\050\014\042\015\070\016\074\017\201\020\203\021" +
    "\205\022\072\023\024\024\046\025\051\026\066\027\033" +
    "\030\064\031\040\032\023\033\026\034\055\035\020\036" +
    "\054\037\007\043\036\044\025\045\021\046\056\047\032" +
    "\052\005\054\006\060\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\006\031\012\142\013\050" +
    "\014\042\015\070\016\074\022\072\023\024\024\046\025" +
    "\051\026\066\027\033\030\064\031\040\032\023\033\026" +
    "\034\055\035\020\036\054\037\007\043\036\044\025\045" +
    "\021\046\056\047\032\052\005\054\006\060\030\001\001" +
    "\000\072\006\031\012\141\013\050\014\042\015\070\016" +
    "\074\022\072\023\024\024\046\025\051\026\066\027\033" +
    "\030\064\031\040\032\023\033\026\034\055\035\020\036" +
    "\054\037\007\043\036\044\025\045\021\046\056\047\032" +
    "\052\005\054\006\060\030\001\001\000\016\014\140\015" +
    "\112\016\074\022\106\036\054\054\006\001\001\000\072" +
    "\006\031\012\137\013\050\014\042\015\070\016\074\022" +
    "\072\023\024\024\046\025\051\026\066\027\033\030\064" +
    "\031\040\032\023\033\026\034\055\035\020\036\054\037" +
    "\007\043\036\044\025\045\021\046\056\047\032\052\005" +
    "\054\006\060\030\001\001\000\072\006\031\012\136\013" +
    "\050\014\042\015\070\016\074\022\072\023\024\024\046" +
    "\025\051\026\066\027\033\030\064\031\040\032\023\033" +
    "\026\034\055\035\020\036\054\037\007\043\036\044\025" +
    "\045\021\046\056\047\032\052\005\054\006\060\030\001" +
    "\001\000\072\006\031\012\135\013\050\014\042\015\070" +
    "\016\074\022\072\023\024\024\046\025\051\026\066\027" +
    "\033\030\064\031\040\032\023\033\026\034\055\035\020" +
    "\036\054\037\007\043\036\044\025\045\021\046\056\047" +
    "\032\052\005\054\006\060\030\001\001\000\016\014\134" +
    "\015\112\016\074\022\106\036\054\054\006\001\001\000" +
    "\072\006\031\012\133\013\050\014\042\015\070\016\074" +
    "\022\072\023\024\024\046\025\051\026\066\027\033\030" +
    "\064\031\040\032\023\033\026\034\055\035\020\036\054" +
    "\037\007\043\036\044\025\045\021\046\056\047\032\052" +
    "\005\054\006\060\030\001\001\000\016\014\107\015\112" +
    "\016\074\022\106\036\054\054\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\015\112\016\074\022\114\036" +
    "\054\054\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\102\006\031\012\122\013\050\014\042\015\070\016" +
    "\074\017\117\022\072\023\024\024\046\025\051\026\066" +
    "\027\033\030\064\031\040\032\023\033\026\034\055\035" +
    "\020\036\054\037\007\043\036\044\025\045\021\046\056" +
    "\047\032\052\005\053\121\054\006\055\120\056\123\060" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\074\006" +
    "\031\012\122\013\050\014\042\015\070\016\074\022\072" +
    "\023\024\024\046\025\051\026\066\027\033\030\064\031" +
    "\040\032\023\033\026\034\055\035\020\036\054\037\007" +
    "\043\036\044\025\045\021\046\056\047\032\052\005\053" +
    "\125\054\006\060\030\001\001\000\002\001\001\000\072" +
    "\006\031\012\127\013\050\014\042\015\070\016\074\022" +
    "\072\023\024\024\046\025\051\026\066\027\033\030\064" +
    "\031\040\032\023\033\026\034\055\035\020\036\054\037" +
    "\007\043\036\044\025\045\021\046\056\047\032\052\005" +
    "\054\006\060\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\100\006\031\012\147\013" +
    "\050\014\042\015\070\016\074\017\145\022\072\023\024" +
    "\024\046\025\051\026\066\027\033\030\064\031\040\032" +
    "\023\033\026\034\055\035\020\036\054\037\007\043\036" +
    "\044\025\045\021\046\056\047\032\050\150\051\146\052" +
    "\005\054\006\060\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\072\006\031\012\153\013\050\014\042\015\070" +
    "\016\074\022\072\023\024\024\046\025\051\026\066\027" +
    "\033\030\064\031\040\032\023\033\026\034\055\035\020" +
    "\036\054\037\007\043\036\044\025\045\021\046\056\047" +
    "\032\052\005\054\006\060\030\001\001\000\002\001\001" +
    "\000\012\017\162\040\163\041\160\042\157\001\001\000" +
    "\072\006\031\012\156\013\050\014\042\015\070\016\074" +
    "\022\072\023\024\024\046\025\051\026\066\027\033\030" +
    "\064\031\040\032\023\033\026\034\055\035\020\036\054" +
    "\037\007\043\036\044\025\045\021\046\056\047\032\052" +
    "\005\054\006\060\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\017\162\040\163\041" +
    "\167\042\157\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\072\006\031\012\172" +
    "\013\050\014\042\015\070\016\074\022\072\023\024\024" +
    "\046\025\051\026\066\027\033\030\064\031\040\032\023" +
    "\033\026\034\055\035\020\036\054\037\007\043\036\044" +
    "\025\045\021\046\056\047\032\052\005\054\006\060\030" +
    "\001\001\000\002\001\001\000\004\040\174\001\001\000" +
    "\002\001\001\000\072\006\031\012\176\013\050\014\042" +
    "\015\070\016\074\022\072\023\024\024\046\025\051\026" +
    "\066\027\033\030\064\031\040\032\023\033\026\034\055" +
    "\035\020\036\054\037\007\043\036\044\025\045\021\046" +
    "\056\047\032\052\005\054\006\060\030\001\001\000\002" +
    "\001\001\000\004\040\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\006\031\012\204\013" +
    "\050\014\042\015\070\016\074\021\207\022\072\023\024" +
    "\024\046\025\051\026\066\027\033\030\064\031\040\032" +
    "\023\033\026\034\055\035\020\036\054\037\007\043\036" +
    "\044\025\045\021\046\056\047\032\052\005\054\006\060" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\223\017\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\006\031\012\216\013\050" +
    "\014\042\015\070\016\074\022\072\023\024\024\046\025" +
    "\051\026\066\027\033\030\064\031\040\032\023\033\026" +
    "\034\055\035\020\036\054\037\007\043\036\044\025\045" +
    "\021\046\056\047\032\052\005\054\006\060\030\001\001" +
    "\000\002\001\001\000\072\006\031\012\220\013\050\014" +
    "\042\015\070\016\074\022\072\023\024\024\046\025\051" +
    "\026\066\027\033\030\064\031\040\032\023\033\026\034" +
    "\055\035\020\036\054\037\007\043\036\044\025\045\021" +
    "\046\056\047\032\052\005\054\006\060\030\001\001\000" +
    "\002\001\001\000\004\011\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\225\017\222\001\001\000" +
    "\002\001\001\000\072\006\031\012\227\013\050\014\042" +
    "\015\070\016\074\022\072\023\024\024\046\025\051\026" +
    "\066\027\033\030\064\031\040\032\023\033\026\034\055" +
    "\035\020\036\054\037\007\043\036\044\025\045\021\046" +
    "\056\047\032\052\005\054\006\060\030\001\001\000\002" +
    "\001\001\000\072\006\031\012\231\013\050\014\042\015" +
    "\070\016\074\022\072\023\024\024\046\025\051\026\066" +
    "\027\033\030\064\031\040\032\023\033\026\034\055\035" +
    "\020\036\054\037\007\043\036\044\025\045\021\046\056" +
    "\047\032\052\005\054\006\060\030\001\001\000\002\001" +
    "\001\000\072\006\031\012\233\013\050\014\042\015\070" +
    "\016\074\022\072\023\024\024\046\025\051\026\066\027" +
    "\033\030\064\031\040\032\023\033\026\034\055\035\020" +
    "\036\054\037\007\043\036\044\025\045\021\046\056\047" +
    "\032\052\005\054\006\060\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\237\001\001\000\100\006" +
    "\031\012\204\013\050\014\042\015\070\016\074\017\201" +
    "\020\203\021\205\022\072\023\024\024\046\025\051\026" +
    "\066\027\033\030\064\031\040\032\023\033\026\034\055" +
    "\035\020\036\054\037\007\043\036\044\025\045\021\046" +
    "\056\047\032\052\005\054\006\060\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\072\006\031\012\242\013" +
    "\050\014\042\015\070\016\074\022\072\023\024\024\046" +
    "\025\051\026\066\027\033\030\064\031\040\032\023\033" +
    "\026\034\055\035\020\036\054\037\007\043\036\044\025" +
    "\045\021\046\056\047\032\052\005\054\006\060\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\004\246" +
    "\005\012\006\031\012\037\013\050\014\042\015\070\016" +
    "\074\022\072\023\024\024\046\025\051\026\066\027\033" +
    "\030\064\031\040\032\023\033\026\034\055\035\020\036" +
    "\054\037\007\043\036\044\025\045\021\046\056\047\032" +
    "\052\005\054\006\057\071\060\030\061\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\014\252\015\112" +
    "\016\074\022\106\036\054\054\006\001\001\000\016\014" +
    "\251\015\112\016\074\022\106\036\054\054\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\006\031\012" +
    "\254\013\050\014\042\015\070\016\074\022\072\023\024" +
    "\024\046\025\051\026\066\027\033\030\064\031\040\032" +
    "\023\033\026\034\055\035\020\036\054\037\007\043\036" +
    "\044\025\045\021\046\056\047\032\052\005\054\006\060" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\006\031\012\257\013\050\014\042\015\070\016\074\022" +
    "\072\023\024\024\046\025\051\026\066\027\033\030\064" +
    "\031\040\032\023\033\026\034\055\035\020\036\054\037" +
    "\007\043\036\044\025\045\021\046\056\047\032\052\005" +
    "\054\006\060\030\001\001\000\002\001\001\000\072\006" +
    "\031\012\261\013\050\014\042\015\070\016\074\022\072" +
    "\023\024\024\046\025\051\026\066\027\033\030\064\031" +
    "\040\032\023\033\026\034\055\035\020\036\054\037\007" +
    "\043\036\044\025\045\021\046\056\047\032\052\005\054" +
    "\006\060\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\072\006\031\012\264\013\050\014\042\015\070\016" +
    "\074\022\072\023\024\024\046\025\051\026\066\027\033" +
    "\030\064\031\040\032\023\033\026\034\055\035\020\036" +
    "\054\037\007\043\036\044\025\045\021\046\056\047\032" +
    "\052\005\054\006\060\030\001\001\000\002\001\001\000" +
    "\072\006\031\012\266\013\050\014\042\015\070\016\074" +
    "\022\072\023\024\024\046\025\051\026\066\027\033\030" +
    "\064\031\040\032\023\033\026\034\055\035\020\036\054" +
    "\037\007\043\036\044\025\045\021\046\056\047\032\052" +
    "\005\054\006\060\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\072\006\031\012\271\013\050\014\042\015" +
    "\070\016\074\022\072\023\024\024\046\025\051\026\066" +
    "\027\033\030\064\031\040\032\023\033\026\034\055\035" +
    "\020\036\054\037\007\043\036\044\025\045\021\046\056" +
    "\047\032\052\005\054\006\060\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\006\031\012\275\013\050" +
    "\014\042\015\070\016\074\022\072\023\024\024\046\025" +
    "\051\026\066\027\033\030\064\031\040\032\023\033\026" +
    "\034\055\035\020\036\054\037\007\043\036\044\025\045" +
    "\021\046\056\047\032\052\005\054\006\060\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\072\006\031\012\300\013\050\014\042\015\070\016\074" +
    "\022\072\023\024\024\046\025\051\026\066\027\033\030" +
    "\064\031\040\032\023\033\026\034\055\035\020\036\054" +
    "\037\007\043\036\044\025\045\021\046\056\047\032\052" +
    "\005\054\006\060\030\001\001\000\002\001\001\000\072" +
    "\006\031\012\302\013\050\014\042\015\070\016\074\022" +
    "\072\023\024\024\046\025\051\026\066\027\033\030\064" +
    "\031\040\032\023\033\026\034\055\035\020\036\054\037" +
    "\007\043\036\044\025\045\021\046\056\047\032\052\005" +
    "\054\006\060\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\072\006\031\012\306\013\050" +
    "\014\042\015\070\016\074\022\072\023\024\024\046\025" +
    "\051\026\066\027\033\030\064\031\040\032\023\033\026" +
    "\034\055\035\020\036\054\037\007\043\036\044\025\045" +
    "\021\046\056\047\032\052\005\054\006\060\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\072\006\031\012" +
    "\311\013\050\014\042\015\070\016\074\022\072\023\024" +
    "\024\046\025\051\026\066\027\033\030\064\031\040\032" +
    "\023\033\026\034\055\035\020\036\054\037\007\043\036" +
    "\044\025\045\021\046\056\047\032\052\005\054\006\060" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\072" +
    "\006\031\012\314\013\050\014\042\015\070\016\074\022" +
    "\072\023\024\024\046\025\051\026\066\027\033\030\064" +
    "\031\040\032\023\033\026\034\055\035\020\036\054\037" +
    "\007\043\036\044\025\045\021\046\056\047\032\052\005" +
    "\054\006\060\030\001\001\000\002\001\001\000\072\006" +
    "\031\012\316\013\050\014\042\015\070\016\074\022\072" +
    "\023\024\024\046\025\051\026\066\027\033\030\064\031" +
    "\040\032\023\033\026\034\055\035\020\036\054\037\007" +
    "\043\036\044\025\045\021\046\056\047\032\052\005\054" +
    "\006\060\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\023\323\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\023\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FnPlotParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FnPlotParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FnPlotParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  
    }


		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FnPlotParser$actions {
  private final FnPlotParser parser;

  /** Constructor */
  CUP$FnPlotParser$actions(FnPlotParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action_part00000000(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FnPlotParser$result;

      /* select the action based on the action number */
      switch (CUP$FnPlotParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		RESULT = start_val;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FnPlotParser$parser.done_parsing();
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= stmtIf 
            {
              Statement RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IfStatement si = (IfStatement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = si; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= vecIndex SEMI 
            {
              Statement RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		VectorIndex vc = (VectorIndex)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT =vc; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmtIf ::= IF expression THEN expression RSQBRACKET ELSE expression LSQBRACKET 
            {
              IfStatement RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp consq = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int consq2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int consq2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp consq2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	System.out.println("if stat");
	RESULT = new IfStatement(pred,consq,consq2);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtIf",47, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vecSize ::= SIZE LPAREN expression RPAREN 
            {
              SizeVectorFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new SizeVectorFunction(v); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSize",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // vecIndex ::= expression RSQBRACKET expression LSQBRACKET 
            {
              VectorIndex RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new VectorIndex(v,e); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecIndex",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // vParamListE ::= vParamList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamListE",43, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vParamListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamListE",43, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vParamList ::= vParamList COMMA vecSpec 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamList",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // vParamList ::= vecSpec 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<Exp> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamList",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // vector ::= RSQBRACKET COLON RSQBRACKET vParamListE LSQBRACKET COLON LSQBRACKET 
            {
              VectorFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<Exp> v = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		 RESULT = new VectorFunction(v);  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vector",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vecSpec ::= expression COLON expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVecSpec(e,f); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSpec",41, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vecSpec ::= expression 
            {
              Exp RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp en = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = en; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSpec",41, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              CallFunction RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp func = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp lst = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	RESULT = new CallFunction(func,lst);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("call",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funCall ::= factor LPAREN funCallExpListE RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT= new ExpFunCall(v,el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",37, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funCallExpListE ::= funCallExpList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpListE",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funCallExpListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpListE",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funCallExpList ::= funCallExpList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
											RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpList",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funCallExpList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList<Exp> ls = new ArrayList<>(); 
									ls.add(v) ;
									RESULT = ls;
									
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpList",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // procedures ::= procDef 
            {
              Exp RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction pd = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pd; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // procedures ::= procDefWithOverflow 
            {
              Exp RESULT =null;
		int pdOverFlowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pdOverFlowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction pdOverFlow = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pdOverFlow; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedures ::= noLimitProc 
            {
              Exp RESULT =null;
		int nlpleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nlpright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction nlp = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=nlp; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // noLimitProc ::= PROC VARIABLE expression 
            {
              ExpFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpFunction(v,body); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("noLimitProc",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procDefWithOverflow ::= PROC LPAREN paramListE DOT paramter RPAREN expression 
            {
              ExpFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		ArrayList<ExpPara> p = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int overflowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int overflowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ExpPara overflow = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
	RESULT=new ExpFunction(p,body,overflow); 				

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procDefWithOverflow",34, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // procDef ::= PROC LPAREN RSQBRACKET paramListE LSQBRACKET RPAREN expression 
            {
              ExpFunction RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 

System.out.println("procDeof");
RESULT=new ExpFunction(pl,body); 

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procDef",33, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramListE ::= paramList 
            {
              ArrayList<ExpPara> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramListE ::= empty 
            {
              ArrayList<ExpPara> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramList ::= paramList COMMA paramter 
            {
              ArrayList<ExpPara> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpPara v = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramList",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramList ::= paramter 
            {
              ArrayList<ExpPara> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpPara v = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<ExpPara> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramList",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramter ::= MODIFIER VARIABLE 
            {
              ExpPara RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 

			RESULT = new ExpPara(m,v); 

			
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramter",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramter ::= VARIABLE 
            {
              ExpPara RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpPara("default",v); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramter",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // substr ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              SubstrFunction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp str = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp end = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	RESULT = new SubstrFunction(str,start,end);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("substr",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // isEqual ::= IS_EQUAL LPAREN expression COMMA expression RPAREN 
            {
              IsEqual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
							RESULT = new IsEqual(e1,e2);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isEqual",26, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // isEqv ::= IS_EQV LPAREN expression COMMA expression RPAREN 
            {
              IsEqv RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
							RESULT = new IsEqv(e1,e2);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isEqv",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // allLists ::= list 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("allLists",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // allLists ::= list2 
            {
              ListFunction RESULT =null;
		int lst2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lst2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst2 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=lst2; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("allLists",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list2 ::= RSQBRACKET expListE LSQBRACKET 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
				RESULT = new ListFunction(lst);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list2",22, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list ::= LIST LPAREN list2 RPAREN 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
			RESULT = lst;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",21, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expListE ::= expList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expList ::= expression COMMA expList 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
											
											pl.add(0,v); 
											RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expList",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expList ::= NIL 
            {
              ArrayList<Exp> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
									RESULT = new ArrayList<>();
									
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expList",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // isPair ::= IS_PAIR LPAREN expression RPAREN 
            {
              IsPairFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		RESULT = new IsPairFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isPair",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // car ::= CAR LPAREN pair RPAREN 
            {
              CarFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		// System.out.println("inside car");
		RESULT = new CarFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("car",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // car ::= CAR LPAREN VARIABLE RPAREN 
            {
              CarFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		// System.out.println("inside car");
		ExpVar var = new ExpVar(p);
		RESULT = new CarFunction(var);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("car",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cdr ::= CDR LPAREN pair RPAREN 
            {
              CdrFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		RESULT = new CdrFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cdr",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cdr ::= CDR LPAREN VARIABLE RPAREN 
            {
              CdrFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		ExpVar var = new ExpVar(p);
		RESULT = new CdrFunction(var);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cdr",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              PairFunction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		ArrayList<Exp> store = new ArrayList<>();
		store.add(e1);
		store.add(e2);
		RESULT = new PairFunction("pair",store);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = a; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= string 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= procedures 
            {
              Exp RESULT =null;
		int prdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int prdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp prd = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=prd; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CarFunction c = (CarFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CdrFunction c = (CdrFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= isPair 
            {
              Exp RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsPairFunction ip = (IsPairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = ip; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= allLists 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= vecSize 
            {
              Exp RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		SizeVectorFunction vs = (SizeVectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		  RESULT = vs;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= isEqv 
            {
              Exp RESULT =null;
		int eqvleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eqvright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsEqv eqv = (IsEqv)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = eqv; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= isEqual 
            {
              Exp RESULT =null;
		int isEqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int isEqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsEqual isEq = (IsEqual)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = isEq; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= substr 
            {
              Exp RESULT =null;
		int subsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int subsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		SubstrFunction subs = (SubstrFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=subs; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CallFunction c = (CallFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= comp 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= n; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // letExp ::= LET bindings IN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
           
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("letExp",4, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binding",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // power ::= factor EXPO power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpExpo(f,p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=f; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // comp ::= power EEQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
              System.out.println("in here");
              RESULT=new ExpComp(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // comp ::= power GREATER expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		      RESULT= new ExpGreater(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // comp ::= power LESSER expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
		      RESULT= new ExpLesser(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // comp ::= power GREATEREQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  RESULT= new ExpGreaterEqual(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // comp ::= power LESSEREQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
		  RESULT= new ExpLesserEqual(e1,e2);
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // comp ::= power NOTEQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  RESULT= new ExpNotEqual(e1,e2);
		  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // term ::= power MUL term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMul(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term ::= power DIV term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpDiv(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term ::= power MOD term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMod(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // string ::= STR 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpLit( FnPlotValue.make(s) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // complits ::= BOOL_FALSE 
            {
              Boolean RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new Boolean("false"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("complits",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // complits ::= BOOL_TRUE 
            {
              Boolean RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new Boolean("true"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("complits",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // number ::= INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make( ilit ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // number ::= DOUBLE 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // number ::= BIN_INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
Integer val = Integer.parseInt(ilit, 2);
RESULT = FnPlotValue.make(val);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // number ::= HEX_INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
Integer val = Integer.parseInt(ilit, 16);
RESULT = FnPlotValue.make(val);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // number ::= complits 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean ilit = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		FnPlotValue< ? > n = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLit( n ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // factor ::= vector 
            {
              Exp RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		VectorFunction vc = (VectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = vc; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // empty ::= 
            {
              Object RESULT =null;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("empty",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FnPlotParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
              return CUP$FnPlotParser$do_action_part00000000(
                               CUP$FnPlotParser$act_num,
                               CUP$FnPlotParser$parser,
                               CUP$FnPlotParser$stack,
                               CUP$FnPlotParser$top);
    }
}

}
