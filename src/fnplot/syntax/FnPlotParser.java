
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fnplot.syntax;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import fnplot.sys.SyntaxFnPlotException;
import fnplot.values.FnPlotValue;
import fnplot.values.FnPlotReal;
import fnplot.syntax.inbuiltfunctions.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class FnPlotParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public FnPlotParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public FnPlotParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public FnPlotParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\003\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\003\000\002\005\003\000\002\005\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\065\003\000\002\065\003\000\002\066\005\000\002" +
    "\066\003\000\002\064\010\000\002\063\005\000\002\062" +
    "\012\000\002\061\006\000\002\060\006\000\002\056\003" +
    "\000\002\056\003\000\002\057\005\000\002\057\003\000" +
    "\002\055\011\000\002\054\005\000\002\054\003\000\002" +
    "\053\010\000\002\050\006\000\002\051\003\000\002\051" +
    "\003\000\002\052\005\000\002\052\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\047\005\000" +
    "\002\045\011\000\002\044\011\000\002\042\003\000\002" +
    "\042\003\000\002\043\005\000\002\043\003\000\002\041" +
    "\004\000\002\041\003\000\002\036\012\000\002\002\005" +
    "\000\002\035\010\000\002\034\010\000\002\032\003\000" +
    "\002\032\003\000\002\031\005\000\002\030\006\000\002" +
    "\021\003\000\002\021\003\000\002\022\005\000\002\022" +
    "\003\000\002\027\006\000\002\025\006\000\002\025\006" +
    "\000\002\026\006\000\002\026\006\000\002\024\010\000" +
    "\002\013\003\000\002\013\005\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\007\006\000\002\012" +
    "\005\000\002\010\004\000\002\010\003\000\002\011\005" +
    "\000\002\011\003\000\002\006\006\000\002\014\005\000" +
    "\002\014\005\000\002\014\003\000\002\023\005\000\002" +
    "\023\003\000\002\040\005\000\002\040\005\000\002\040" +
    "\005\000\002\040\005\000\002\040\005\000\002\040\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\003\000\002\033\003\000\002\037\003\000\002" +
    "\037\003\000\002\017\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\005\000\002\016\003\000" +
    "\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\064\004\020\010\067\021\064\023\055\036" +
    "\046\037\015\040\021\041\050\042\062\044\047\045\037" +
    "\046\063\047\072\051\031\052\043\053\036\056\014\057" +
    "\016\060\017\061\056\062\012\063\024\064\051\065\065" +
    "\066\073\001\002\000\004\002\357\001\002\000\070\002" +
    "\ufffb\004\ufffb\010\ufffb\021\ufffb\023\ufffb\024\ufffb\036\ufffb" +
    "\037\ufffb\040\ufffb\041\ufffb\042\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\051\ufffb\052\ufffb\053\ufffb\056\ufffb\057\ufffb" +
    "\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064\ufffb\065\ufffb\066" +
    "\ufffb\001\002\000\022\005\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\022\uffb6\025\uffb6\026\uffb6\054\uffb6\001\002\000\054\004" +
    "\uff91\005\uff91\010\uff91\011\uff91\012\uff91\013\uff91\014\uff91" +
    "\015\uff91\016\uff91\017\uff91\022\uff91\025\uff91\026\uff91\027" +
    "\uff91\030\uff91\031\uff91\032\uff91\033\uff91\034\uff91\035\uff91" +
    "\054\uff91\001\002\000\022\005\uffb5\010\uffb5\011\uffb5\012" +
    "\uffb5\022\uffb5\025\uffb5\026\uffb5\054\uffb5\001\002\000\066" +
    "\002\001\004\020\010\067\021\064\023\055\036\046\037" +
    "\015\040\021\041\050\042\062\044\047\045\037\046\063" +
    "\047\072\051\031\052\043\053\036\056\014\057\016\060" +
    "\017\061\056\062\012\063\024\064\051\065\065\066\073" +
    "\001\002\000\022\005\uff9c\010\uff9c\011\uff9c\012\uff9c\022" +
    "\uff9c\025\uff9c\026\uff9c\054\uff9c\001\002\000\070\002\ufffd" +
    "\004\ufffd\010\ufffd\021\ufffd\023\ufffd\024\ufffd\036\ufffd\037" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\047\ufffd\051\ufffd\052\ufffd\053\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd" +
    "\001\002\000\004\023\342\001\002\000\004\004\335\001" +
    "\002\000\054\004\uff99\005\uff99\010\uff99\011\uff99\012\uff99" +
    "\013\uff99\014\uff99\015\uff99\016\uff99\017\uff99\022\uff99\025" +
    "\uff99\026\uff99\027\uff99\030\uff99\031\uff99\032\uff99\033\uff99" +
    "\034\uff99\035\uff99\054\uff99\001\002\000\054\004\uff98\005" +
    "\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\017\uff98\022\uff98\025\uff98\026\uff98\027\uff98\030" +
    "\uff98\031\uff98\032\uff98\033\uff98\034\uff98\035\uff98\054\uff98" +
    "\001\002\000\060\004\020\010\067\021\064\023\055\036" +
    "\046\037\015\040\021\041\050\042\062\044\047\045\037" +
    "\046\063\047\072\051\031\052\043\057\016\060\017\061" +
    "\115\062\012\063\024\064\051\065\065\066\073\001\002" +
    "\000\004\004\326\001\002\000\022\005\uffb7\010\uffb7\011" +
    "\uffb7\012\uffb7\022\uffb7\025\uffb7\026\uffb7\054\uffb7\001\002" +
    "\000\022\005\uffc0\010\uffc0\011\uffc0\012\uffc0\022\uffc0\025" +
    "\uffc0\026\uffc0\054\uffc0\001\002\000\054\004\uff9a\005\uff9a" +
    "\010\uff9a\011\uff9a\012\uff9a\013\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\017\uff9a\022\uff9a\025\uff9a\026\uff9a\027\uff9a\030\uff9a" +
    "\031\uff9a\032\uff9a\033\uff9a\034\uff9a\035\uff9a\054\uff9a\001" +
    "\002\000\022\005\uffc1\010\uffc1\011\uffc1\012\uffc1\022\uffc1" +
    "\025\uffc1\026\uffc1\054\uffc1\001\002\000\022\005\uffbf\010" +
    "\uffbf\011\uffbf\012\uffbf\022\uffbf\025\uffbf\026\uffbf\054\uffbf" +
    "\001\002\000\022\005\uffe1\010\uffe1\011\uffe1\012\uffe1\022" +
    "\uffe1\025\uffe1\026\uffe1\054\uffe1\001\002\000\022\005\uffb9" +
    "\010\uffb9\011\uffb9\012\uffb9\022\uffb9\025\uffb9\026\uffb9\054" +
    "\uffb9\001\002\000\004\004\321\001\002\000\022\005\uffba" +
    "\010\uffba\011\uffba\012\uffba\022\uffba\025\uffba\026\uffba\054" +
    "\uffba\001\002\000\022\005\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\022\uffc4\025\uffc4\026\uffc4\054\uffc4\001\002\000\022\005" +
    "\uffb4\010\uffb4\011\uffb4\012\uffb4\022\uffb4\025\uffb4\026\uffb4" +
    "\054\uffb4\001\002\000\024\005\uffd2\006\uffd2\010\uffd2\011" +
    "\uffd2\012\uffd2\022\uffd2\025\uffd2\026\uffd2\054\uffd2\001\002" +
    "\000\060\004\020\010\067\021\064\023\055\036\046\037" +
    "\015\040\021\041\050\042\062\044\047\045\037\046\063" +
    "\047\072\051\031\052\043\057\016\060\017\061\115\062" +
    "\012\063\024\064\051\065\065\066\073\001\002\000\004" +
    "\004\305\001\002\000\022\005\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\022\uffe2\025\uffe2\026\uffe2\054\uffe2\001\002\000\006" +
    "\010\301\026\302\001\002\000\024\005\uffbb\006\277\010" +
    "\uffbb\011\uffbb\012\uffbb\022\uffbb\025\uffbb\026\uffbb\054\uffbb" +
    "\001\002\000\004\004\274\001\002\000\022\005\uffb3\010" +
    "\uffb3\011\uffb3\012\uffb3\022\uffb3\025\uffb3\026\uffb3\054\uffb3" +
    "\001\002\000\026\005\uffa9\010\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\022\uffa9\025\uffa9\026\uffa9\054\uffa9\001\002" +
    "\000\004\004\267\001\002\000\004\004\262\001\002\000" +
    "\004\004\257\001\002\000\054\004\uff9b\005\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017" +
    "\uff9b\022\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b\031\uff9b" +
    "\032\uff9b\033\uff9b\034\uff9b\035\uff9b\054\uff9b\001\002\000" +
    "\022\005\uffbe\010\uffbe\011\uffbe\012\uffbe\022\uffbe\025\uffbe" +
    "\026\uffbe\054\uffbe\001\002\000\026\005\uffc2\010\uffc2\011" +
    "\uffc2\012\uffc2\013\253\014\254\022\uffc2\025\uffc2\026\uffc2" +
    "\054\uffc2\001\002\000\022\005\uffbd\010\uffbd\011\uffbd\012" +
    "\uffbd\022\uffbd\025\uffbd\026\uffbd\054\uffbd\001\002\000\064" +
    "\004\020\010\067\021\064\023\055\036\046\037\015\040" +
    "\021\041\050\042\062\044\047\045\037\046\063\047\072" +
    "\051\031\052\043\053\036\056\014\057\016\060\017\061" +
    "\056\062\012\063\024\064\051\065\065\066\073\001\002" +
    "\000\042\004\uff93\010\uff93\013\uff93\014\uff93\015\uff93\016" +
    "\uff93\017\uff93\020\245\026\uff93\027\uff93\030\uff93\031\uff93" +
    "\032\uff93\033\uff93\034\uff93\035\uff93\001\002\000\054\004" +
    "\uff95\005\uff95\010\uff95\011\uff95\012\uff95\013\uff95\014\uff95" +
    "\015\uff95\016\uff95\017\uff95\022\uff95\025\uff95\026\uff95\027" +
    "\uff95\030\uff95\031\uff95\032\uff95\033\uff95\034\uff95\035\uff95" +
    "\054\uff95\001\002\000\022\005\uffb8\010\uffb8\011\uffb8\012" +
    "\uffb8\022\uffb8\025\uffb8\026\uffb8\054\uffb8\001\002\000\022" +
    "\005\uffe0\010\uffe0\011\uffe0\012\uffe0\022\uffe0\025\uffe0\026" +
    "\uffe0\054\uffe0\001\002\000\004\004\241\001\002\000\004" +
    "\004\232\001\002\000\006\022\uff90\061\217\001\002\000" +
    "\054\004\uff97\005\uff97\010\uff97\011\uff97\012\uff97\013\uff97" +
    "\014\uff97\015\uff97\016\uff97\017\uff97\022\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\032\uff97\033\uff97\034\uff97" +
    "\035\uff97\054\uff97\001\002\000\070\002\ufffa\004\ufffa\010" +
    "\ufffa\021\ufffa\023\ufffa\024\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa" +
    "\062\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa\001\002\000" +
    "\066\004\020\010\067\011\uff90\012\121\021\064\023\055" +
    "\036\046\037\015\040\021\041\050\042\062\043\206\044" +
    "\047\045\037\046\063\047\072\051\031\052\043\057\016" +
    "\060\017\061\115\062\012\063\024\064\051\065\065\066" +
    "\073\001\002\000\024\005\uffd1\006\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\022\uffd1\025\uffd1\026\uffd1\054\uffd1\001\002\000" +
    "\022\005\uffbc\010\uffbc\011\uffbc\012\uffbc\022\uffbc\025\uffbc" +
    "\026\uffbc\054\uffbc\001\002\000\006\004\160\061\161\001" +
    "\002\000\054\004\uff96\005\uff96\010\uff96\011\uff96\012\uff96" +
    "\013\uff96\014\uff96\015\uff96\016\uff96\017\uff96\022\uff96\025" +
    "\uff96\026\uff96\027\uff96\030\uff96\031\uff96\032\uff96\033\uff96" +
    "\034\uff96\035\uff96\054\uff96\001\002\000\054\004\150\005" +
    "\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\017\uffa7\022\uffa7\025\uffa7\026\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\117\054\uffa7" +
    "\001\002\000\004\026\147\001\002\000\050\005\uff9d\010" +
    "\uff9d\011\uff9d\012\uff9d\013\uff9d\014\uff9d\015\111\016\107" +
    "\017\103\022\uff9d\025\uff9d\026\uff9d\027\104\030\102\031" +
    "\110\032\106\033\101\034\105\054\uff9d\001\002\000\070" +
    "\002\ufffe\004\ufffe\010\ufffe\021\ufffe\023\ufffe\024\ufffe\036" +
    "\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\044\ufffe\045\ufffe" +
    "\046\ufffe\047\ufffe\051\ufffe\052\ufffe\053\ufffe\056\ufffe\057" +
    "\ufffe\060\ufffe\061\ufffe\062\ufffe\063\ufffe\064\ufffe\065\ufffe" +
    "\066\ufffe\001\002\000\054\004\uff94\005\uff94\010\uff94\011" +
    "\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\017\uff94" +
    "\022\uff94\025\uff94\026\uff94\027\uff94\030\uff94\031\uff94\032" +
    "\uff94\033\uff94\034\uff94\035\uff94\054\uff94\001\002\000\060" +
    "\004\020\010\067\021\064\023\055\036\046\037\015\040" +
    "\021\041\050\042\062\044\047\045\037\046\063\047\072" +
    "\051\031\052\043\057\016\060\017\061\115\062\012\063" +
    "\024\064\051\065\065\066\073\001\002\000\060\004\020" +
    "\010\067\021\064\023\055\036\046\037\015\040\021\041" +
    "\050\042\062\044\047\045\037\046\063\047\072\051\031" +
    "\052\043\057\016\060\017\061\115\062\012\063\024\064" +
    "\051\065\065\066\073\001\002\000\024\004\020\010\114" +
    "\057\016\060\017\061\115\063\024\064\051\065\065\066" +
    "\073\001\002\000\060\004\020\010\067\021\064\023\055" +
    "\036\046\037\015\040\021\041\050\042\062\044\047\045" +
    "\037\046\063\047\072\051\031\052\043\057\016\060\017" +
    "\061\115\062\012\063\024\064\051\065\065\066\073\001" +
    "\002\000\060\004\020\010\067\021\064\023\055\036\046" +
    "\037\015\040\021\041\050\042\062\044\047\045\037\046" +
    "\063\047\072\051\031\052\043\057\016\060\017\061\115" +
    "\062\012\063\024\064\051\065\065\066\073\001\002\000" +
    "\060\004\020\010\067\021\064\023\055\036\046\037\015" +
    "\040\021\041\050\042\062\044\047\045\037\046\063\047" +
    "\072\051\031\052\043\057\016\060\017\061\115\062\012" +
    "\063\024\064\051\065\065\066\073\001\002\000\024\004" +
    "\020\010\114\057\016\060\017\061\115\063\024\064\051" +
    "\065\065\066\073\001\002\000\060\004\020\010\067\021" +
    "\064\023\055\036\046\037\015\040\021\041\050\042\062" +
    "\044\047\045\037\046\063\047\072\051\031\052\043\057" +
    "\016\060\017\061\115\062\012\063\024\064\051\065\065" +
    "\066\073\001\002\000\024\004\020\010\114\057\016\060" +
    "\017\061\115\063\024\064\051\065\065\066\073\001\002" +
    "\000\034\005\uff9d\010\uff9d\011\uff9d\012\uff9d\013\uff9d\014" +
    "\uff9d\015\111\016\107\017\103\022\uff9d\025\uff9d\026\uff9d" +
    "\054\uff9d\001\002\000\026\005\uffa0\010\uffa0\011\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\022\uffa0\025\uffa0\026\uffa0\054\uffa0" +
    "\001\002\000\004\012\121\001\002\000\054\004\uff93\005" +
    "\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93" +
    "\016\uff93\017\uff93\022\uff93\025\uff93\026\uff93\027\uff93\030" +
    "\uff93\031\uff93\032\uff93\033\uff93\034\uff93\035\uff93\054\uff93" +
    "\001\002\000\052\005\uffa7\010\uffa7\011\uffa7\012\uffa7\013" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\022\uffa7\025\uffa7" +
    "\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034" +
    "\uffa7\035\117\054\uffa7\001\002\000\024\004\020\010\114" +
    "\057\016\060\017\061\115\063\024\064\051\065\065\066" +
    "\073\001\002\000\050\005\uffa8\010\uffa8\011\uffa8\012\uffa8" +
    "\013\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\022\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\054\uffa8\001\002\000\004\010\122\001\002\000" +
    "\062\004\020\010\067\011\uff90\021\064\023\055\036\046" +
    "\037\015\040\021\041\050\042\062\044\047\045\037\046" +
    "\063\047\072\051\031\052\043\057\016\060\017\061\115" +
    "\062\012\063\024\064\051\065\065\066\073\001\002\000" +
    "\004\011\uffee\001\002\000\004\011\134\001\002\000\006" +
    "\011\uffec\025\uffec\001\002\000\010\011\uffe9\012\132\025" +
    "\uffe9\001\002\000\006\011\uffef\025\130\001\002\000\060" +
    "\004\020\010\067\021\064\023\055\036\046\037\015\040" +
    "\021\041\050\042\062\044\047\045\037\046\063\047\072" +
    "\051\031\052\043\057\016\060\017\061\115\062\012\063" +
    "\024\064\051\065\065\066\073\001\002\000\006\011\uffed" +
    "\025\uffed\001\002\000\060\004\020\010\067\021\064\023" +
    "\055\036\046\037\015\040\021\041\050\042\062\044\047" +
    "\045\037\046\063\047\072\051\031\052\043\057\016\060" +
    "\017\061\115\062\012\063\024\064\051\065\065\066\073" +
    "\001\002\000\006\011\uffea\025\uffea\001\002\000\004\012" +
    "\135\001\002\000\004\011\136\001\002\000\054\004\uffeb" +
    "\005\uffeb\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\022\uffeb\025\uffeb\026\uffeb\027\uffeb" +
    "\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\054" +
    "\uffeb\001\002\000\022\005\uffa3\010\uffa3\011\uffa3\012\uffa3" +
    "\022\uffa3\025\uffa3\026\uffa3\054\uffa3\001\002\000\026\005" +
    "\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014\uff9f\022\uff9f" +
    "\025\uff9f\026\uff9f\054\uff9f\001\002\000\022\005\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\022\uffa2\025\uffa2\026\uffa2\054\uffa2" +
    "\001\002\000\022\005\uffa6\010\uffa6\011\uffa6\012\uffa6\022" +
    "\uffa6\025\uffa6\026\uffa6\054\uffa6\001\002\000\022\005\uffa5" +
    "\010\uffa5\011\uffa5\012\uffa5\022\uffa5\025\uffa5\026\uffa5\054" +
    "\uffa5\001\002\000\026\005\uff9e\010\uff9e\011\uff9e\012\uff9e" +
    "\013\uff9e\014\uff9e\022\uff9e\025\uff9e\026\uff9e\054\uff9e\001" +
    "\002\000\022\005\uffa4\010\uffa4\011\uffa4\012\uffa4\022\uffa4" +
    "\025\uffa4\026\uffa4\054\uffa4\001\002\000\022\005\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\022\uffa1\025\uffa1\026\uffa1\054\uffa1" +
    "\001\002\000\070\002\ufff9\004\ufff9\010\ufff9\021\ufff9\023" +
    "\ufff9\024\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\042\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\047\ufff9\051\ufff9\052\ufff9\053" +
    "\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\001\002\000\062\004\020\005" +
    "\uff90\010\067\021\064\023\055\036\046\037\015\040\021" +
    "\041\050\042\062\044\047\045\037\046\063\047\072\051" +
    "\031\052\043\057\016\060\017\061\115\062\012\063\024" +
    "\064\051\065\065\066\073\001\002\000\004\005\uffe5\001" +
    "\002\000\006\005\uffe6\025\156\001\002\000\006\005\uffe3" +
    "\025\uffe3\001\002\000\004\005\155\001\002\000\022\005" +
    "\uffe7\010\uffe7\011\uffe7\012\uffe7\022\uffe7\025\uffe7\026\uffe7" +
    "\054\uffe7\001\002\000\060\004\020\010\067\021\064\023" +
    "\055\036\046\037\015\040\021\041\050\042\062\044\047" +
    "\045\037\046\063\047\072\051\031\052\043\057\016\060" +
    "\017\061\115\062\012\063\024\064\051\065\065\066\073" +
    "\001\002\000\006\005\uffe4\025\uffe4\001\002\000\012\010" +
    "\165\050\uff90\061\171\067\167\001\002\000\060\004\020" +
    "\010\067\021\064\023\055\036\046\037\015\040\021\041" +
    "\050\042\062\044\047\045\037\046\063\047\072\051\031" +
    "\052\043\057\016\060\017\061\115\062\012\063\024\064" +
    "\051\065\065\066\073\001\002\000\022\005\uffdf\010\uffdf" +
    "\011\uffdf\012\uffdf\022\uffdf\025\uffdf\026\uffdf\054\uffdf\001" +
    "\002\000\010\011\uffdc\025\203\050\uffdc\001\002\000\004" +
    "\050\177\001\002\000\010\011\uff90\061\171\067\167\001" +
    "\002\000\006\011\uffdb\050\uffdb\001\002\000\004\061\172" +
    "\001\002\000\010\011\uffd9\025\uffd9\050\uffd9\001\002\000" +
    "\012\005\uffd7\011\uffd7\025\uffd7\050\uffd7\001\002\000\012" +
    "\005\uffd8\011\uffd8\025\uffd8\050\uffd8\001\002\000\004\011" +
    "\174\001\002\000\004\005\175\001\002\000\060\004\020" +
    "\010\067\021\064\023\055\036\046\037\015\040\021\041" +
    "\050\042\062\044\047\045\037\046\063\047\072\051\031" +
    "\052\043\057\016\060\017\061\115\062\012\063\024\064" +
    "\051\065\065\066\073\001\002\000\022\005\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\022\uffdd\025\uffdd\026\uffdd\054\uffdd\001" +
    "\002\000\006\061\171\067\167\001\002\000\004\005\201" +
    "\001\002\000\060\004\020\010\067\021\064\023\055\036" +
    "\046\037\015\040\021\041\050\042\062\044\047\045\037" +
    "\046\063\047\072\051\031\052\043\057\016\060\017\061" +
    "\115\062\012\063\024\064\051\065\065\066\073\001\002" +
    "\000\022\005\uffde\010\uffde\011\uffde\012\uffde\022\uffde\025" +
    "\uffde\026\uffde\054\uffde\001\002\000\006\061\171\067\167" +
    "\001\002\000\010\011\uffda\025\uffda\050\uffda\001\002\000" +
    "\004\011\uffcd\001\002\000\004\011\uffcb\001\002\000\004" +
    "\011\214\001\002\000\004\025\212\001\002\000\004\011" +
    "\uffce\001\002\000\062\004\020\010\067\021\064\023\055" +
    "\036\046\037\015\040\021\041\050\042\062\043\206\044" +
    "\047\045\037\046\063\047\072\051\031\052\043\057\016" +
    "\060\017\061\115\062\012\063\024\064\051\065\065\066" +
    "\073\001\002\000\004\011\uffcc\001\002\000\024\005\uffd0" +
    "\006\uffd0\010\uffd0\011\uffd0\012\uffd0\022\uffd0\025\uffd0\026" +
    "\uffd0\054\uffd0\001\002\000\004\022\uffaf\001\002\000\006" +
    "\022\uff90\025\225\001\002\000\004\020\223\001\002\000" +
    "\004\022\221\001\002\000\060\004\020\010\067\021\064" +
    "\023\055\036\046\037\015\040\021\041\050\042\062\044" +
    "\047\045\037\046\063\047\072\051\031\052\043\057\016" +
    "\060\017\061\115\062\012\063\024\064\051\065\065\066" +
    "\073\001\002\000\022\005\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\022\uffb2\025\uffb2\026\uffb2\054\uffb2\001\002\000\060\004" +
    "\020\010\067\021\064\023\055\036\046\037\015\040\021" +
    "\041\050\042\062\044\047\045\037\046\063\047\072\051" +
    "\031\052\043\057\016\060\017\061\115\062\012\063\024" +
    "\064\051\065\065\066\073\001\002\000\006\022\uffb1\025" +
    "\uffb1\001\002\000\004\061\217\001\002\000\004\022\uffad" +
    "\001\002\000\004\022\uffb0\001\002\000\006\022\uff90\025" +
    "\225\001\002\000\004\022\uffae\001\002\000\060\004\020" +
    "\010\067\021\064\023\055\036\046\037\015\040\021\041" +
    "\050\042\062\044\047\045\037\046\063\047\072\051\031" +
    "\052\043\057\016\060\017\061\115\062\012\063\024\064" +
    "\051\065\065\066\073\001\002\000\004\025\234\001\002" +
    "\000\060\004\020\010\067\021\064\023\055\036\046\037" +
    "\015\040\021\041\050\042\062\044\047\045\037\046\063" +
    "\047\072\051\031\052\043\057\016\060\017\061\115\062" +
    "\012\063\024\064\051\065\065\066\073\001\002\000\004" +
    "\025\236\001\002\000\060\004\020\010\067\021\064\023" +
    "\055\036\046\037\015\040\021\041\050\042\062\044\047" +
    "\045\037\046\063\047\072\051\031\052\043\057\016\060" +
    "\017\061\115\062\012\063\024\064\051\065\065\066\073" +
    "\001\002\000\004\005\240\001\002\000\022\005\uffd6\010" +
    "\uffd6\011\uffd6\012\uffd6\022\uffd6\025\uffd6\026\uffd6\054\uffd6" +
    "\001\002\000\004\010\242\001\002\000\064\004\020\010" +
    "\067\011\uff90\021\064\023\055\036\046\037\015\040\021" +
    "\041\050\042\062\043\206\044\047\045\037\046\063\047" +
    "\072\051\031\052\043\057\016\060\017\061\115\062\012" +
    "\063\024\064\051\065\065\066\073\001\002\000\004\005" +
    "\244\001\002\000\024\005\uffcf\006\uffcf\010\uffcf\011\uffcf" +
    "\012\uffcf\022\uffcf\025\uffcf\026\uffcf\054\uffcf\001\002\000" +
    "\060\004\020\010\067\021\064\023\055\036\046\037\015" +
    "\040\021\041\050\042\062\044\047\045\037\046\063\047" +
    "\072\051\031\052\043\057\016\060\017\061\115\062\012" +
    "\063\024\064\051\065\065\066\073\001\002\000\004\026" +
    "\247\001\002\000\070\002\uffac\004\uffac\010\uffac\021\uffac" +
    "\023\uffac\024\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042" +
    "\uffac\044\uffac\045\uffac\046\uffac\047\uffac\051\uffac\052\uffac" +
    "\053\uffac\056\uffac\057\uffac\060\uffac\061\uffac\062\uffac\063" +
    "\uffac\064\uffac\065\uffac\066\uffac\001\002\000\066\004\020" +
    "\010\067\021\064\023\055\024\251\036\046\037\015\040" +
    "\021\041\050\042\062\044\047\045\037\046\063\047\072" +
    "\051\031\052\043\053\036\056\014\057\016\060\017\061" +
    "\056\062\012\063\024\064\051\065\065\066\073\001\002" +
    "\000\022\005\uffc3\010\uffc3\011\uffc3\012\uffc3\022\uffc3\025" +
    "\uffc3\026\uffc3\054\uffc3\001\002\000\070\002\uffff\004\uffff" +
    "\010\uffff\021\uffff\023\uffff\024\uffff\036\uffff\037\uffff\040" +
    "\uffff\041\uffff\042\uffff\044\uffff\045\uffff\046\uffff\047\uffff" +
    "\051\uffff\052\uffff\053\uffff\056\uffff\057\uffff\060\uffff\061" +
    "\uffff\062\uffff\063\uffff\064\uffff\065\uffff\066\uffff\001\002" +
    "\000\024\004\020\010\114\057\016\060\017\061\115\063" +
    "\024\064\051\065\065\066\073\001\002\000\024\004\020" +
    "\010\114\057\016\060\017\061\115\063\024\064\051\065" +
    "\065\066\073\001\002\000\026\005\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\014\uffaa\022\uffaa\025\uffaa\026\uffaa\054" +
    "\uffaa\001\002\000\026\005\uffab\010\uffab\011\uffab\012\uffab" +
    "\013\uffab\014\uffab\022\uffab\025\uffab\026\uffab\054\uffab\001" +
    "\002\000\060\004\020\010\067\021\064\023\055\036\046" +
    "\037\015\040\021\041\050\042\062\044\047\045\037\046" +
    "\063\047\072\051\031\052\043\057\016\060\017\061\115" +
    "\062\012\063\024\064\051\065\065\066\073\001\002\000" +
    "\004\005\261\001\002\000\022\005\uffca\010\uffca\011\uffca" +
    "\012\uffca\022\uffca\025\uffca\026\uffca\054\uffca\001\002\000" +
    "\060\004\020\010\067\021\064\023\055\036\046\037\015" +
    "\040\021\041\050\042\062\044\047\045\037\046\063\047" +
    "\072\051\031\052\043\057\016\060\017\061\115\062\012" +
    "\063\024\064\051\065\065\066\073\001\002\000\004\025" +
    "\264\001\002\000\060\004\020\010\067\021\064\023\055" +
    "\036\046\037\015\040\021\041\050\042\062\044\047\045" +
    "\037\046\063\047\072\051\031\052\043\057\016\060\017" +
    "\061\115\062\012\063\024\064\051\065\065\066\073\001" +
    "\002\000\004\005\266\001\002\000\022\005\uffd3\010\uffd3" +
    "\011\uffd3\012\uffd3\022\uffd3\025\uffd3\026\uffd3\054\uffd3\001" +
    "\002\000\060\004\020\010\067\021\064\023\055\036\046" +
    "\037\015\040\021\041\050\042\062\044\047\045\037\046" +
    "\063\047\072\051\031\052\043\057\016\060\017\061\115" +
    "\062\012\063\024\064\051\065\065\066\073\001\002\000" +
    "\004\025\271\001\002\000\060\004\020\010\067\021\064" +
    "\023\055\036\046\037\015\040\021\041\050\042\062\044" +
    "\047\045\037\046\063\047\072\051\031\052\043\057\016" +
    "\060\017\061\115\062\012\063\024\064\051\065\065\066" +
    "\073\001\002\000\004\005\273\001\002\000\022\005\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\022\uffc5\025\uffc5\026\uffc5\054" +
    "\uffc5\001\002\000\060\004\020\010\067\021\064\023\055" +
    "\036\046\037\015\040\021\041\050\042\062\044\047\045" +
    "\037\046\063\047\072\051\031\052\043\057\016\060\017" +
    "\061\115\062\012\063\024\064\051\065\065\066\073\001" +
    "\002\000\004\005\276\001\002\000\022\005\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\022\ufff1\025\ufff1\026\ufff1\054\ufff1\001" +
    "\002\000\006\010\242\042\062\001\002\000\022\005\uffd5" +
    "\010\uffd5\011\uffd5\012\uffd5\022\uffd5\025\uffd5\026\uffd5\054" +
    "\uffd5\001\002\000\060\004\020\010\067\021\064\023\055" +
    "\036\046\037\015\040\021\041\050\042\062\044\047\045" +
    "\037\046\063\047\072\051\031\052\043\057\016\060\017" +
    "\061\115\062\012\063\024\064\051\065\065\066\073\001" +
    "\002\000\070\002\ufffc\004\ufffc\010\ufffc\021\ufffc\023\ufffc" +
    "\024\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\044" +
    "\ufffc\045\ufffc\046\ufffc\047\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\056\ufffc\057\ufffc\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064" +
    "\ufffc\065\ufffc\066\ufffc\001\002\000\004\011\304\001\002" +
    "\000\004\026\ufff0\001\002\000\060\004\020\010\067\021" +
    "\064\023\055\036\046\037\015\040\021\041\050\042\062" +
    "\044\047\045\037\046\063\047\072\051\031\052\043\057" +
    "\016\060\017\061\115\062\012\063\024\064\051\065\065" +
    "\066\073\001\002\000\004\025\307\001\002\000\060\004" +
    "\020\010\067\021\064\023\055\036\046\037\015\040\021" +
    "\041\050\042\062\044\047\045\037\046\063\047\072\051" +
    "\031\052\043\057\016\060\017\061\115\062\012\063\024" +
    "\064\051\065\065\066\073\001\002\000\004\005\311\001" +
    "\002\000\022\005\uffd4\010\uffd4\011\uffd4\012\uffd4\022\uffd4" +
    "\025\uffd4\026\uffd4\054\uffd4\001\002\000\004\054\313\001" +
    "\002\000\060\004\020\010\067\021\064\023\055\036\046" +
    "\037\015\040\021\041\050\042\062\044\047\045\037\046" +
    "\063\047\072\051\031\052\043\057\016\060\017\061\115" +
    "\062\012\063\024\064\051\065\065\066\073\001\002\000" +
    "\004\010\315\001\002\000\004\055\316\001\002\000\060" +
    "\004\020\010\067\021\064\023\055\036\046\037\015\040" +
    "\021\041\050\042\062\044\047\045\037\046\063\047\072" +
    "\051\031\052\043\057\016\060\017\061\115\062\012\063" +
    "\024\064\051\065\065\066\073\001\002\000\004\011\320" +
    "\001\002\000\070\002\ufff2\004\ufff2\010\ufff2\021\ufff2\023" +
    "\ufff2\024\ufff2\036\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\044\ufff2\045\ufff2\046\ufff2\047\ufff2\051\ufff2\052\ufff2\053" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\064\ufff2\065\ufff2\066\ufff2\001\002\000\060\004\020\010" +
    "\067\021\064\023\055\036\046\037\015\040\021\041\050" +
    "\042\062\044\047\045\037\046\063\047\072\051\031\052" +
    "\043\057\016\060\017\061\115\062\012\063\024\064\051" +
    "\065\065\066\073\001\002\000\004\025\323\001\002\000" +
    "\060\004\020\010\067\021\064\023\055\036\046\037\015" +
    "\040\021\041\050\042\062\044\047\045\037\046\063\047" +
    "\072\051\031\052\043\057\016\060\017\061\115\062\012" +
    "\063\024\064\051\065\065\066\073\001\002\000\004\005" +
    "\325\001\002\000\022\005\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\022\uffe8\025\uffe8\026\uffe8\054\uffe8\001\002\000\006\036" +
    "\046\061\330\001\002\000\004\005\332\001\002\000\004" +
    "\005\331\001\002\000\022\005\uffc6\010\uffc6\011\uffc6\012" +
    "\uffc6\022\uffc6\025\uffc6\026\uffc6\054\uffc6\001\002\000\022" +
    "\005\uffc7\010\uffc7\011\uffc7\012\uffc7\022\uffc7\025\uffc7\026" +
    "\uffc7\054\uffc7\001\002\000\004\005\334\001\002\000\054" +
    "\004\uff92\005\uff92\010\uff92\011\uff92\012\uff92\013\uff92\014" +
    "\uff92\015\uff92\016\uff92\017\uff92\022\uff92\025\uff92\026\uff92" +
    "\027\uff92\030\uff92\031\uff92\032\uff92\033\uff92\034\uff92\035" +
    "\uff92\054\uff92\001\002\000\006\036\046\061\337\001\002" +
    "\000\004\005\341\001\002\000\004\005\340\001\002\000" +
    "\022\005\uffc8\010\uffc8\011\uffc8\012\uffc8\022\uffc8\025\uffc8" +
    "\026\uffc8\054\uffc8\001\002\000\022\005\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\022\uffc9\025\uffc9\026\uffc9\054\uffc9\001\002" +
    "\000\004\010\343\001\002\000\062\004\020\010\067\011" +
    "\uff90\021\064\023\055\036\046\037\015\040\021\041\050" +
    "\042\062\044\047\045\037\046\063\047\072\051\031\052" +
    "\043\057\016\060\017\061\115\062\012\063\024\064\051" +
    "\065\065\066\073\001\002\000\004\011\ufff7\001\002\000" +
    "\004\011\355\001\002\000\006\011\ufff8\025\353\001\002" +
    "\000\006\011\ufff5\025\ufff5\001\002\000\004\012\351\001" +
    "\002\000\060\004\020\010\067\021\064\023\055\036\046" +
    "\037\015\040\021\041\050\042\062\044\047\045\037\046" +
    "\063\047\072\051\031\052\043\057\016\060\017\061\115" +
    "\062\012\063\024\064\051\065\065\066\073\001\002\000" +
    "\006\011\ufff3\025\ufff3\001\002\000\060\004\020\010\067" +
    "\021\064\023\055\036\046\037\015\040\021\041\050\042" +
    "\062\044\047\045\037\046\063\047\072\051\031\052\043" +
    "\057\016\060\017\061\115\062\012\063\024\064\051\065" +
    "\065\066\073\001\002\000\006\011\ufff6\025\ufff6\001\002" +
    "\000\004\024\356\001\002\000\070\002\ufff4\004\ufff4\010" +
    "\ufff4\021\ufff4\023\ufff4\024\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\042\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\051" +
    "\ufff4\052\ufff4\053\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\062\ufff4\063\ufff4\064\ufff4\065\ufff4\066\ufff4\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\112\002\043\003\003\004\010\005\076\006" +
    "\012\007\032\013\040\014\052\015\044\016\073\017\077" +
    "\023\075\024\025\025\051\026\053\027\070\030\034\031" +
    "\067\032\041\033\024\034\027\035\057\036\021\037\056" +
    "\040\007\044\037\045\026\046\022\047\060\050\033\053" +
    "\005\055\006\060\074\061\031\062\004\064\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\106\002\043\005\251" +
    "\006\012\007\032\013\040\014\052\015\044\016\073\017" +
    "\077\023\075\024\025\025\051\026\053\027\070\030\034" +
    "\031\067\032\041\033\024\034\027\035\057\036\021\037" +
    "\056\040\007\044\037\045\026\046\022\047\060\050\033" +
    "\053\005\055\006\060\074\061\031\062\004\064\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\002\043\007\032\013\332\014\052\015\044\016\073" +
    "\017\077\023\075\024\025\025\051\026\053\027\070\030" +
    "\034\031\067\032\041\033\024\034\027\035\057\036\021" +
    "\037\056\040\007\044\037\045\026\046\022\047\060\050" +
    "\033\053\005\055\006\061\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\002\043" +
    "\007\032\013\311\014\052\015\044\016\073\017\077\023" +
    "\075\024\025\025\051\026\053\027\070\030\034\031\067" +
    "\032\041\033\024\034\027\035\057\036\021\037\056\040" +
    "\007\044\037\045\026\046\022\047\060\050\033\053\005" +
    "\055\006\061\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\110\002" +
    "\043\004\247\005\076\006\012\007\032\013\040\014\052" +
    "\015\044\016\073\017\077\023\075\024\025\025\051\026" +
    "\053\027\070\030\034\031\067\032\041\033\024\034\027" +
    "\035\057\036\021\037\056\040\007\044\037\045\026\046" +
    "\022\047\060\050\033\053\005\055\006\060\074\061\031" +
    "\062\004\064\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\217\012\215\020\214\001" +
    "\001\000\002\001\001\000\002\001\001\000\102\002\043" +
    "\007\032\013\207\014\052\015\044\016\073\017\077\020" +
    "\204\021\206\022\210\023\075\024\025\025\051\026\053" +
    "\027\070\030\034\031\067\032\041\033\024\034\027\035" +
    "\057\036\021\037\056\040\007\044\037\045\026\046\022" +
    "\047\060\050\033\053\005\055\006\061\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\002\043" +
    "\007\032\013\145\014\052\015\044\016\073\017\077\023" +
    "\075\024\025\025\051\026\053\027\070\030\034\031\067" +
    "\032\041\033\024\034\027\035\057\036\021\037\056\040" +
    "\007\044\037\045\026\046\022\047\060\050\033\053\005" +
    "\055\006\061\031\001\001\000\074\002\043\007\032\013" +
    "\144\014\052\015\044\016\073\017\077\023\075\024\025" +
    "\025\051\026\053\027\070\030\034\031\067\032\041\033" +
    "\024\034\027\035\057\036\021\037\056\040\007\044\037" +
    "\045\026\046\022\047\060\050\033\053\005\055\006\061" +
    "\031\001\001\000\016\015\143\016\115\017\077\023\111" +
    "\037\056\055\006\001\001\000\074\002\043\007\032\013" +
    "\142\014\052\015\044\016\073\017\077\023\075\024\025" +
    "\025\051\026\053\027\070\030\034\031\067\032\041\033" +
    "\024\034\027\035\057\036\021\037\056\040\007\044\037" +
    "\045\026\046\022\047\060\050\033\053\005\055\006\061" +
    "\031\001\001\000\074\002\043\007\032\013\141\014\052" +
    "\015\044\016\073\017\077\023\075\024\025\025\051\026" +
    "\053\027\070\030\034\031\067\032\041\033\024\034\027" +
    "\035\057\036\021\037\056\040\007\044\037\045\026\046" +
    "\022\047\060\050\033\053\005\055\006\061\031\001\001" +
    "\000\074\002\043\007\032\013\140\014\052\015\044\016" +
    "\073\017\077\023\075\024\025\025\051\026\053\027\070" +
    "\030\034\031\067\032\041\033\024\034\027\035\057\036" +
    "\021\037\056\040\007\044\037\045\026\046\022\047\060" +
    "\050\033\053\005\055\006\061\031\001\001\000\016\015" +
    "\137\016\115\017\077\023\111\037\056\055\006\001\001" +
    "\000\074\002\043\007\032\013\136\014\052\015\044\016" +
    "\073\017\077\023\075\024\025\025\051\026\053\027\070" +
    "\030\034\031\067\032\041\033\024\034\027\035\057\036" +
    "\021\037\056\040\007\044\037\045\026\046\022\047\060" +
    "\050\033\053\005\055\006\061\031\001\001\000\016\015" +
    "\112\016\115\017\077\023\111\037\056\055\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\016\115\017\077" +
    "\023\117\037\056\055\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\104\002\043\007\032\013\125\014\052" +
    "\015\044\016\073\017\077\020\122\023\075\024\025\025" +
    "\051\026\053\027\070\030\034\031\067\032\041\033\024" +
    "\034\027\035\057\036\021\037\056\040\007\044\037\045" +
    "\026\046\022\047\060\050\033\053\005\054\124\055\006" +
    "\056\123\057\126\061\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\076\002\043\007\032\013\125\014\052\015" +
    "\044\016\073\017\077\023\075\024\025\025\051\026\053" +
    "\027\070\030\034\031\067\032\041\033\024\034\027\035" +
    "\057\036\021\037\056\040\007\044\037\045\026\046\022" +
    "\047\060\050\033\053\005\054\130\055\006\061\031\001" +
    "\001\000\002\001\001\000\074\002\043\007\032\013\132" +
    "\014\052\015\044\016\073\017\077\023\075\024\025\025" +
    "\051\026\053\027\070\030\034\031\067\032\041\033\024" +
    "\034\027\035\057\036\021\037\056\040\007\044\037\045" +
    "\026\046\022\047\060\050\033\053\005\055\006\061\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\102\002\043\007\032\013\152\014\052\015" +
    "\044\016\073\017\077\020\150\023\075\024\025\025\051" +
    "\026\053\027\070\030\034\031\067\032\041\033\024\034" +
    "\027\035\057\036\021\037\056\040\007\044\037\045\026" +
    "\046\022\047\060\050\033\051\153\052\151\053\005\055" +
    "\006\061\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\002\043\007\032\013\156\014\052\015\044\016\073" +
    "\017\077\023\075\024\025\025\051\026\053\027\070\030" +
    "\034\031\067\032\041\033\024\034\027\035\057\036\021" +
    "\037\056\040\007\044\037\045\026\046\022\047\060\050" +
    "\033\053\005\055\006\061\031\001\001\000\002\001\001" +
    "\000\012\020\165\041\167\042\163\043\162\001\001\000" +
    "\074\002\043\007\032\013\161\014\052\015\044\016\073" +
    "\017\077\023\075\024\025\025\051\026\053\027\070\030" +
    "\034\031\067\032\041\033\024\034\027\035\057\036\021" +
    "\037\056\040\007\044\037\045\026\046\022\047\060\050" +
    "\033\053\005\055\006\061\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\165\041" +
    "\167\042\172\043\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\074\002\043" +
    "\007\032\013\175\014\052\015\044\016\073\017\077\023" +
    "\075\024\025\025\051\026\053\027\070\030\034\031\067" +
    "\032\041\033\024\034\027\035\057\036\021\037\056\040" +
    "\007\044\037\045\026\046\022\047\060\050\033\053\005" +
    "\055\006\061\031\001\001\000\002\001\001\000\004\041" +
    "\177\001\001\000\002\001\001\000\074\002\043\007\032" +
    "\013\201\014\052\015\044\016\073\017\077\023\075\024" +
    "\025\025\051\026\053\027\070\030\034\031\067\032\041" +
    "\033\024\034\027\035\057\036\021\037\056\040\007\044" +
    "\037\045\026\046\022\047\060\050\033\053\005\055\006" +
    "\061\031\001\001\000\002\001\001\000\004\041\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\002\043\007\032\013\207\014\052\015\044\016\073" +
    "\017\077\022\212\023\075\024\025\025\051\026\053\027" +
    "\070\030\034\031\067\032\041\033\024\034\027\035\057" +
    "\036\021\037\056\040\007\044\037\045\026\046\022\047" +
    "\060\050\033\053\005\055\006\061\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\226\020\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\002\043\007\032\013\221\014\052\015\044\016" +
    "\073\017\077\023\075\024\025\025\051\026\053\027\070" +
    "\030\034\031\067\032\041\033\024\034\027\035\057\036" +
    "\021\037\056\040\007\044\037\045\026\046\022\047\060" +
    "\050\033\053\005\055\006\061\031\001\001\000\002\001" +
    "\001\000\074\002\043\007\032\013\223\014\052\015\044" +
    "\016\073\017\077\023\075\024\025\025\051\026\053\027" +
    "\070\030\034\031\067\032\041\033\024\034\027\035\057" +
    "\036\021\037\056\040\007\044\037\045\026\046\022\047" +
    "\060\050\033\053\005\055\006\061\031\001\001\000\002" +
    "\001\001\000\004\012\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\230\020\225\001\001\000\002" +
    "\001\001\000\074\002\043\007\032\013\232\014\052\015" +
    "\044\016\073\017\077\023\075\024\025\025\051\026\053" +
    "\027\070\030\034\031\067\032\041\033\024\034\027\035" +
    "\057\036\021\037\056\040\007\044\037\045\026\046\022" +
    "\047\060\050\033\053\005\055\006\061\031\001\001\000" +
    "\002\001\001\000\074\002\043\007\032\013\234\014\052" +
    "\015\044\016\073\017\077\023\075\024\025\025\051\026" +
    "\053\027\070\030\034\031\067\032\041\033\024\034\027" +
    "\035\057\036\021\037\056\040\007\044\037\045\026\046" +
    "\022\047\060\050\033\053\005\055\006\061\031\001\001" +
    "\000\002\001\001\000\074\002\043\007\032\013\236\014" +
    "\052\015\044\016\073\017\077\023\075\024\025\025\051" +
    "\026\053\027\070\030\034\031\067\032\041\033\024\034" +
    "\027\035\057\036\021\037\056\040\007\044\037\045\026" +
    "\046\022\047\060\050\033\053\005\055\006\061\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\242" +
    "\001\001\000\102\002\043\007\032\013\207\014\052\015" +
    "\044\016\073\017\077\020\204\021\206\022\210\023\075" +
    "\024\025\025\051\026\053\027\070\030\034\031\067\032" +
    "\041\033\024\034\027\035\057\036\021\037\056\040\007" +
    "\044\037\045\026\046\022\047\060\050\033\053\005\055" +
    "\006\061\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\002\043\007\032\013\245\014\052\015\044\016" +
    "\073\017\077\023\075\024\025\025\051\026\053\027\070" +
    "\030\034\031\067\032\041\033\024\034\027\035\057\036" +
    "\021\037\056\040\007\044\037\045\026\046\022\047\060" +
    "\050\033\053\005\055\006\061\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\106\002\043\005\251\006\012" +
    "\007\032\013\040\014\052\015\044\016\073\017\077\023" +
    "\075\024\025\025\051\026\053\027\070\030\034\031\067" +
    "\032\041\033\024\034\027\035\057\036\021\037\056\040" +
    "\007\044\037\045\026\046\022\047\060\050\033\053\005" +
    "\055\006\060\074\061\031\062\004\064\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\015\255\016\115" +
    "\017\077\023\111\037\056\055\006\001\001\000\016\015" +
    "\254\016\115\017\077\023\111\037\056\055\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\002\043\007" +
    "\032\013\257\014\052\015\044\016\073\017\077\023\075" +
    "\024\025\025\051\026\053\027\070\030\034\031\067\032" +
    "\041\033\024\034\027\035\057\036\021\037\056\040\007" +
    "\044\037\045\026\046\022\047\060\050\033\053\005\055" +
    "\006\061\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\074\002\043\007\032\013\262\014\052\015\044\016" +
    "\073\017\077\023\075\024\025\025\051\026\053\027\070" +
    "\030\034\031\067\032\041\033\024\034\027\035\057\036" +
    "\021\037\056\040\007\044\037\045\026\046\022\047\060" +
    "\050\033\053\005\055\006\061\031\001\001\000\002\001" +
    "\001\000\074\002\043\007\032\013\264\014\052\015\044" +
    "\016\073\017\077\023\075\024\025\025\051\026\053\027" +
    "\070\030\034\031\067\032\041\033\024\034\027\035\057" +
    "\036\021\037\056\040\007\044\037\045\026\046\022\047" +
    "\060\050\033\053\005\055\006\061\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\002\043\007\032\013" +
    "\267\014\052\015\044\016\073\017\077\023\075\024\025" +
    "\025\051\026\053\027\070\030\034\031\067\032\041\033" +
    "\024\034\027\035\057\036\021\037\056\040\007\044\037" +
    "\045\026\046\022\047\060\050\033\053\005\055\006\061" +
    "\031\001\001\000\002\001\001\000\074\002\043\007\032" +
    "\013\271\014\052\015\044\016\073\017\077\023\075\024" +
    "\025\025\051\026\053\027\070\030\034\031\067\032\041" +
    "\033\024\034\027\035\057\036\021\037\056\040\007\044" +
    "\037\045\026\046\022\047\060\050\033\053\005\055\006" +
    "\061\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\074\002\043\007\032\013\274\014\052\015\044\016\073" +
    "\017\077\023\075\024\025\025\051\026\053\027\070\030" +
    "\034\031\067\032\041\033\024\034\027\035\057\036\021" +
    "\037\056\040\007\044\037\045\026\046\022\047\060\050" +
    "\033\053\005\055\006\061\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\030\034\031\067\032\277\001" +
    "\001\000\002\001\001\000\074\002\043\007\032\013\302" +
    "\014\052\015\044\016\073\017\077\023\075\024\025\025" +
    "\051\026\053\027\070\030\034\031\067\032\041\033\024" +
    "\034\027\035\057\036\021\037\056\040\007\044\037\045" +
    "\026\046\022\047\060\050\033\053\005\055\006\061\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\002\043\007\032\013\305\014\052\015\044" +
    "\016\073\017\077\023\075\024\025\025\051\026\053\027" +
    "\070\030\034\031\067\032\041\033\024\034\027\035\057" +
    "\036\021\037\056\040\007\044\037\045\026\046\022\047" +
    "\060\050\033\053\005\055\006\061\031\001\001\000\002" +
    "\001\001\000\074\002\043\007\032\013\307\014\052\015" +
    "\044\016\073\017\077\023\075\024\025\025\051\026\053" +
    "\027\070\030\034\031\067\032\041\033\024\034\027\035" +
    "\057\036\021\037\056\040\007\044\037\045\026\046\022" +
    "\047\060\050\033\053\005\055\006\061\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\074" +
    "\002\043\007\032\013\313\014\052\015\044\016\073\017" +
    "\077\023\075\024\025\025\051\026\053\027\070\030\034" +
    "\031\067\032\041\033\024\034\027\035\057\036\021\037" +
    "\056\040\007\044\037\045\026\046\022\047\060\050\033" +
    "\053\005\055\006\061\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\074\002\043\007\032\013\316\014\052" +
    "\015\044\016\073\017\077\023\075\024\025\025\051\026" +
    "\053\027\070\030\034\031\067\032\041\033\024\034\027" +
    "\035\057\036\021\037\056\040\007\044\037\045\026\046" +
    "\022\047\060\050\033\053\005\055\006\061\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\074\002\043\007" +
    "\032\013\321\014\052\015\044\016\073\017\077\023\075" +
    "\024\025\025\051\026\053\027\070\030\034\031\067\032" +
    "\041\033\024\034\027\035\057\036\021\037\056\040\007" +
    "\044\037\045\026\046\022\047\060\050\033\053\005\055" +
    "\006\061\031\001\001\000\002\001\001\000\074\002\043" +
    "\007\032\013\323\014\052\015\044\016\073\017\077\023" +
    "\075\024\025\025\051\026\053\027\070\030\034\031\067" +
    "\032\041\033\024\034\027\035\057\036\021\037\056\040" +
    "\007\044\037\045\026\046\022\047\060\050\033\053\005" +
    "\055\006\061\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\326\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\335\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\104\002\043\007\032\013\347" +
    "\014\052\015\044\016\073\017\077\020\343\023\075\024" +
    "\025\025\051\026\053\027\070\030\034\031\067\032\041" +
    "\033\024\034\027\035\057\036\021\037\056\040\007\044" +
    "\037\045\026\046\022\047\060\050\033\053\005\055\006" +
    "\061\031\063\346\065\344\066\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\074\002\043\007\032\013\351\014" +
    "\052\015\044\016\073\017\077\023\075\024\025\025\051" +
    "\026\053\027\070\030\034\031\067\032\041\033\024\034" +
    "\027\035\057\036\021\037\056\040\007\044\037\045\026" +
    "\046\022\047\060\050\033\053\005\055\006\061\031\001" +
    "\001\000\002\001\001\000\076\002\043\007\032\013\347" +
    "\014\052\015\044\016\073\017\077\023\075\024\025\025" +
    "\051\026\053\027\070\030\034\031\067\032\041\033\024" +
    "\034\027\035\057\036\021\037\056\040\007\044\037\045" +
    "\026\046\022\047\060\050\033\053\005\055\006\061\031" +
    "\063\353\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FnPlotParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FnPlotParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FnPlotParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

		try {
		    return lexer.next_token();
		} catch (java.io.IOException ioe) {
                    String msg = "Line " + lexer.getLine() + ", pos " +
				       lexer.getColumn() +
				       ": Unrecognised token <" +
				       lexer.getText() + ">";
		    throw new SyntaxFnPlotException(msg, ioe);
		}
	  
    }


		FnPlotLexer lexer;

		public FnPlotParser(FnPlotLexer l) {
		    // As of CUP v0.11, need to pass Lexer to superclass
		    super(l);
		    lexer = l;
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$FnPlotParser$actions {
  private final FnPlotParser parser;

  /** Constructor */
  CUP$FnPlotParser$actions(FnPlotParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action_part00000000(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FnPlotParser$result;

      /* select the action based on the action number */
      switch (CUP$FnPlotParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              ArithProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ArithProgram(s); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArithProgram start_val = (ArithProgram)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		RESULT = start_val;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$FnPlotParser$parser.done_parsing();
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtList",2, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = d; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // stmt ::= expression SEMI 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // stmt ::= stmtIf 
            {
              Statement RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IfStatement si = (IfStatement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = si; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt ::= case 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CaseStatement c = (CaseStatement)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt ::= vecIndex SEMI 
            {
              Statement RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		VectorIndex vc = (VectorIndex)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT =vc; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cParamListE ::= cParamList 
            {
              ArrayList<Clause> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Clause> pl = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamListE",51, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cParamListE ::= empty 
            {
              ArrayList<Clause> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamListE",51, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cParamList ::= cParamList COMMA clause 
            {
              ArrayList<Clause> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Clause> pl = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Clause v = (Clause)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamList",52, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // cParamList ::= clause 
            {
              ArrayList<Clause> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Clause v = (Clause)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<Clause> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cParamList",52, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // case ::= CASE LBRACE RSQBRACKET cParamListE LSQBRACKET RBRACE 
            {
              CaseStatement RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Clause> cp = (ArrayList<Clause>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		 RESULT = new CaseStatement( cp );  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("case",50, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // clause ::= expression COLON expression 
            {
              Clause RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp consq = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new Clause(pred,consq); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("clause",49, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmtIf ::= IF expression THEN expression RSQBRACKET ELSE expression LSQBRACKET 
            {
              IfStatement RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).right;
		Exp pred = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)).value;
		int consqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int consqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		Exp consq = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int consq2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int consq2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp consq2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	
	RESULT = new IfStatement(pred,consq,consq2);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("stmtIf",48, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // vecSize ::= SIZE LPAREN expression RPAREN 
            {
              SizeVectorFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new SizeVectorFunction(v); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSize",47, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // vecIndex ::= expression RSQBRACKET expression LSQBRACKET 
            {
              VectorIndex RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = new VectorIndex(v,e); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecIndex",46, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vParamListE ::= vParamList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamListE",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vParamListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamListE",44, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vParamList ::= vParamList COMMA vecSpec 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamList",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vParamList ::= vecSpec 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<Exp> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vParamList",45, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vector ::= RSQBRACKET COLON RSQBRACKET vParamListE LSQBRACKET COLON LSQBRACKET 
            {
              VectorFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<Exp> v = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		 RESULT = new VectorFunction(v);  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vector",43, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vecSpec ::= expression COLON expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVecSpec(e,f); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSpec",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vecSpec ::= expression 
            {
              Exp RESULT =null;
		int enleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int enright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp en = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = en; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("vecSpec",42, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // call ::= CALL LPAREN expression COMMA expression RPAREN 
            {
              CallFunction RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp func = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp lst = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	RESULT = new CallFunction(func,lst);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("call",41, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funCall ::= factor LPAREN funCallExpListE RPAREN 
            {
              ExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> el = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT= new ExpFunCall(v,el); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCall",38, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funCallExpListE ::= funCallExpList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpListE",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funCallExpListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpListE",39, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // funCallExpList ::= funCallExpList COMMA expression 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
											RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpList",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // funCallExpList ::= expression 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 ArrayList<Exp> ls = new ArrayList<>(); 
									ls.add(v) ;
									RESULT = ls;
									
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("funCallExpList",40, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedures ::= procDef 
            {
              Exp RESULT =null;
		int pdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction pd = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pd; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedures ::= procDefWithOverflow 
            {
              Exp RESULT =null;
		int pdOverFlowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pdOverFlowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction pdOverFlow = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pdOverFlow; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedures ::= noLimitProc 
            {
              Exp RESULT =null;
		int nlpleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nlpright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunction nlp = (ExpFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=nlp; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procedures",36, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // noLimitProc ::= PROC VARIABLE expression 
            {
              ExpFunction RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpFunction(v,body); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("noLimitProc",37, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procDefWithOverflow ::= PROC LPAREN paramListE DOT paramter RPAREN expression 
            {
              ExpFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).right;
		ArrayList<ExpPara> p = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-4)).value;
		int overflowleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int overflowright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ExpPara overflow = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
	RESULT=new ExpFunction(p,body,overflow); 				

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procDefWithOverflow",35, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procDef ::= PROC LPAREN RSQBRACKET paramListE LSQBRACKET RPAREN expression 
            {
              ExpFunction RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 

System.out.println("procDeof");
RESULT=new ExpFunction(pl,body); 

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("procDef",34, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-6)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // paramListE ::= paramList 
            {
              ArrayList<ExpPara> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl;  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // paramListE ::= empty 
            {
              ArrayList<ExpPara> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramListE",32, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // paramList ::= paramList COMMA paramter 
            {
              ArrayList<ExpPara> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<ExpPara> pl = (ArrayList<ExpPara>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpPara v = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 pl.add(v); 
												RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramList",33, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramList ::= paramter 
            {
              ArrayList<ExpPara> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpPara v = (ExpPara)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
												ArrayList<ExpPara> ls = new ArrayList();
												ls.add(v);
												RESULT = ls;
												 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramList",33, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramter ::= MODIFIER VARIABLE 
            {
              ExpPara RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 

			RESULT = new ExpPara(m,v); 

			
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramter",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramter ::= VARIABLE 
            {
              ExpPara RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpPara("default",v); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("paramter",31, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // substr ::= SUBSTR LPAREN expression COMMA expression COMMA expression RPAREN 
            {
              SubstrFunction RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).right;
		Exp str = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp start = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp end = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
	RESULT = new SubstrFunction(str,start,end);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("substr",28, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-7)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // concat ::= allLists CONCAT allLists 
            {
              Exp RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ListFunction l1 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction l2 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpConcat(l1, l2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("concat",0, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // isEqual ::= IS_EQUAL LPAREN expression COMMA expression RPAREN 
            {
              IsEqual RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
							RESULT = new IsEqual(e1,e2);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isEqual",27, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // isEqv ::= IS_EQV LPAREN expression COMMA expression RPAREN 
            {
              IsEqv RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 
							RESULT = new IsEqv(e1,e2);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isEqv",26, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // allLists ::= list 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("allLists",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // allLists ::= list2 
            {
              ListFunction RESULT =null;
		int lst2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lst2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst2 = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=lst2; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("allLists",24, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list2 ::= RSQBRACKET expListE LSQBRACKET 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ArrayList<Exp> lst = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
				RESULT = new ListFunction(lst);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list2",23, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list ::= LIST LPAREN list2 RPAREN 
            {
              ListFunction RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
			RESULT = lst;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("list",22, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expListE ::= expList 
            {
              ArrayList<Exp> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expListE ::= empty 
            {
              ArrayList<Exp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expListE",15, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expList ::= expression COMMA expList 
            {
              ArrayList<Exp> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp v = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Exp> pl = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
											
											pl.add(0,v); 
											RESULT = pl; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expList",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expList ::= NIL 
            {
              ArrayList<Exp> RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
									RESULT = new ArrayList<>();
									
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expList",16, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // isPair ::= IS_PAIR LPAREN expression RPAREN 
            {
              IsPairFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		RESULT = new IsPairFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("isPair",21, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // car ::= CAR LPAREN pair RPAREN 
            {
              CarFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		// System.out.println("inside car");
		RESULT = new CarFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("car",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // car ::= CAR LPAREN VARIABLE RPAREN 
            {
              CarFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		// System.out.println("inside car");
		ExpVar var = new ExpVar(p);
		RESULT = new CarFunction(var);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("car",19, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cdr ::= CDR LPAREN pair RPAREN 
            {
              CdrFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		RESULT = new CdrFunction(p);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cdr",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // cdr ::= CDR LPAREN VARIABLE RPAREN 
            {
              CdrFunction RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		ExpVar var = new ExpVar(p);
		RESULT = new CdrFunction(var);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("cdr",20, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pair ::= PAIR LPAREN expression COMMA expression RPAREN 
            {
              PairFunction RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		ArrayList<Exp> store = new ArrayList<>();
		store.add(e1);
		store.add(e2);
		RESULT = new PairFunction("pair",store);

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("pair",18, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-5)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= letExp 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = l; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expression ::= LBRACE stmtList RBRACE 
            {
              Exp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = body; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expression ::= arithExp 
            {
              Exp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp a = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = a; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression ::= string 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp s = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=s; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression ::= procedures 
            {
              Exp RESULT =null;
		int prdleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int prdright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp prd = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=prd; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression ::= pair 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		PairFunction p = (PairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression ::= car 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CarFunction c = (CarFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= cdr 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CdrFunction c = (CdrFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= isPair 
            {
              Exp RESULT =null;
		int ipleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ipright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsPairFunction ip = (IsPairFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = ip; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expression ::= allLists 
            {
              Exp RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ListFunction lst = (ListFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = lst; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression ::= vecSize 
            {
              Exp RESULT =null;
		int vsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		SizeVectorFunction vs = (SizeVectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		  RESULT = vs;
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression ::= isEqv 
            {
              Exp RESULT =null;
		int eqvleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eqvright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsEqv eqv = (IsEqv)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = eqv; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression ::= isEqual 
            {
              Exp RESULT =null;
		int isEqleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int isEqright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		IsEqual isEq = (IsEqual)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = isEq; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= substr 
            {
              Exp RESULT =null;
		int subsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int subsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		SubstrFunction subs = (SubstrFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=subs; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= call 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		CallFunction c = (CallFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= comp 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp n = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= n; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= funCall 
            {
              Exp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ExpFunCall fc = (ExpFunCall)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expression ::= concat 
            {
              Exp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp c = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= c; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("expression",9, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // letExp ::= LET bindings IN expression 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		ArrayList<Binding> bs = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp body = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new StmtLet(bs, body);
           
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("letExp",5, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	    
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("binding",8, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // bindings ::= binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		bl.add(0,b);
		RESULT = bl;
	     
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // bindings ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindings",6, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList<Binding> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		ArrayList<Binding> bl = (ArrayList<Binding>)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  bl.add(0,b);
		  RESULT = bl;
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // bindingsAux ::= empty 
            {
              ArrayList<Binding> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",7, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // definition ::= VARIABLE ASSIGN expression SEMI 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		
		   RESULT = new StmtDefinition(v, e);
		
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("definition",4, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-3)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // arithExp ::= arithExp PLUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpAdd(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // arithExp ::= arithExp MINUS term 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
			RESULT = new ExpSub(e, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // arithExp ::= term 
            {
              Exp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = t; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("arithExp",10, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // power ::= factor EXPO power 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpExpo(f,p); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // power ::= factor 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT=f; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("power",17, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // comp ::= power EEQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
              System.out.println("in here");
              RESULT=new ExpComp(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comp ::= power GREATER expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		      RESULT= new ExpGreater(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comp ::= power LESSER expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
		      RESULT= new ExpLesser(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comp ::= power GREATEREQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  RESULT= new ExpGreaterEqual(e1,e2); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comp ::= power LESSEREQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
		  RESULT= new ExpLesserEqual(e1,e2);
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comp ::= power NOTEQUAL expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		  RESULT= new ExpNotEqual(e1,e2);
		  
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("comp",30, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // term ::= power MUL term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMul(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // term ::= power DIV term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpDiv(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // term ::= power MOD term 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).right;
		Exp f = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp t = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		
		RESULT = new ExpMod(f, t); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // term ::= power 
            {
              Exp RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Exp p = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= p; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("term",11, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // string ::= STR 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new ExpLit( FnPlotValue.make(s) ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("string",25, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // complits ::= BOOL_FALSE 
            {
              Boolean RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new Boolean("false"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("complits",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // complits ::= BOOL_TRUE 
            {
              Boolean RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT= new Boolean("true"); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("complits",29, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // number ::= INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make( ilit ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // number ::= DOUBLE 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Double ilit = (Double)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // number ::= BIN_INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
Integer val = Integer.parseInt(ilit, 2);
RESULT = FnPlotValue.make(val);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // number ::= HEX_INTEGER 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String ilit = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 
Integer val = Integer.parseInt(ilit, 16);
RESULT = FnPlotValue.make(val);
 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // number ::= complits 
            {
              FnPlotValue< ? > RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		Boolean ilit = (Boolean)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = FnPlotValue.make(ilit); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // factor ::= number 
            {
              Exp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		FnPlotValue< ? > n = (FnPlotValue< ? >)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpLit( n ); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // factor ::= VARIABLE 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = new ExpVar(var); 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // factor ::= LPAREN expression RPAREN 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-1)).value;
		 RESULT = e; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.elementAt(CUP$FnPlotParser$top-2)), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // factor ::= vector 
            {
              Exp RESULT =null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()).right;
		VectorFunction vc = (VectorFunction)((java_cup.runtime.Symbol) CUP$FnPlotParser$stack.peek()).value;
		 RESULT = vc; 
              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("factor",12, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // empty ::= 
            {
              Object RESULT =null;

              CUP$FnPlotParser$result = parser.getSymbolFactory().newSymbol("empty",14, ((java_cup.runtime.Symbol)CUP$FnPlotParser$stack.peek()), RESULT);
            }
          return CUP$FnPlotParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$FnPlotParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$FnPlotParser$do_action(
    int                        CUP$FnPlotParser$act_num,
    java_cup.runtime.lr_parser CUP$FnPlotParser$parser,
    java.util.Stack            CUP$FnPlotParser$stack,
    int                        CUP$FnPlotParser$top)
    throws java.lang.Exception
    {
              return CUP$FnPlotParser$do_action_part00000000(
                               CUP$FnPlotParser$act_num,
                               CUP$FnPlotParser$parser,
                               CUP$FnPlotParser$stack,
                               CUP$FnPlotParser$top);
    }
}

}
