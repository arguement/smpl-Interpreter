/* The following code was generated by JFlex 1.7.0 */

package fnplot.syntax;

/* Specification for ArithExp tokens */

// user customisations
import java_cup.runtime.*;

// Jlex directives

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>syntax/FnPlotLexer</tt>
 */
public class FnPlotLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\2\1\2\1\1\1\47\1\50\1\1\22\0\1\72\1\63"+
    "\1\66\1\6\1\0\1\22\1\40\1\0\1\24\1\25\1\20\1\17"+
    "\1\27\1\4\1\5\1\21\2\10\10\3\1\12\1\35\1\62\1\23"+
    "\1\61\1\11\1\73\6\70\6\71\1\64\15\71\1\13\1\0\1\15"+
    "\1\14\1\0\1\0\1\43\1\7\1\51\1\36\1\31\1\37\1\65"+
    "\1\53\1\33\2\71\1\30\1\71\1\34\1\44\1\46\1\57\1\45"+
    "\1\52\1\32\1\56\1\60\1\71\1\67\1\55\1\54\1\26\1\41"+
    "\1\16\1\42\6\0\1\47\u1fa2\0\1\47\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\0\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\5\6\1\25"+
    "\2\6\1\26\1\27\1\30\7\6\1\31\1\32\1\0"+
    "\1\6\1\0\1\2\1\0\1\33\1\3\1\0\1\34"+
    "\1\35\1\36\4\0\1\37\1\40\5\6\1\41\1\6"+
    "\1\42\1\43\2\6\1\44\2\6\1\45\10\6\1\46"+
    "\1\47\1\50\1\6\2\0\1\51\1\52\1\53\1\54"+
    "\1\0\1\55\7\6\1\56\1\6\1\57\1\60\1\61"+
    "\4\6\1\62\1\6\1\63\5\6\1\64\1\65\1\37"+
    "\1\66\1\67\1\70\1\6\1\71\1\72\2\6\1\73"+
    "\1\74\1\6\1\75\1\76\1\77\1\100\7\6\1\101"+
    "\1\102\3\6\1\103\1\104\3\6\1\105\1\6\1\106"+
    "\1\6\1\107\1\110\1\111\1\6\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\170\0\264\0\74\0\360\0\u012c"+
    "\0\74\0\74\0\74\0\74\0\74\0\74\0\74\0\u0168"+
    "\0\74\0\u01a4\0\74\0\74\0\74\0\74\0\u01e0\0\u021c"+
    "\0\u0258\0\u0294\0\u02d0\0\74\0\u030c\0\u0348\0\74\0\74"+
    "\0\74\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\264\0\u0690"+
    "\0\u06cc\0\u0708\0\74\0\74\0\74\0\u0744\0\u0780\0\u07bc"+
    "\0\u07f8\0\u0834\0\74\0\u0870\0\u08ac\0\u08e8\0\u0924\0\u0960"+
    "\0\u012c\0\u099c\0\u09d8\0\u012c\0\u0a14\0\u0a50\0\u012c\0\u0a8c"+
    "\0\u0ac8\0\u012c\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\u0ca8\0\74\0\74\0\74\0\u0ce4\0\u0d20\0\u0d5c"+
    "\0\u0708\0\74\0\u0780\0\u07bc\0\u0d98\0\u012c\0\u0dd4\0\u0e10"+
    "\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u012c\0\u0f78\0\u012c"+
    "\0\u012c\0\u012c\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u012c\0\u10a4"+
    "\0\u012c\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u0d20\0\74"+
    "\0\u07f8\0\u012c\0\u012c\0\u012c\0\u120c\0\u012c\0\u012c\0\u1248"+
    "\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u012c\0\u012c\0\u012c\0\u012c"+
    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u012c"+
    "\0\u1518\0\u1554\0\u1590\0\u15cc\0\u012c\0\u012c\0\u1608\0\u1644"+
    "\0\u1680\0\u012c\0\u16bc\0\u012c\0\u16f8\0\u012c\0\u012c\0\u012c"+
    "\0\u1734\0\u012c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\4\1\0\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\0"+
    "\1\3\1\46\1\47\1\50\5\10\1\51\1\52\1\53"+
    "\1\10\1\54\1\55\3\10\1\56\100\0\1\4\1\57"+
    "\1\60\1\0\1\10\1\4\17\0\5\10\1\0\2\10"+
    "\3\0\4\10\2\0\10\10\3\0\2\10\1\0\3\10"+
    "\5\0\1\61\4\0\1\61\72\0\1\62\21\0\1\63"+
    "\1\64\4\0\1\65\11\0\1\66\4\0\1\67\10\0"+
    "\1\70\7\0\1\10\1\0\5\10\16\0\5\10\1\0"+
    "\2\10\3\0\4\10\2\0\10\10\2\0\3\10\1\0"+
    "\3\10\22\0\1\71\1\72\75\0\1\73\53\0\1\10"+
    "\1\0\5\10\16\0\1\10\1\74\1\10\1\75\1\10"+
    "\1\0\2\10\3\0\1\76\3\10\2\0\10\10\2\0"+
    "\3\10\1\0\3\10\5\0\1\10\1\0\5\10\16\0"+
    "\1\77\4\10\1\0\2\10\3\0\4\10\2\0\6\10"+
    "\1\100\1\10\2\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\0\5\10\16\0\5\10\1\0\2\10\3\0\1\10"+
    "\1\101\2\10\2\0\2\10\1\102\5\10\2\0\3\10"+
    "\1\0\3\10\5\0\1\10\1\0\5\10\16\0\4\10"+
    "\1\103\1\0\1\10\1\104\3\0\4\10\2\0\10\10"+
    "\2\0\3\10\1\0\3\10\5\0\1\10\1\0\5\10"+
    "\16\0\5\10\1\0\2\10\3\0\1\10\1\105\2\10"+
    "\2\0\10\10\2\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\0\5\10\16\0\1\10\1\106\3\10\1\0\2\10"+
    "\3\0\1\10\1\107\2\10\2\0\10\10\2\0\3\10"+
    "\1\0\3\10\5\0\1\10\1\0\5\10\16\0\5\10"+
    "\1\0\2\10\3\0\1\10\1\110\2\10\2\0\10\10"+
    "\2\0\3\10\1\0\3\10\5\0\1\10\1\0\5\10"+
    "\16\0\4\10\1\111\1\0\2\10\3\0\4\10\2\0"+
    "\10\10\2\0\3\10\1\0\3\10\5\0\1\10\1\0"+
    "\5\10\16\0\5\10\1\0\2\10\3\0\2\10\1\112"+
    "\1\10\2\0\10\10\2\0\3\10\1\0\3\10\5\0"+
    "\1\10\1\0\5\10\16\0\1\10\1\113\3\10\1\0"+
    "\2\10\3\0\4\10\2\0\10\10\2\0\3\10\1\0"+
    "\3\10\5\0\1\10\1\0\5\10\16\0\5\10\1\0"+
    "\2\10\3\0\1\114\1\10\1\115\1\10\2\0\10\10"+
    "\2\0\3\10\1\0\3\10\5\0\1\10\1\0\5\10"+
    "\16\0\5\10\1\0\1\116\1\10\3\0\1\117\3\10"+
    "\2\0\10\10\2\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\0\5\10\16\0\3\10\1\120\1\10\1\0\2\10"+
    "\3\0\4\10\2\0\5\10\1\121\2\10\2\0\3\10"+
    "\1\0\3\10\5\0\1\10\1\0\5\10\16\0\1\10"+
    "\1\122\3\10\1\0\2\10\3\0\4\10\2\0\10\10"+
    "\2\0\3\10\1\0\3\10\25\0\1\123\73\0\1\124"+
    "\73\0\1\125\53\0\1\10\1\0\5\10\16\0\1\10"+
    "\1\126\3\10\1\0\2\10\3\0\4\10\2\0\10\10"+
    "\2\0\3\10\1\0\3\10\2\0\1\127\1\0\45\127"+
    "\2\0\23\127\73\0\1\130\3\0\1\60\4\0\1\60"+
    "\66\0\1\61\1\57\3\0\1\61\73\0\1\131\72\0"+
    "\1\132\20\0\5\132\1\0\2\132\3\0\4\132\2\0"+
    "\10\132\3\0\2\132\1\0\3\132\5\0\1\133\4\0"+
    "\1\133\66\0\1\134\3\0\2\134\20\0\1\134\4\0"+
    "\2\134\3\0\1\134\5\0\1\134\16\0\1\134\3\0"+
    "\20\71\1\135\53\71\1\72\1\0\45\72\2\0\23\72"+
    "\3\0\1\10\1\0\5\10\16\0\2\10\1\136\2\10"+
    "\1\0\2\10\3\0\4\10\2\0\10\10\2\0\3\10"+
    "\1\0\3\10\5\0\1\10\1\0\5\10\16\0\5\10"+
    "\1\0\2\10\3\0\4\10\2\0\1\10\1\137\6\10"+
    "\2\0\3\10\1\0\3\10\5\0\1\10\1\0\5\10"+
    "\16\0\5\10\1\0\2\10\3\0\4\10\2\0\3\10"+
    "\1\140\4\10\2\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\0\5\10\16\0\5\10\1\0\2\10\3\0\4\10"+
    "\2\0\1\10\1\141\6\10\2\0\3\10\1\0\3\10"+
    "\5\0\1\10\1\0\5\10\16\0\5\10\1\0\2\10"+
    "\3\0\4\10\2\0\5\10\1\142\1\10\1\143\2\0"+
    "\3\10\1\0\3\10\5\0\1\10\1\0\5\10\16\0"+
    "\1\10\1\144\3\10\1\0\2\10\3\0\4\10\2\0"+
    "\10\10\2\0\3\10\1\0\3\10\5\0\1\10\1\0"+
    "\5\10\16\0\5\10\1\0\2\10\3\0\4\10\2\0"+
    "\1\10\1\145\6\10\2\0\3\10\1\0\3\10\5\0"+
    "\1\10\1\0\5\10\16\0\2\10\1\146\2\10\1\0"+
    "\2\10\3\0\4\10\2\0\10\10\2\0\3\10\1\0"+
    "\3\10\5\0\1\10\1\0\5\10\16\0\1\147\4\10"+
    "\1\0\1\10\1\150\3\0\4\10\2\0\10\10\2\0"+
    "\3\10\1\0\3\10\5\0\1\10\1\0\5\10\16\0"+
    "\5\10\1\0\2\10\3\0\2\10\1\151\1\10\2\0"+
    "\10\10\2\0\3\10\1\0\3\10\5\0\1\10\1\0"+
    "\5\10\16\0\5\10\1\0\1\152\1\10\3\0\4\10"+
    "\2\0\10\10\2\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\0\5\10\16\0\5\10\1\0\2\10\3\0\1\153"+
    "\3\10\2\0\10\10\2\0\3\10\1\0\3\10\5\0"+
    "\1\10\1\0\5\10\16\0\3\10\1\154\1\10\1\0"+
    "\2\10\3\0\4\10\2\0\10\10\2\0\3\10\1\0"+
    "\3\10\5\0\1\10\1\0\5\10\16\0\3\10\1\155"+
    "\1\10\1\0\2\10\3\0\1\10\1\156\2\10\2\0"+
    "\10\10\2\0\3\10\1\0\3\10\5\0\1\10\1\0"+
    "\5\10\16\0\5\10\1\0\2\10\3\0\2\10\1\157"+
    "\1\10\2\0\10\10\2\0\3\10\1\0\3\10\5\0"+
    "\1\10\1\0\5\10\16\0\1\160\4\10\1\0\2\10"+
    "\3\0\2\10\1\161\1\10\2\0\1\10\1\162\6\10"+
    "\2\0\3\10\1\0\3\10\5\0\1\10\1\0\5\10"+
    "\16\0\5\10\1\0\2\10\3\0\4\10\2\0\3\10"+
    "\1\163\4\10\2\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\0\2\10\1\164\2\10\16\0\5\10\1\0\2\10"+
    "\3\0\4\10\2\0\10\10\2\0\3\10\1\0\3\10"+
    "\5\0\1\10\1\0\5\10\16\0\5\10\1\0\2\10"+
    "\3\0\1\165\3\10\2\0\10\10\2\0\3\10\1\0"+
    "\3\10\5\0\1\10\1\0\5\10\16\0\2\10\1\166"+
    "\2\10\1\0\2\10\3\0\4\10\2\0\10\10\2\0"+
    "\3\10\1\0\3\10\2\0\1\127\1\0\45\127\2\0"+
    "\15\127\1\167\5\127\72\0\1\170\1\0\20\71\1\135"+
    "\1\171\52\71\3\0\1\10\1\0\5\10\16\0\2\10"+
    "\1\172\2\10\1\0\2\10\3\0\4\10\2\0\10\10"+
    "\2\0\3\10\1\0\3\10\5\0\1\10\1\0\5\10"+
    "\16\0\5\10\1\0\2\10\3\0\4\10\2\0\4\10"+
    "\1\173\3\10\2\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\0\5\10\16\0\1\10\1\174\3\10\1\0\2\10"+
    "\3\0\4\10\2\0\10\10\2\0\3\10\1\0\3\10"+
    "\5\0\1\10\1\0\5\10\16\0\5\10\1\0\2\10"+
    "\3\0\1\175\3\10\2\0\10\10\2\0\3\10\1\0"+
    "\3\10\5\0\1\10\1\0\4\10\1\176\16\0\5\10"+
    "\1\0\2\10\3\0\4\10\2\0\10\10\2\0\3\10"+
    "\1\0\3\10\5\0\1\10\1\0\5\10\16\0\4\10"+
    "\1\177\1\0\2\10\3\0\4\10\2\0\10\10\2\0"+
    "\3\10\1\0\3\10\5\0\1\10\1\0\5\10\16\0"+
    "\1\10\1\200\3\10\1\0\2\10\3\0\4\10\2\0"+
    "\10\10\2\0\3\10\1\0\3\10\5\0\1\10\1\0"+
    "\5\10\16\0\1\10\1\201\3\10\1\0\2\10\3\0"+
    "\4\10\2\0\10\10\2\0\3\10\1\0\3\10\5\0"+
    "\1\10\1\0\5\10\16\0\5\10\1\0\1\202\1\10"+
    "\3\0\4\10\2\0\10\10\2\0\3\10\1\0\3\10"+
    "\5\0\1\10\1\0\5\10\16\0\5\10\1\0\2\10"+
    "\3\0\2\10\1\203\1\10\2\0\10\10\2\0\3\10"+
    "\1\0\3\10\5\0\1\10\1\0\5\10\16\0\4\10"+
    "\1\204\1\0\2\10\3\0\4\10\2\0\10\10\2\0"+
    "\3\10\1\0\3\10\5\0\1\10\1\0\5\10\16\0"+
    "\5\10\1\0\2\10\3\0\4\10\2\0\1\205\7\10"+
    "\2\0\3\10\1\0\3\10\5\0\1\10\1\0\5\10"+
    "\16\0\1\206\4\10\1\0\2\10\3\0\4\10\2\0"+
    "\10\10\2\0\3\10\1\0\3\10\5\0\1\10\1\0"+
    "\5\10\16\0\1\10\1\207\3\10\1\0\2\10\3\0"+
    "\4\10\2\0\10\10\2\0\3\10\1\0\3\10\5\0"+
    "\1\10\1\0\5\10\16\0\1\10\1\210\3\10\1\0"+
    "\2\10\3\0\4\10\2\0\10\10\2\0\3\10\1\0"+
    "\3\10\5\0\1\10\1\0\5\10\16\0\5\10\1\0"+
    "\2\10\3\0\4\10\2\0\1\10\1\211\6\10\2\0"+
    "\3\10\1\0\3\10\5\0\1\10\1\0\5\10\16\0"+
    "\5\10\1\0\2\10\3\0\3\10\1\212\2\0\10\10"+
    "\2\0\3\10\1\0\3\10\5\0\1\10\1\0\5\10"+
    "\16\0\5\10\1\0\2\10\3\0\4\10\2\0\10\10"+
    "\2\0\1\10\1\213\1\10\1\0\3\10\5\0\1\10"+
    "\1\0\5\10\16\0\1\214\4\10\1\0\2\10\3\0"+
    "\4\10\2\0\10\10\2\0\3\10\1\0\3\10\5\0"+
    "\1\10\1\0\5\10\16\0\5\10\1\0\2\10\3\0"+
    "\2\10\1\215\1\10\2\0\10\10\2\0\3\10\1\0"+
    "\3\10\5\0\1\10\1\0\5\10\16\0\2\10\1\216"+
    "\2\10\1\0\2\10\3\0\4\10\2\0\10\10\2\0"+
    "\3\10\1\0\3\10\5\0\1\10\1\0\5\10\16\0"+
    "\3\10\1\217\1\10\1\0\2\10\3\0\4\10\2\0"+
    "\10\10\2\0\3\10\1\0\3\10\5\0\1\10\1\0"+
    "\4\10\1\220\16\0\5\10\1\0\2\10\3\0\4\10"+
    "\2\0\10\10\2\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\0\5\10\16\0\2\10\1\221\2\10\1\0\2\10"+
    "\3\0\4\10\2\0\10\10\2\0\3\10\1\0\3\10"+
    "\5\0\1\10\1\0\5\10\16\0\2\10\1\222\2\10"+
    "\1\0\2\10\3\0\4\10\2\0\10\10\2\0\3\10"+
    "\1\0\3\10\5\0\1\10\1\0\5\10\16\0\3\10"+
    "\1\223\1\10\1\0\2\10\3\0\4\10\2\0\10\10"+
    "\2\0\3\10\1\0\3\10\5\0\1\10\1\0\5\10"+
    "\16\0\3\10\1\224\1\10\1\0\2\10\3\0\4\10"+
    "\2\0\10\10\2\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\0\4\10\1\225\16\0\5\10\1\0\2\10\3\0"+
    "\4\10\2\0\10\10\2\0\3\10\1\0\3\10\5\0"+
    "\1\10\1\0\5\10\16\0\2\10\1\226\2\10\1\0"+
    "\2\10\3\0\4\10\2\0\10\10\2\0\3\10\1\0"+
    "\3\10\5\0\1\10\1\0\5\10\16\0\1\10\1\227"+
    "\3\10\1\0\2\10\3\0\4\10\2\0\10\10\2\0"+
    "\3\10\1\0\3\10\5\0\1\10\1\0\5\10\16\0"+
    "\4\10\1\230\1\0\2\10\3\0\4\10\2\0\10\10"+
    "\2\0\3\10\1\0\3\10\5\0\1\10\1\0\5\10"+
    "\16\0\1\231\4\10\1\0\2\10\3\0\4\10\2\0"+
    "\10\10\2\0\3\10\1\0\3\10\5\0\1\10\1\0"+
    "\5\10\16\0\5\10\1\0\2\10\3\0\2\10\1\232"+
    "\1\10\2\0\10\10\2\0\3\10\1\0\3\10\5\0"+
    "\1\10\1\0\5\10\16\0\5\10\1\0\1\10\1\233"+
    "\3\0\4\10\2\0\10\10\2\0\3\10\1\0\3\10"+
    "\5\0\1\10\1\0\5\10\16\0\4\10\1\234\1\0"+
    "\2\10\3\0\4\10\2\0\10\10\2\0\3\10\1\0"+
    "\3\10\5\0\1\10\1\0\5\10\16\0\5\10\1\0"+
    "\2\10\3\0\4\10\2\0\10\10\2\0\1\10\1\235"+
    "\1\10\1\0\3\10\5\0\1\10\1\0\5\10\16\0"+
    "\2\10\1\236\2\10\1\0\2\10\3\0\4\10\2\0"+
    "\10\10\2\0\3\10\1\0\3\10\5\0\1\10\1\0"+
    "\5\10\16\0\4\10\1\237\1\0\2\10\3\0\4\10"+
    "\2\0\10\10\2\0\3\10\1\0\3\10\5\0\1\10"+
    "\1\0\5\10\16\0\5\10\1\0\2\10\3\0\4\10"+
    "\2\0\4\10\1\240\3\10\2\0\3\10\1\0\3\10"+
    "\5\0\1\10\1\0\5\10\16\0\3\10\1\241\1\10"+
    "\1\0\2\10\3\0\4\10\2\0\10\10\2\0\3\10"+
    "\1\0\3\10\5\0\1\10\1\0\5\10\16\0\4\10"+
    "\1\242\1\0\2\10\3\0\4\10\2\0\10\10\2\0"+
    "\3\10\1\0\3\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6000];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\1\11\1\0\1\1\7\11\1\1"+
    "\1\11\1\1\4\11\5\1\1\11\2\1\3\11\11\1"+
    "\1\0\1\1\1\0\1\1\1\0\2\1\1\0\3\11"+
    "\4\0\1\1\1\11\27\1\3\11\1\1\2\0\1\1"+
    "\1\11\2\1\1\0\32\1\1\11\52\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[162];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    public int getChar() {
	return yychar + 1;
    }

    public int getColumn() {
    	return yycolumn + 1;
    }

    public int getLine() {
	return yyline + 1;
    }

    public String getText() {
	return yytext();
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FnPlotLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
          { 	return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //skip newline, but reset char counter
			yycolumn = 0;
            } 
            // fall through
          case 75: break;
          case 2: 
            { //skip whitespace
            } 
            // fall through
          case 76: break;
          case 3: 
            { // INTEGER
	       return new Symbol(sym.INTEGER, 
				 new Integer(yytext()));
            } 
            // fall through
          case 77: break;
          case 4: 
            { return new Symbol(sym.MINUS);
            } 
            // fall through
          case 78: break;
          case 5: 
            { return new Symbol(sym.DOT);
            } 
            // fall through
          case 79: break;
          case 6: 
            { // VARIABLE
	       return new Symbol(sym.VARIABLE, yytext());
            } 
            // fall through
          case 80: break;
          case 7: 
            { return new Symbol(sym.COLON);
            } 
            // fall through
          case 81: break;
          case 8: 
            { return new Symbol(sym.RSQBRACKET);
            } 
            // fall through
          case 82: break;
          case 9: 
            { return new Symbol(sym.EXPO);
            } 
            // fall through
          case 83: break;
          case 10: 
            { return new Symbol(sym.LSQBRACKET);
            } 
            // fall through
          case 84: break;
          case 11: 
            { return new Symbol(sym.RBRACE);
            } 
            // fall through
          case 85: break;
          case 12: 
            { return new Symbol(sym.PLUS);
            } 
            // fall through
          case 86: break;
          case 13: 
            { return new Symbol(sym.MUL);
            } 
            // fall through
          case 87: break;
          case 14: 
            { return new Symbol(sym.DIV);
            } 
            // fall through
          case 88: break;
          case 15: 
            { return new Symbol(sym.MOD);
            } 
            // fall through
          case 89: break;
          case 16: 
            { return new Symbol(sym.ASSIGN);
            } 
            // fall through
          case 90: break;
          case 17: 
            { return new Symbol(sym.LPAREN);
            } 
            // fall through
          case 91: break;
          case 18: 
            { return new Symbol(sym.RPAREN);
            } 
            // fall through
          case 92: break;
          case 19: 
            { return new Symbol(sym.LBRACE);
            } 
            // fall through
          case 93: break;
          case 20: 
            { return new Symbol(sym.COMMA);
            } 
            // fall through
          case 94: break;
          case 21: 
            { return new Symbol(sym.SEMI);
            } 
            // fall through
          case 95: break;
          case 22: 
            { return new Symbol(sym.BAND);
            } 
            // fall through
          case 96: break;
          case 23: 
            { return new Symbol(sym.BOR);
            } 
            // fall through
          case 97: break;
          case 24: 
            { return new Symbol(sym.BNOT);
            } 
            // fall through
          case 98: break;
          case 25: 
            { return new Symbol(sym.GREATER);
            } 
            // fall through
          case 99: break;
          case 26: 
            { return new Symbol(sym.LESSER);
            } 
            // fall through
          case 100: break;
          case 27: 
            { // DOUBLE
	       return new Symbol(sym.DOUBLE, 
				 new Double(yytext()));
            } 
            // fall through
          case 101: break;
          case 28: 
            { return new Symbol(sym.NIL);
            } 
            // fall through
          case 102: break;
          case 29: 
            { return new Symbol(sym.BOOL_TRUE);
            } 
            // fall through
          case 103: break;
          case 30: 
            { return new Symbol(sym.BOOL_FALSE);
            } 
            // fall through
          case 104: break;
          case 31: 
            { 
            } 
            // fall through
          case 105: break;
          case 32: 
            { return new Symbol(sym.EEQUAL);
            } 
            // fall through
          case 106: break;
          case 33: 
            { return new Symbol(sym.TO);
            } 
            // fall through
          case 107: break;
          case 34: 
            { return new Symbol(sym.IN);
            } 
            // fall through
          case 108: break;
          case 35: 
            { return new Symbol(sym.IF);
            } 
            // fall through
          case 109: break;
          case 36: 
            { return new Symbol(sym.DO);
            } 
            // fall through
          case 110: break;
          case 37: 
            { return new Symbol(sym.OR);
            } 
            // fall through
          case 111: break;
          case 38: 
            { return new Symbol(sym.GREATEREQUAL);
            } 
            // fall through
          case 112: break;
          case 39: 
            { return new Symbol(sym.LESSEREQUAL);
            } 
            // fall through
          case 113: break;
          case 40: 
            { return new Symbol(sym.NOTEQUAL);
            } 
            // fall through
          case 114: break;
          case 41: 
            { return new Symbol(sym.BIN_INTEGER,yytext().substring(2) );
            } 
            // fall through
          case 115: break;
          case 42: 
            { return new Symbol( sym.CHAR,yytext().substring(2).charAt(0) );
            } 
            // fall through
          case 116: break;
          case 43: 
            { return new Symbol( sym.CHAR,new Character(   ("\\u"+yytext().substring(2)).toCharArray()[0] ) );
            } 
            // fall through
          case 117: break;
          case 44: 
            { return new Symbol( sym.HEX_INTEGER,yytext().substring(2) );
            } 
            // fall through
          case 118: break;
          case 45: 
            { return new Symbol(sym.LET);
            } 
            // fall through
          case 119: break;
          case 46: 
            { return new Symbol(sym.NOT);
            } 
            // fall through
          case 120: break;
          case 47: 
            { return new Symbol(sym.DEF);
            } 
            // fall through
          case 121: break;
          case 48: 
            { return new Symbol(sym.FOR);
            } 
            // fall through
          case 122: break;
          case 49: 
            { return new Symbol(sym.AND);
            } 
            // fall through
          case 123: break;
          case 50: 
            { return new Symbol(sym.CDR);
            } 
            // fall through
          case 124: break;
          case 51: 
            { return new Symbol(sym.CAR);
            } 
            // fall through
          case 125: break;
          case 52: 
            { return new Symbol(sym.STR, yytext().substring(1,yytext().length() - 1 ) );
            } 
            // fall through
          case 126: break;
          case 53: 
            { return new Symbol (sym.CONCAT);
            } 
            // fall through
          case 127: break;
          case 54: 
            { return new Symbol(sym.LIST);
            } 
            // fall through
          case 128: break;
          case 55: 
            { return new Symbol(sym.MODIFIER,yytext());
            } 
            // fall through
          case 129: break;
          case 56: 
            { return new Symbol(sym.ELSE);
            } 
            // fall through
          case 130: break;
          case 57: 
            { return new Symbol(sym.IS_EQV);
            } 
            // fall through
          case 131: break;
          case 58: 
            { return new Symbol(sym.THEN);
            } 
            // fall through
          case 132: break;
          case 59: 
            { return new Symbol(sym.READ);
            } 
            // fall through
          case 133: break;
          case 60: 
            { return new Symbol(sym.PAIR);
            } 
            // fall through
          case 134: break;
          case 61: 
            { return new Symbol(sym.PROC);
            } 
            // fall through
          case 135: break;
          case 62: 
            { return new Symbol(sym.CALL);
            } 
            // fall through
          case 136: break;
          case 63: 
            { return new Symbol(sym.CASE);
            } 
            // fall through
          case 137: break;
          case 64: 
            { return new Symbol(sym.SIZE);
            } 
            // fall through
          case 138: break;
          case 65: 
            { return new Symbol(sym.IS_PAIR);
            } 
            // fall through
          case 139: break;
          case 66: 
            { return new Symbol(sym.PRINT);
            } 
            // fall through
          case 140: break;
          case 67: 
            { return new Symbol(sym.IS_EQUAL);
            } 
            // fall through
          case 141: break;
          case 68: 
            { return new Symbol(sym.HEAPINSERT);
            } 
            // fall through
          case 142: break;
          case 69: 
            { return new Symbol(sym.SUBSTR);
            } 
            // fall through
          case 143: break;
          case 70: 
            { return new Symbol(sym.GETMIN);
            } 
            // fall through
          case 144: break;
          case 71: 
            { return new Symbol(sym.READINT);
            } 
            // fall through
          case 145: break;
          case 72: 
            { return new Symbol(sym.PRINTLN);
            } 
            // fall through
          case 146: break;
          case 73: 
            { return new Symbol(sym.HEAP);
            } 
            // fall through
          case 147: break;
          case 74: 
            { return new Symbol(sym.HEAPDELETE);
            } 
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
